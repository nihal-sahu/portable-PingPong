
STM32_Configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f7c  08006f7c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f84  08006f84  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a78  20000090  0800701c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b08  0800701c  00024b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3a4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a52  00000000  00000000  0003e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00041eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000435b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ddd  00000000  00000000  00044b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001887c  00000000  00000000  0004994d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b035  00000000  00000000  000621c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd1fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000690c  00000000  00000000  000fd254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e78 	.word	0x08006e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006e78 	.word	0x08006e78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
};
uint16_t delay_time = 500;
bool startPhase = false;

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8

  HAL_Init();
 800057e:	f000 fd41 	bl	8001004 <HAL_Init>
  SystemClock_Config();
 8000582:	f000 f9b7 	bl	80008f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000586:	f000 fa8b 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 fa5f 	bl	8000a4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800058e:	f000 fa1d 	bl	80009cc <MX_SPI1_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		//writing CS pin to default as high
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x64>)
 8000598:	f001 f83a 	bl	8001610 <HAL_GPIO_WritePin>

  //CREATING RTOS TASKS
  //start button
  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800059c:	bf00      	nop
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x68>)
 80005a4:	f001 f81c 	bl	80015e0 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f7      	bne.n	800059e <main+0x26>

  xTaskCreate(data_transfer, "Data Transfer", 100, NULL, 1, NULL);		  //task for SPI data communication
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	490a      	ldr	r1, [pc, #40]	; (80005e4 <main+0x6c>)
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x70>)
 80005be:	f003 fe9e 	bl	80042fe <xTaskCreate>
  xTaskCreate(led_pattern, "LED Pattern", 100, NULL, 1, &led_handle);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x74>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <main+0x78>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x7c>)
 80005d2:	f003 fe94 	bl	80042fe <xTaskCreate>



  //start the scheduler
  vTaskStartScheduler();
 80005d6:	f004 f80b 	bl	80045f0 <vTaskStartScheduler>

  while (1);
 80005da:	e7fe      	b.n	80005da <main+0x62>
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020800 	.word	0x40020800
 80005e4:	08006e90 	.word	0x08006e90
 80005e8:	080005f9 	.word	0x080005f9
 80005ec:	200049cc 	.word	0x200049cc
 80005f0:	08006ea0 	.word	0x08006ea0
 80005f4:	08000659 	.word	0x08000659

080005f8 <data_transfer>:

  return 0;
}

void data_transfer(void *pvParameters)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while (1)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <data_transfer+0x4c>)
 8000606:	f001 f803 	bl	8001610 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&MasterSend, 1, 10);
 800060a:	230a      	movs	r3, #10
 800060c:	2201      	movs	r2, #1
 800060e:	490e      	ldr	r1, [pc, #56]	; (8000648 <data_transfer+0x50>)
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <data_transfer+0x54>)
 8000612:	f001 fd60 	bl	80020d6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t*)&MasterReceive, 1, 10);
 8000616:	230a      	movs	r3, #10
 8000618:	2201      	movs	r2, #1
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <data_transfer+0x58>)
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <data_transfer+0x54>)
 800061e:	f001 fe96 	bl	800234e <HAL_SPI_Receive>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f003 ffaf 	bl	8004588 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <data_transfer+0x4c>)
 8000630:	f000 ffee 	bl	8001610 <HAL_GPIO_WritePin>

		printf("%d\n\r", MasterReceive);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <data_transfer+0x58>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <data_transfer+0x5c>)
 800063c:	f005 fcc6 	bl	8005fcc <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000640:	e7de      	b.n	8000600 <data_transfer+0x8>
 8000642:	bf00      	nop
 8000644:	40020000 	.word	0x40020000
 8000648:	200000ac 	.word	0x200000ac
 800064c:	200049d0 	.word	0x200049d0
 8000650:	200049c8 	.word	0x200049c8
 8000654:	08006eac 	.word	0x08006eac

08000658 <led_pattern>:
	}
}

void led_pattern(void *pvParameters)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	  //led loop
	while (1)
	{
		for (uint8_t i = 0; i < 13; ++i)
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e040      	b.n	80006e8 <led_pattern+0x90>
		{
			HAL_GPIO_TogglePin(GPIOB, led_arr[i]);
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4a53      	ldr	r2, [pc, #332]	; (80007b8 <led_pattern+0x160>)
 800066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066e:	4619      	mov	r1, r3
 8000670:	4852      	ldr	r0, [pc, #328]	; (80007bc <led_pattern+0x164>)
 8000672:	f000 ffe6 	bl	8001642 <HAL_GPIO_TogglePin>

			if (i > 0)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <led_pattern+0x36>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i - 1]);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <led_pattern+0x160>)
 8000682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000686:	4619      	mov	r1, r3
 8000688:	484c      	ldr	r0, [pc, #304]	; (80007bc <led_pattern+0x164>)
 800068a:	f000 ffda 	bl	8001642 <HAL_GPIO_TogglePin>

			if (i == 12)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b0c      	cmp	r3, #12
 8000692:	d118      	bne.n	80006c6 <led_pattern+0x6e>
			{
				green_press();
 8000694:	f000 f89a 	bl	80007cc <green_press>
				checkConditions();
 8000698:	f000 f8f0 	bl	800087c <checkConditions>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i]);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a46      	ldr	r2, [pc, #280]	; (80007b8 <led_pattern+0x160>)
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4845      	ldr	r0, [pc, #276]	; (80007bc <led_pattern+0x164>)
 80006a8:	f000 ffcb 	bl	8001642 <HAL_GPIO_TogglePin>

				if (!startPhase)
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <led_pattern+0x168>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <led_pattern+0x6e>
				{
					delay_time -= 30;
 80006ba:	4b42      	ldr	r3, [pc, #264]	; (80007c4 <led_pattern+0x16c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3b1e      	subs	r3, #30
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <led_pattern+0x16c>)
 80006c4:	801a      	strh	r2, [r3, #0]
				}
			}

			vTaskDelay(pdMS_TO_TICKS(delay_time));
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <led_pattern+0x16c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	fb03 f302 	mul.w	r3, r3, r2
 80006d4:	4a3c      	ldr	r2, [pc, #240]	; (80007c8 <led_pattern+0x170>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	099b      	lsrs	r3, r3, #6
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ff53 	bl	8004588 <vTaskDelay>
		for (uint8_t i = 0; i < 13; ++i)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3301      	adds	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2b0c      	cmp	r3, #12
 80006ec:	d9bb      	bls.n	8000666 <led_pattern+0xe>

		}

		if (startPhase)
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <led_pattern+0x168>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <led_pattern+0xae>
		{
			startPhase = false;
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <led_pattern+0x168>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
			delay_time = 500;
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <led_pattern+0x16c>)
 80006fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000702:	801a      	strh	r2, [r3, #0]
			break;
 8000704:	e053      	b.n	80007ae <led_pattern+0x156>
		}

		for (uint8_t i = 13; i > 0; --i)
 8000706:	230d      	movs	r3, #13
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e041      	b.n	8000790 <led_pattern+0x138>
		{
			HAL_GPIO_TogglePin(GPIOB, led_arr[i-1]);
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <led_pattern+0x160>)
 8000712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000716:	4619      	mov	r1, r3
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <led_pattern+0x164>)
 800071a:	f000 ff92 	bl	8001642 <HAL_GPIO_TogglePin>

			if ((i -1) != 12)
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	2b0d      	cmp	r3, #13
 8000722:	d007      	beq.n	8000734 <led_pattern+0xdc>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i]);
 8000724:	7bbb      	ldrb	r3, [r7, #14]
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <led_pattern+0x160>)
 8000728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072c:	4619      	mov	r1, r3
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <led_pattern+0x164>)
 8000730:	f000 ff87 	bl	8001642 <HAL_GPIO_TogglePin>

			if ((i - 1) == 0)
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d119      	bne.n	800076e <led_pattern+0x116>
			{
				yellow_press();
 800073a:	f000 f873 	bl	8000824 <yellow_press>
				checkConditions();
 800073e:	f000 f89d 	bl	800087c <checkConditions>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i - 1]);
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <led_pattern+0x160>)
 8000748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074c:	4619      	mov	r1, r3
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <led_pattern+0x164>)
 8000750:	f000 ff77 	bl	8001642 <HAL_GPIO_TogglePin>

				if (!startPhase)
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <led_pattern+0x168>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d005      	beq.n	800076e <led_pattern+0x116>
				{
					delay_time -= 30;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <led_pattern+0x16c>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	3b1e      	subs	r3, #30
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <led_pattern+0x16c>)
 800076c:	801a      	strh	r2, [r3, #0]
				}
			}

			vTaskDelay(pdMS_TO_TICKS(delay_time));
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <led_pattern+0x16c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	fb03 f302 	mul.w	r3, r3, r2
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <led_pattern+0x170>)
 800077e:	fba2 2303 	umull	r2, r3, r2, r3
 8000782:	099b      	lsrs	r3, r3, #6
 8000784:	4618      	mov	r0, r3
 8000786:	f003 feff 	bl	8004588 <vTaskDelay>
		for (uint8_t i = 13; i > 0; --i)
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	3b01      	subs	r3, #1
 800078e:	73bb      	strb	r3, [r7, #14]
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ba      	bne.n	800070c <led_pattern+0xb4>
		}

		if (startPhase)
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <led_pattern+0x168>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f43f af60 	beq.w	8000660 <led_pattern+0x8>
		{
			startPhase = false;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <led_pattern+0x168>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
			delay_time = 500;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <led_pattern+0x16c>)
 80007a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007ac:	801a      	strh	r2, [r3, #0]
			break;
		}
	  }
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	40020400 	.word	0x40020400
 80007c0:	200000ad 	.word	0x200000ad
 80007c4:	2000001a 	.word	0x2000001a
 80007c8:	10624dd3 	.word	0x10624dd3

080007cc <green_press>:

void green_press(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 80007d2:	f000 fc4d 	bl	8001070 <HAL_GetTick>
 80007d6:	6078      	str	r0, [r7, #4]
	uint32_t currentTime = HAL_GetTick();
 80007d8:	f000 fc4a 	bl	8001070 <HAL_GetTick>
 80007dc:	6038      	str	r0, [r7, #0]

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != 0)
 80007de:	e00d      	b.n	80007fc <green_press+0x30>
	{
		currentTime = HAL_GetTick();
 80007e0:	f000 fc46 	bl	8001070 <HAL_GetTick>
 80007e4:	6038      	str	r0, [r7, #0]
		if (currentTime - startTime == delay_time)
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <green_press+0x4c>)
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d103      	bne.n	80007fc <green_press+0x30>
		{
			MasterSend = 3;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <green_press+0x50>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	701a      	strb	r2, [r3, #0]
			return;
 80007fa:	e009      	b.n	8000810 <green_press+0x44>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != 0)
 80007fc:	2104      	movs	r1, #4
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <green_press+0x54>)
 8000800:	f000 feee 	bl	80015e0 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ea      	bne.n	80007e0 <green_press+0x14>
		}
	}

	MasterSend = 1;
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <green_press+0x50>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000001a 	.word	0x2000001a
 800081c:	200000ac 	.word	0x200000ac
 8000820:	40020800 	.word	0x40020800

08000824 <yellow_press>:

void yellow_press(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 800082a:	f000 fc21 	bl	8001070 <HAL_GetTick>
 800082e:	6078      	str	r0, [r7, #4]
	uint32_t currentTime = HAL_GetTick();
 8000830:	f000 fc1e 	bl	8001070 <HAL_GetTick>
 8000834:	6038      	str	r0, [r7, #0]

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) != 0)
 8000836:	e00d      	b.n	8000854 <yellow_press+0x30>
	{
		currentTime = HAL_GetTick();
 8000838:	f000 fc1a 	bl	8001070 <HAL_GetTick>
 800083c:	6038      	str	r0, [r7, #0]
		if (currentTime - startTime == delay_time)
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <yellow_press+0x4c>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4293      	cmp	r3, r2
 800084a:	d103      	bne.n	8000854 <yellow_press+0x30>
		{
			MasterSend = 4;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <yellow_press+0x50>)
 800084e:	2204      	movs	r2, #4
 8000850:	701a      	strb	r2, [r3, #0]
			return;
 8000852:	e009      	b.n	8000868 <yellow_press+0x44>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) != 0)
 8000854:	2108      	movs	r1, #8
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <yellow_press+0x54>)
 8000858:	f000 fec2 	bl	80015e0 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1ea      	bne.n	8000838 <yellow_press+0x14>
		}
	}

	MasterSend = 2;
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <yellow_press+0x50>)
 8000864:	2202      	movs	r2, #2
 8000866:	701a      	strb	r2, [r3, #0]
}
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000001a 	.word	0x2000001a
 8000874:	200000ac 	.word	0x200000ac
 8000878:	40020800 	.word	0x40020800

0800087c <checkConditions>:

void checkConditions(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	if (MasterSend == 3 || MasterSend == 4)
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <checkConditions+0x28>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d003      	beq.n	8000890 <checkConditions+0x14>
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <checkConditions+0x28>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b04      	cmp	r3, #4
 800088e:	d106      	bne.n	800089e <checkConditions+0x22>
	{
		startPhase = true;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <checkConditions+0x2c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f000 fbf5 	bl	8001088 <HAL_Delay>
	}
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000ac 	.word	0x200000ac
 80008a8:	200000ad 	.word	0x200000ad

080008ac <uart2_write>:

//rerouting printf more efficiently
int uart2_write(int ch)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 80008b4:	bf00      	nop
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <uart2_write+0x2c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <uart2_write+0x2c>)
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	6053      	str	r3, [r2, #4]

	return ch;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	40004400 	.word	0x40004400

080008dc <__io_putchar>:

//outputs to serial monitor
int __io_putchar(int ch)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ffe1 	bl	80008ac <uart2_write>
	return ch;
 80008ea:	687b      	ldr	r3, [r7, #4]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 fb5a 	bl	8005fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <SystemClock_Config+0xd0>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <SystemClock_Config+0xd0>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <SystemClock_Config+0xd0>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <SystemClock_Config+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SystemClock_Config+0xd4>)
 8000942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xd4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2310      	movs	r3, #16
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000968:	2310      	movs	r3, #16
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800096c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000970:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000972:	2304      	movs	r3, #4
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000976:	2307      	movs	r3, #7
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe7a 	bl	8001678 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800098a:	f000 f921 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2302      	movs	r3, #2
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f8dc 	bl	8001b68 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009b6:	f000 f90b 	bl	8000bd0 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3750      	adds	r7, #80	; 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a00:	2228      	movs	r2, #40	; 0x28
 8000a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a1e:	f001 fad1 	bl	8001fc4 <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a28:	f000 f8d2 	bl	8000bd0 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200049d0 	.word	0x200049d0
 8000a34:	40013000 	.word	0x40013000

08000a38 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <SPI1_IRQHandler+0x10>)
 8000a3e:	f001 ff39 	bl	80028b4 <HAL_SPI_IRQHandler>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200049d0 	.word	0x200049d0

08000a4c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f002 fbe4 	bl	8003250 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f89f 	bl	8000bd0 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20004a28 	.word	0x20004a28
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a37      	ldr	r2, [pc, #220]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2110      	movs	r1, #16
 8000b2a:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <MX_GPIO_Init+0x100>)
 8000b2c:	f000 fd70 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000b30:	2200      	movs	r2, #0
 8000b32:	f247 71f7 	movw	r1, #30711	; 0x77f7
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0x104>)
 8000b38:	f000 fd6a 	bl	8001610 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin, Green Button, yellow Button */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8000b3c:	f242 030c 	movw	r3, #8204	; 0x200c
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0x108>)
 8000b54:	f000 fbc0 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x100>)
 8000b70:	f000 fbb2 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000b74:	f247 73f7 	movw	r3, #30711	; 0x77f7
 8000b78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0x104>)
 8000b8e:	f000 fba3 	bl	80012d8 <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40020800 	.word	0x40020800

08000bac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d101      	bne.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bbe:	f000 fa43 	bl	8001048 <HAL_IncTick>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <Error_Handler>:

void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  __disable_irq();
  while (1);
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x54>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <HAL_MspInit+0x54>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x54>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_MspInit+0x54>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_MspInit+0x54>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_MspInit+0x54>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	f06f 0001 	mvn.w	r0, #1
 8000c22:	f000 fb0d 	bl	8001240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_SPI_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c8e:	23e0      	movs	r3, #224	; 0xe0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_SPI_MspInit+0x8c>)
 8000caa:	f000 fb15 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0x84>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12b      	bne.n	8000d3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0x8c>)
 8000d3a:	f000 facd 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	2019      	movs	r0, #25
 8000d6a:	f000 fa69 	bl	8001240 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d6e:	2019      	movs	r0, #25
 8000d70:	f000 fa82 	bl	8001278 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_InitTick+0xa0>)
 8000d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_InitTick+0xa0>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6453      	str	r3, [r2, #68]	; 0x44
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_InitTick+0xa0>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d90:	f107 0210 	add.w	r2, r7, #16
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f8e0 	bl	8001f60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000da0:	f001 f8ca 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8000da4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da8:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <HAL_InitTick+0xa4>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	0c9b      	lsrs	r3, r3, #18
 8000db0:	3b01      	subs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_InitTick+0xa8>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <HAL_InitTick+0xac>)
 8000db8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_InitTick+0xa8>)
 8000dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_InitTick+0xa8>)
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_InitTick+0xa8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_InitTick+0xa8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <HAL_InitTick+0xa8>)
 8000dd6:	f001 ffbb 	bl	8002d50 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d104      	bne.n	8000dea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <HAL_InitTick+0xa8>)
 8000de2:	f002 f80f 	bl	8002e04 <HAL_TIM_Base_Start_IT>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3730      	adds	r7, #48	; 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	20004a6c 	.word	0x20004a6c
 8000e00:	40010000 	.word	0x40010000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e36:	f002 f847 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20004a6c 	.word	0x20004a6c

08000e44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e00a      	b.n	8000e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e56:	f3af 8000 	nop.w
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf0      	blt.n	8000e56 <_read+0x12>
	}

return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fd1f 	bl	80008dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x12>
	}
	return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_close>:

int _close(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ede:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_isatty>:

int _isatty(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f004 fffc 	bl	8005f4c <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20018000 	.word	0x20018000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	200000b0 	.word	0x200000b0
 8000f88:	20004b08 	.word	0x20004b08

08000f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fcc:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fda:	f7ff ffd7 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f004 ffbb 	bl	8005f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fac9 	bl	8000578 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ff4:	08006f8c 	.word	0x08006f8c
  ldr r2, =_sbss
 8000ff8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ffc:	20004b08 	.word	0x20004b08

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f8fc 	bl	800122a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fe8e 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fdd0 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000024 	.word	0x20000024
 800106c:	20004ab4 	.word	0x20004ab4

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20004ab4 	.word	0x20004ab4

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000024 	.word	0x20000024

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff4c 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001252:	f7ff ff61 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff ffb1 	bl	80011c4 <NVIC_EncodePriority>
 8001262:	4602      	mov	r2, r0
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff80 	bl	8001170 <__NVIC_SetPriority>
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff54 	bl	8001134 <__NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00c      	b.n	80012cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e159      	b.n	80015a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8148 	bne.w	80015a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a2 	beq.w	80015a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_GPIO_Init+0x2ec>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a49      	ldr	r2, [pc, #292]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x202>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a48      	ldr	r2, [pc, #288]	; (80015cc <HAL_GPIO_Init+0x2f4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x1fe>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a47      	ldr	r2, [pc, #284]	; (80015d0 <HAL_GPIO_Init+0x2f8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <HAL_GPIO_Init+0x2fc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x1f6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <HAL_GPIO_Init+0x300>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x1f2>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ec:	4935      	ldr	r1, [pc, #212]	; (80015c4 <HAL_GPIO_Init+0x2ec>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x304>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151e:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x304>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_GPIO_Init+0x304>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001548:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_GPIO_Init+0x304>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_GPIO_Init+0x304>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001572:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x304>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_GPIO_Init+0x304>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_GPIO_Init+0x304>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f aea2 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40013800 	.word	0x40013800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	041a      	lsls	r2, r3, #16
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43d9      	mvns	r1, r3
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	400b      	ands	r3, r1
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e264      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001696:	4ba3      	ldr	r3, [pc, #652]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d00c      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4ba0      	ldr	r3, [pc, #640]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b99      	ldr	r3, [pc, #612]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e23f      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b91      	ldr	r3, [pc, #580]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x98>
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a8a      	ldr	r2, [pc, #552]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a87      	ldr	r2, [pc, #540]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 8001710:	4b84      	ldr	r3, [pc, #528]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a83      	ldr	r2, [pc, #524]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a80      	ldr	r2, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fc9e 	bl	8001070 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fc9a 	bl	8001070 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e204      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xc0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fc8a 	bl	8001070 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fc86 	bl	8001070 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1f0      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0xe8>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d063      	beq.n	8001856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d11c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d116      	bne.n	80017e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x152>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e1c4      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4952      	ldr	r1, [pc, #328]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	e03a      	b.n	8001856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <HAL_RCC_OscConfig+0x2b0>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fc3f 	bl	8001070 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fc3b 	bl	8001070 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1a5      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4940      	ldr	r1, [pc, #256]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
 8001828:	e015      	b.n	8001856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_OscConfig+0x2b0>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fc1e 	bl	8001070 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fc1a 	bl	8001070 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e184      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d030      	beq.n	80018c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_RCC_OscConfig+0x2b4>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fbfe 	bl	8001070 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fbfa 	bl	8001070 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e164      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x200>
 8001896:	e015      	b.n	80018c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x2b4>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff fbe7 	bl	8001070 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fbe3 	bl	8001070 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e14d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a0 	beq.w	8001a12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x2b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d121      	bne.n	8001952 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_RCC_OscConfig+0x2b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_RCC_OscConfig+0x2b8>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fba9 	bl	8001070 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e011      	b.n	8001946 <HAL_RCC_OscConfig+0x2ce>
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	42470000 	.word	0x42470000
 800192c:	42470e80 	.word	0x42470e80
 8001930:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff fb9c 	bl	8001070 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e106      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b85      	ldr	r3, [pc, #532]	; (8001b5c <HAL_RCC_OscConfig+0x4e4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d106      	bne.n	8001968 <HAL_RCC_OscConfig+0x2f0>
 800195a:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a80      	ldr	r2, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	e01c      	b.n	80019a2 <HAL_RCC_OscConfig+0x32a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x312>
 8001970:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a7a      	ldr	r2, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b78      	ldr	r3, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a77      	ldr	r2, [pc, #476]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x32a>
 800198a:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a74      	ldr	r2, [pc, #464]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a71      	ldr	r2, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb61 	bl	8001070 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb5d 	bl	8001070 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0c5      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x33a>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb4b 	bl	8001070 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fb47 	bl	8001070 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0af      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 809b 	beq.w	8001b52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d05c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d141      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x4ec>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fb1b 	bl	8001070 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff fb17 	bl	8001070 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e081      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	019b      	lsls	r3, r3, #6
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	061b      	lsls	r3, r3, #24
 8001a80:	4937      	ldr	r1, [pc, #220]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_OscConfig+0x4ec>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff faf0 	bl	8001070 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff faec 	bl	8001070 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e056      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x41c>
 8001ab2:	e04e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_OscConfig+0x4ec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fad9 	bl	8001070 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff fad5 	bl	8001070 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e03f      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x44a>
 8001ae0:	e037      	b.n	8001b52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e032      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_RCC_OscConfig+0x4e8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d028      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d121      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d11a      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d111      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	42470060 	.word	0x42470060

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0cc      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d90c      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	494d      	ldr	r1, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d044      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d119      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e067      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4934      	ldr	r1, [pc, #208]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c58:	f7ff fa0a 	bl	8001070 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff fa06 	bl	8001070 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e04f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d20c      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cee:	f000 f821 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f820 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08006ecc 	.word	0x08006ecc
 8001d2c:	2000001c 	.word	0x2000001c
 8001d30:	20000020 	.word	0x20000020

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d4c:	4b67      	ldr	r3, [pc, #412]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d00d      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x40>
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	f200 80bd 	bhi.w	8001ed8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x34>
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d66:	e0b7      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d6a:	60bb      	str	r3, [r7, #8]
       break;
 8001d6c:	e0b7      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6e:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d70:	60bb      	str	r3, [r7, #8]
      break;
 8001d72:	e0b4      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d74:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04d      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b58      	ldr	r3, [pc, #352]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	461a      	mov	r2, r3
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	ea02 0800 	and.w	r8, r2, r0
 8001da2:	ea03 0901 	and.w	r9, r3, r1
 8001da6:	4640      	mov	r0, r8
 8001da8:	4649      	mov	r1, r9
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	014b      	lsls	r3, r1, #5
 8001db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db8:	0142      	lsls	r2, r0, #5
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	ebb0 0008 	subs.w	r0, r0, r8
 8001dc2:	eb61 0109 	sbc.w	r1, r1, r9
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	018b      	lsls	r3, r1, #6
 8001dd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dd4:	0182      	lsls	r2, r0, #6
 8001dd6:	1a12      	subs	r2, r2, r0
 8001dd8:	eb63 0301 	sbc.w	r3, r3, r1
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	00d9      	lsls	r1, r3, #3
 8001de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dea:	00d0      	lsls	r0, r2, #3
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	eb12 0208 	adds.w	r2, r2, r8
 8001df4:	eb43 0309 	adc.w	r3, r3, r9
 8001df8:	f04f 0000 	mov.w	r0, #0
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	0259      	lsls	r1, r3, #9
 8001e02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e06:	0250      	lsls	r0, r2, #9
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	f7fe fa32 	bl	8000280 <__aeabi_uldivmod>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4613      	mov	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e04a      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	ea02 0400 	and.w	r4, r2, r0
 8001e3e:	ea03 0501 	and.w	r5, r3, r1
 8001e42:	4620      	mov	r0, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	014b      	lsls	r3, r1, #5
 8001e50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e54:	0142      	lsls	r2, r0, #5
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	1b00      	subs	r0, r0, r4
 8001e5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	018b      	lsls	r3, r1, #6
 8001e6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e6e:	0182      	lsls	r2, r0, #6
 8001e70:	1a12      	subs	r2, r2, r0
 8001e72:	eb63 0301 	sbc.w	r3, r3, r1
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	00d9      	lsls	r1, r3, #3
 8001e80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e84:	00d0      	lsls	r0, r2, #3
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	1912      	adds	r2, r2, r4
 8001e8c:	eb45 0303 	adc.w	r3, r5, r3
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	0299      	lsls	r1, r3, #10
 8001e9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e9e:	0290      	lsls	r0, r2, #10
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f7fe f9e6 	bl	8000280 <__aeabi_uldivmod>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4613      	mov	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	60bb      	str	r3, [r7, #8]
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001eda:	60bb      	str	r3, [r7, #8]
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	68bb      	ldr	r3, [r7, #8]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	2000001c 	.word	0x2000001c

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f14:	f7ff fff0 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0a9b      	lsrs	r3, r3, #10
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08006edc 	.word	0x08006edc

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f3c:	f7ff ffdc 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0b5b      	lsrs	r3, r3, #13
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08006edc 	.word	0x08006edc

08001f60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_RCC_GetClockConfig+0x60>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0207 	and.w	r2, r3, #7
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	601a      	str	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07b      	b.n	80020ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d108      	bne.n	8001ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fe6:	d009      	beq.n	8001ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
 8001fee:	e005      	b.n	8001ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fe0c 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002080:	ea42 0103 	orr.w	r1, r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0104 	and.w	r1, r3, #4
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f003 0210 	and.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b088      	sub	sp, #32
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_SPI_Transmit+0x22>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e126      	b.n	8002346 <HAL_SPI_Transmit+0x270>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002100:	f7fe ffb6 	bl	8001070 <HAL_GetTick>
 8002104:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002116:	2302      	movs	r3, #2
 8002118:	77fb      	strb	r3, [r7, #31]
    goto error;
 800211a:	e10b      	b.n	8002334 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_SPI_Transmit+0x52>
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800212c:	e102      	b.n	8002334 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	88fa      	ldrh	r2, [r7, #6]
 8002146:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002174:	d10f      	bne.n	8002196 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002184:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002194:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	d007      	beq.n	80021b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021bc:	d14b      	bne.n	8002256 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_SPI_Transmit+0xf6>
 80021c6:	8afb      	ldrh	r3, [r7, #22]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d13e      	bne.n	800224a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	1c9a      	adds	r2, r3, #2
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021f0:	e02b      	b.n	800224a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d112      	bne.n	8002226 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	1c9a      	adds	r2, r3, #2
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	86da      	strh	r2, [r3, #54]	; 0x36
 8002224:	e011      	b.n	800224a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002226:	f7fe ff23 	bl	8001070 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d803      	bhi.n	800223e <HAL_SPI_Transmit+0x168>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d102      	bne.n	8002244 <HAL_SPI_Transmit+0x16e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002248:	e074      	b.n	8002334 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ce      	bne.n	80021f2 <HAL_SPI_Transmit+0x11c>
 8002254:	e04c      	b.n	80022f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_SPI_Transmit+0x18e>
 800225e:	8afb      	ldrh	r3, [r7, #22]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d140      	bne.n	80022e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	330c      	adds	r3, #12
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800228a:	e02c      	b.n	80022e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d113      	bne.n	80022c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	86da      	strh	r2, [r3, #54]	; 0x36
 80022c0:	e011      	b.n	80022e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022c2:	f7fe fed5 	bl	8001070 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d803      	bhi.n	80022da <HAL_SPI_Transmit+0x204>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d102      	bne.n	80022e0 <HAL_SPI_Transmit+0x20a>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022e4:	e026      	b.n	8002334 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1cd      	bne.n	800228c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fce9 	bl	8002ccc <SPI_EndRxTxTransaction>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	e000      	b.n	8002334 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002332:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002344:	7ffb      	ldrb	r3, [r7, #31]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b088      	sub	sp, #32
 8002352:	af02      	add	r7, sp, #8
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236a:	d112      	bne.n	8002392 <HAL_SPI_Receive+0x44>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10e      	bne.n	8002392 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2204      	movs	r2, #4
 8002378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f8f1 	bl	8002570 <HAL_SPI_TransmitReceive>
 800238e:	4603      	mov	r3, r0
 8002390:	e0ea      	b.n	8002568 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_SPI_Receive+0x52>
 800239c:	2302      	movs	r3, #2
 800239e:	e0e3      	b.n	8002568 <HAL_SPI_Receive+0x21a>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a8:	f7fe fe62 	bl	8001070 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d002      	beq.n	80023c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023be:	e0ca      	b.n	8002556 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_SPI_Receive+0x7e>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023d0:	e0c1      	b.n	8002556 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2204      	movs	r2, #4
 80023d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002418:	d10f      	bne.n	800243a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d007      	beq.n	8002458 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d162      	bne.n	8002526 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002460:	e02e      	b.n	80024c0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d115      	bne.n	800249c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f103 020c 	add.w	r2, r3, #12
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800249a:	e011      	b.n	80024c0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249c:	f7fe fde8 	bl	8001070 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d803      	bhi.n	80024b4 <HAL_SPI_Receive+0x166>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_Receive+0x16c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024be:	e04a      	b.n	8002556 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1cb      	bne.n	8002462 <HAL_SPI_Receive+0x114>
 80024ca:	e031      	b.n	8002530 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d113      	bne.n	8002502 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	b292      	uxth	r2, r2
 80024e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	1c9a      	adds	r2, r3, #2
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002500:	e011      	b.n	8002526 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002502:	f7fe fdb5 	bl	8001070 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d803      	bhi.n	800251a <HAL_SPI_Receive+0x1cc>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d102      	bne.n	8002520 <HAL_SPI_Receive+0x1d2>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002524:	e017      	b.n	8002556 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1cd      	bne.n	80024cc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fb63 	bl	8002c00 <SPI_EndRxTransaction>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
 8002552:	e000      	b.n	8002556 <HAL_SPI_Receive+0x208>
  }

error :
 8002554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	; 0x30
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800257e:	2301      	movs	r3, #1
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x26>
 8002592:	2302      	movs	r3, #2
 8002594:	e18a      	b.n	80028ac <HAL_SPI_TransmitReceive+0x33c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800259e:	f7fe fd67 	bl	8001070 <HAL_GetTick>
 80025a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d00f      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x70>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c6:	d107      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x68>
 80025d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d003      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
 80025da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025de:	e15b      	b.n	8002898 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_SPI_TransmitReceive+0x82>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_SPI_TransmitReceive+0x82>
 80025ec:	887b      	ldrh	r3, [r7, #2]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025f8:	e14e      	b.n	8002898 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b04      	cmp	r3, #4
 8002604:	d003      	beq.n	800260e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2205      	movs	r2, #5
 800260a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	887a      	ldrh	r2, [r7, #2]
 8002636:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d007      	beq.n	8002662 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800266a:	d178      	bne.n	800275e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_TransmitReceive+0x10a>
 8002674:	8b7b      	ldrh	r3, [r7, #26]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d166      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	1c9a      	adds	r2, r3, #2
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800269e:	e053      	b.n	8002748 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d11b      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x176>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d016      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x176>
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d113      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	881a      	ldrh	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d119      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x1b8>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d014      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	b292      	uxth	r2, r2
 800270a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	1c9a      	adds	r2, r3, #2
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002724:	2301      	movs	r3, #1
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002728:	f7fe fca2 	bl	8001070 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002734:	429a      	cmp	r2, r3
 8002736:	d807      	bhi.n	8002748 <HAL_SPI_TransmitReceive+0x1d8>
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d003      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002746:	e0a7      	b.n	8002898 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1a6      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x130>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1a1      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x130>
 800275c:	e07c      	b.n	8002858 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_SPI_TransmitReceive+0x1fc>
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d16b      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002792:	e057      	b.n	8002844 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d11c      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x26c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d017      	beq.n	80027dc <HAL_SPI_TransmitReceive+0x26c>
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d114      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d119      	bne.n	800281e <HAL_SPI_TransmitReceive+0x2ae>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d014      	beq.n	800281e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800281a:	2301      	movs	r3, #1
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800281e:	f7fe fc27 	bl	8001070 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800282a:	429a      	cmp	r2, r3
 800282c:	d803      	bhi.n	8002836 <HAL_SPI_TransmitReceive+0x2c6>
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d102      	bne.n	800283c <HAL_SPI_TransmitReceive+0x2cc>
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002842:	e029      	b.n	8002898 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1a2      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x224>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d19d      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fa35 	bl	8002ccc <SPI_EndRxTxTransaction>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002874:	e010      	b.n	8002898 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	e000      	b.n	8002898 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10f      	bne.n	80028f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
    return;
 80028f6:	e0d7      	b.n	8002aa8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_SPI_IRQHandler+0x66>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	09db      	lsrs	r3, r3, #7
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
    return;
 8002918:	e0c6      	b.n	8002aa8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_SPI_IRQHandler+0x8c>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80b4 	beq.w	8002aa8 <HAL_SPI_IRQHandler+0x1f4>
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ad 	beq.w	8002aa8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b03      	cmp	r3, #3
 8002964:	d011      	beq.n	800298a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	e00b      	b.n	80029a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
        return;
 80029a0:	e082      	b.n	8002aa8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d014      	beq.n	80029d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0208 	orr.w	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04f      	beq.n	8002aa6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <HAL_SPI_IRQHandler+0x17e>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d034      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0203 	bic.w	r2, r2, #3
 8002a40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d011      	beq.n	8002a6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_SPI_IRQHandler+0x1fc>)
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fc1c 	bl	8001294 <HAL_DMA_Abort_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_SPI_IRQHandler+0x1fc>)
 8002a7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fc06 	bl	8001294 <HAL_DMA_Abort_IT>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002a9a:	e003      	b.n	8002aa4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f809 	bl	8002ab4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002aa2:	e000      	b.n	8002aa6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002aa4:	bf00      	nop
    return;
 8002aa6:	bf00      	nop
  }
}
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	08002ac9 	.word	0x08002ac9

08002ab4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ffe6 	bl	8002ab4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b00:	f7fe fab6 	bl	8001070 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b10:	f7fe faae 	bl	8001070 <HAL_GetTick>
 8002b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	015b      	lsls	r3, r3, #5
 8002b1c:	0d1b      	lsrs	r3, r3, #20
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b26:	e054      	b.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d050      	beq.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b30:	f7fe fa9e 	bl	8001070 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d902      	bls.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d13d      	bne.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5e:	d111      	bne.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b68:	d004      	beq.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b72:	d107      	bne.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d10f      	bne.n	8002bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e017      	b.n	8002bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d19b      	bne.n	8002b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000001c 	.word	0x2000001c

08002c00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c14:	d111      	bne.n	8002c3a <SPI_EndRxTransaction+0x3a>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1e:	d004      	beq.n	8002c2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c28:	d107      	bne.n	8002c3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c42:	d12a      	bne.n	8002c9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d012      	beq.n	8002c74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff ff49 	bl	8002af0 <SPI_WaitFlagStateUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02d      	beq.n	8002cc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e026      	b.n	8002cc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff36 	bl	8002af0 <SPI_WaitFlagStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01a      	beq.n	8002cc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e013      	b.n	8002cc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff ff23 	bl	8002af0 <SPI_WaitFlagStateUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e000      	b.n	8002cc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <SPI_EndRxTxTransaction+0x7c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <SPI_EndRxTxTransaction+0x80>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0d5b      	lsrs	r3, r3, #21
 8002ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf6:	d112      	bne.n	8002d1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fef4 	bl	8002af0 <SPI_WaitFlagStateUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d0f2      	beq.n	8002d1e <SPI_EndRxTxTransaction+0x52>
 8002d38:	e000      	b.n	8002d3c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d3a:	bf00      	nop
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2000001c 	.word	0x2000001c
 8002d4c:	165e9f81 	.word	0x165e9f81

08002d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e041      	b.n	8002de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f839 	bl	8002dee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 f9ca 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e044      	b.n	8002ea6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d018      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x6c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d013      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x6c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00e      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x6c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_TIM_Base_Start_IT+0xb8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x6c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x6c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d111      	bne.n	8002e94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d010      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	e007      	b.n	8002ea4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40014000 	.word	0x40014000

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8ee 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8e0 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8f1 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8c4 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8b6 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8c7 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f89a 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f88c 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f89d 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f870 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f862 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f873 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fdb0 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8e2 	bl	800323c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f838 	bl	8003114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0220 	mvn.w	r2, #32
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8ac 	bl	8003228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a34      	ldr	r2, [pc, #208]	; (800320c <TIM_Base_SetConfig+0xe4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00f      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d00b      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a31      	ldr	r2, [pc, #196]	; (8003210 <TIM_Base_SetConfig+0xe8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a30      	ldr	r2, [pc, #192]	; (8003214 <TIM_Base_SetConfig+0xec>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <TIM_Base_SetConfig+0xf0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <TIM_Base_SetConfig+0xe4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01b      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d017      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <TIM_Base_SetConfig+0xe8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a21      	ldr	r2, [pc, #132]	; (8003214 <TIM_Base_SetConfig+0xec>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00f      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a20      	ldr	r2, [pc, #128]	; (8003218 <TIM_Base_SetConfig+0xf0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00b      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <TIM_Base_SetConfig+0xf4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <TIM_Base_SetConfig+0xf8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <TIM_Base_SetConfig+0xfc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <TIM_Base_SetConfig+0xe4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d103      	bne.n	80031f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	615a      	str	r2, [r3, #20]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40010000 	.word	0x40010000
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800
 8003218:	40000c00 	.word	0x40000c00
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800

08003228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e03f      	b.n	80032e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fd24 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	; 0x24
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f829 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f0:	b09f      	sub	sp, #124	; 0x7c
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	ea40 0301 	orr.w	r3, r0, r1
 800330c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	431a      	orrs	r2, r3
 8003318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	431a      	orrs	r2, r3
 800331e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4313      	orrs	r3, r2
 8003324:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003330:	f021 010c 	bic.w	r1, r1, #12
 8003334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333a:	430b      	orrs	r3, r1
 800333c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800333e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334a:	6999      	ldr	r1, [r3, #24]
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	ea40 0301 	orr.w	r3, r0, r1
 8003354:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4bc5      	ldr	r3, [pc, #788]	; (8003670 <UART_SetConfig+0x384>)
 800335c:	429a      	cmp	r2, r3
 800335e:	d004      	beq.n	800336a <UART_SetConfig+0x7e>
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4bc3      	ldr	r3, [pc, #780]	; (8003674 <UART_SetConfig+0x388>)
 8003366:	429a      	cmp	r2, r3
 8003368:	d103      	bne.n	8003372 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800336a:	f7fe fde5 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 800336e:	6778      	str	r0, [r7, #116]	; 0x74
 8003370:	e002      	b.n	8003378 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003372:	f7fe fdcd 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8003376:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	f040 80b6 	bne.w	80034f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	461c      	mov	r4, r3
 8003388:	f04f 0500 	mov.w	r5, #0
 800338c:	4622      	mov	r2, r4
 800338e:	462b      	mov	r3, r5
 8003390:	1891      	adds	r1, r2, r2
 8003392:	6439      	str	r1, [r7, #64]	; 0x40
 8003394:	415b      	adcs	r3, r3
 8003396:	647b      	str	r3, [r7, #68]	; 0x44
 8003398:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800339c:	1912      	adds	r2, r2, r4
 800339e:	eb45 0303 	adc.w	r3, r5, r3
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	00d9      	lsls	r1, r3, #3
 80033ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b0:	00d0      	lsls	r0, r2, #3
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	1911      	adds	r1, r2, r4
 80033b8:	6639      	str	r1, [r7, #96]	; 0x60
 80033ba:	416b      	adcs	r3, r5
 80033bc:	667b      	str	r3, [r7, #100]	; 0x64
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	1891      	adds	r1, r2, r2
 80033ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80033cc:	415b      	adcs	r3, r3
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80033d8:	f7fc ff52 	bl	8000280 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4ba5      	ldr	r3, [pc, #660]	; (8003678 <UART_SetConfig+0x38c>)
 80033e2:	fba3 2302 	umull	r2, r3, r3, r2
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	011e      	lsls	r6, r3, #4
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	461c      	mov	r4, r3
 80033ee:	f04f 0500 	mov.w	r5, #0
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	1891      	adds	r1, r2, r2
 80033f8:	6339      	str	r1, [r7, #48]	; 0x30
 80033fa:	415b      	adcs	r3, r3
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
 80033fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003402:	1912      	adds	r2, r2, r4
 8003404:	eb45 0303 	adc.w	r3, r5, r3
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	00d9      	lsls	r1, r3, #3
 8003412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003416:	00d0      	lsls	r0, r2, #3
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	1911      	adds	r1, r2, r4
 800341e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003420:	416b      	adcs	r3, r5
 8003422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	461a      	mov	r2, r3
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	1891      	adds	r1, r2, r2
 8003430:	62b9      	str	r1, [r7, #40]	; 0x28
 8003432:	415b      	adcs	r3, r3
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800343a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800343e:	f7fc ff1f 	bl	8000280 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <UART_SetConfig+0x38c>)
 8003448:	fba3 1302 	umull	r1, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	2164      	movs	r1, #100	; 0x64
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	3332      	adds	r3, #50	; 0x32
 800345a:	4a87      	ldr	r2, [pc, #540]	; (8003678 <UART_SetConfig+0x38c>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003468:	441e      	add	r6, r3
 800346a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346c:	4618      	mov	r0, r3
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	1894      	adds	r4, r2, r2
 8003478:	623c      	str	r4, [r7, #32]
 800347a:	415b      	adcs	r3, r3
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003482:	1812      	adds	r2, r2, r0
 8003484:	eb41 0303 	adc.w	r3, r1, r3
 8003488:	f04f 0400 	mov.w	r4, #0
 800348c:	f04f 0500 	mov.w	r5, #0
 8003490:	00dd      	lsls	r5, r3, #3
 8003492:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003496:	00d4      	lsls	r4, r2, #3
 8003498:	4622      	mov	r2, r4
 800349a:	462b      	mov	r3, r5
 800349c:	1814      	adds	r4, r2, r0
 800349e:	653c      	str	r4, [r7, #80]	; 0x50
 80034a0:	414b      	adcs	r3, r1
 80034a2:	657b      	str	r3, [r7, #84]	; 0x54
 80034a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	1891      	adds	r1, r2, r2
 80034b0:	61b9      	str	r1, [r7, #24]
 80034b2:	415b      	adcs	r3, r3
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80034be:	f7fc fedf 	bl	8000280 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <UART_SetConfig+0x38c>)
 80034c8:	fba3 1302 	umull	r1, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	2164      	movs	r1, #100	; 0x64
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	3332      	adds	r3, #50	; 0x32
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <UART_SetConfig+0x38c>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	f003 0207 	and.w	r2, r3, #7
 80034e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4432      	add	r2, r6
 80034ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034ee:	e0b9      	b.n	8003664 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f2:	461c      	mov	r4, r3
 80034f4:	f04f 0500 	mov.w	r5, #0
 80034f8:	4622      	mov	r2, r4
 80034fa:	462b      	mov	r3, r5
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	6139      	str	r1, [r7, #16]
 8003500:	415b      	adcs	r3, r3
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003508:	1912      	adds	r2, r2, r4
 800350a:	eb45 0303 	adc.w	r3, r5, r3
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	00d9      	lsls	r1, r3, #3
 8003518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800351c:	00d0      	lsls	r0, r2, #3
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	eb12 0804 	adds.w	r8, r2, r4
 8003526:	eb43 0905 	adc.w	r9, r3, r5
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	008b      	lsls	r3, r1, #2
 800353e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003542:	0082      	lsls	r2, r0, #2
 8003544:	4640      	mov	r0, r8
 8003546:	4649      	mov	r1, r9
 8003548:	f7fc fe9a 	bl	8000280 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <UART_SetConfig+0x38c>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	011e      	lsls	r6, r3, #4
 800355a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355c:	4618      	mov	r0, r3
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	1894      	adds	r4, r2, r2
 8003568:	60bc      	str	r4, [r7, #8]
 800356a:	415b      	adcs	r3, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003572:	1812      	adds	r2, r2, r0
 8003574:	eb41 0303 	adc.w	r3, r1, r3
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	f04f 0500 	mov.w	r5, #0
 8003580:	00dd      	lsls	r5, r3, #3
 8003582:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003586:	00d4      	lsls	r4, r2, #3
 8003588:	4622      	mov	r2, r4
 800358a:	462b      	mov	r3, r5
 800358c:	1814      	adds	r4, r2, r0
 800358e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003590:	414b      	adcs	r3, r1
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	008b      	lsls	r3, r1, #2
 80035a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035ac:	0082      	lsls	r2, r0, #2
 80035ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035b2:	f7fc fe65 	bl	8000280 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <UART_SetConfig+0x38c>)
 80035bc:	fba3 1302 	umull	r1, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	2164      	movs	r1, #100	; 0x64
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	3332      	adds	r3, #50	; 0x32
 80035ce:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <UART_SetConfig+0x38c>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035da:	441e      	add	r6, r3
 80035dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035de:	4618      	mov	r0, r3
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	1894      	adds	r4, r2, r2
 80035ea:	603c      	str	r4, [r7, #0]
 80035ec:	415b      	adcs	r3, r3
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035f4:	1812      	adds	r2, r2, r0
 80035f6:	eb41 0303 	adc.w	r3, r1, r3
 80035fa:	f04f 0400 	mov.w	r4, #0
 80035fe:	f04f 0500 	mov.w	r5, #0
 8003602:	00dd      	lsls	r5, r3, #3
 8003604:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003608:	00d4      	lsls	r4, r2, #3
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	eb12 0a00 	adds.w	sl, r2, r0
 8003612:	eb43 0b01 	adc.w	fp, r3, r1
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4618      	mov	r0, r3
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	008b      	lsls	r3, r1, #2
 800362a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800362e:	0082      	lsls	r2, r0, #2
 8003630:	4650      	mov	r0, sl
 8003632:	4659      	mov	r1, fp
 8003634:	f7fc fe24 	bl	8000280 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <UART_SetConfig+0x38c>)
 800363e:	fba3 1302 	umull	r1, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2164      	movs	r1, #100	; 0x64
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	3332      	adds	r3, #50	; 0x32
 8003650:	4a09      	ldr	r2, [pc, #36]	; (8003678 <UART_SetConfig+0x38c>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4432      	add	r2, r6
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	bf00      	nop
 8003666:	377c      	adds	r7, #124	; 0x7c
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	40011000 	.word	0x40011000
 8003674:	40011400 	.word	0x40011400
 8003678:	51eb851f 	.word	0x51eb851f

0800367c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SysTick_Handler+0x1c>)
 8003682:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003684:	f001 fbfc 	bl	8004e80 <xTaskGetSchedulerState>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800368e:	f002 f9e3 	bl	8005a58 <xPortSysTickHandler>
  }
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000e010 	.word	0xe000e010

0800369c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80036ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <vApplicationGetIdleTaskMemory+0x30>)
 80036b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	200000b4 	.word	0x200000b4
 80036cc:	20000110 	.word	0x20000110

080036d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4a07      	ldr	r2, [pc, #28]	; (80036fc <vApplicationGetTimerTaskMemory+0x2c>)
 80036e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4a06      	ldr	r2, [pc, #24]	; (8003700 <vApplicationGetTimerTaskMemory+0x30>)
 80036e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	20000310 	.word	0x20000310
 8003700:	2000036c 	.word	0x2000036c

08003704 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 0208 	add.w	r2, r3, #8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f103 0208 	add.w	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f103 0208 	add.w	r2, r3, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d103      	bne.n	80037c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e00c      	b.n	80037e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3308      	adds	r3, #8
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e002      	b.n	80037d4 <vListInsert+0x2e>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d2f6      	bcs.n	80037ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d103      	bne.n	800384c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003896:	f002 f84d 	bl	8005934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	441a      	add	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	3b01      	subs	r3, #1
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22ff      	movs	r2, #255	; 0xff
 80038da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d114      	bne.n	8003916 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3310      	adds	r3, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f903 	bl	8004b04 <xTaskRemoveFromEventList>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <xQueueGenericReset+0xcc>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	e009      	b.n	800392a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3310      	adds	r3, #16
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fef2 	bl	8003704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3324      	adds	r3, #36	; 0x24
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff feed 	bl	8003704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800392a:	f002 f833 	bl	8005994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	; 0x38
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <xQueueGenericCreateStatic+0x52>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <xQueueGenericCreateStatic+0x56>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueGenericCreateStatic+0x58>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	623b      	str	r3, [r7, #32]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xQueueGenericCreateStatic+0x7e>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueGenericCreateStatic+0x82>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueGenericCreateStatic+0x84>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039da:	2350      	movs	r3, #80	; 0x50
 80039dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d00a      	beq.n	80039fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61bb      	str	r3, [r7, #24]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f805 	bl	8003a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3730      	adds	r7, #48	; 0x30
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e002      	b.n	8003a4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	69b8      	ldr	r0, [r7, #24]
 8003a5e:	f7ff ff05 	bl	800386c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08e      	sub	sp, #56	; 0x38
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a82:	2300      	movs	r3, #0
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericSend+0x32>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <xQueueGenericSend+0x40>
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <xQueueGenericSend+0x44>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <xQueueGenericSend+0x46>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <xQueueGenericSend+0x60>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0x6e>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <xQueueGenericSend+0x72>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueGenericSend+0x74>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSend+0x8e>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	623b      	str	r3, [r7, #32]
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b02:	f001 f9bd 	bl	8004e80 <xTaskGetSchedulerState>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <xQueueGenericSend+0x9e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xQueueGenericSend+0xa2>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <xQueueGenericSend+0xa4>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xQueueGenericSend+0xbe>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61fb      	str	r3, [r7, #28]
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b32:	f001 feff 	bl	8005934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <xQueueGenericSend+0xd4>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d129      	bne.n	8003b9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4e:	f000 fa0b 	bl	8003f68 <prvCopyDataToQueue>
 8003b52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d010      	beq.n	8003b7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	3324      	adds	r3, #36	; 0x24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 ffcf 	bl	8004b04 <xTaskRemoveFromEventList>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <xQueueGenericSend+0x1f8>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	e00a      	b.n	8003b94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <xQueueGenericSend+0x1f8>)
 8003b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b94:	f001 fefe 	bl	8005994 <vPortExitCritical>
				return pdPASS;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e063      	b.n	8003c64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ba2:	f001 fef7 	bl	8005994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e05c      	b.n	8003c64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f809 	bl	8004bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bbe:	f001 fee9 	bl	8005994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bc2:	f000 fd7b 	bl	80046bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc6:	f001 feb5 	bl	8005934 <vPortEnterCritical>
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d103      	bne.n	8003be0 <xQueueGenericSend+0x16c>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d103      	bne.n	8003bf6 <xQueueGenericSend+0x182>
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf6:	f001 fecd 	bl	8005994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bfa:	1d3a      	adds	r2, r7, #4
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fff8 	bl	8004bf8 <xTaskCheckForTimeOut>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d124      	bne.n	8003c58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c10:	f000 faa2 	bl	8004158 <prvIsQueueFull>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	3310      	adds	r3, #16
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 ff1e 	bl	8004a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2a:	f000 fa2d 	bl	8004088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c2e:	f000 fd53 	bl	80046d8 <xTaskResumeAll>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f47f af7c 	bne.w	8003b32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <xQueueGenericSend+0x1f8>)
 8003c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	e772      	b.n	8003b32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4e:	f000 fa1b 	bl	8004088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c52:	f000 fd41 	bl	80046d8 <xTaskResumeAll>
 8003c56:	e76c      	b.n	8003b32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 fa15 	bl	8004088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c5e:	f000 fd3b 	bl	80046d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3738      	adds	r7, #56	; 0x38
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b090      	sub	sp, #64	; 0x40
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <xQueueGenericSendFromISR+0x3c>
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <xQueueGenericSendFromISR+0x40>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <xQueueGenericSendFromISR+0x42>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSendFromISR+0x6a>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <xQueueGenericSendFromISR+0x6e>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericSendFromISR+0x70>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cfa:	f001 fefd 	bl	8005af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fa      	str	r2, [r7, #28]
 8003d14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <xQueueGenericSendFromISR+0xbc>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d12f      	bne.n	8003d8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d42:	f000 f911 	bl	8003f68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d112      	bne.n	8003d76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fed1 	bl	8004b04 <xTaskRemoveFromEventList>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e007      	b.n	8003d86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	b25a      	sxtb	r2, r3
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d86:	2301      	movs	r3, #1
 8003d88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d8a:	e001      	b.n	8003d90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3740      	adds	r7, #64	; 0x40
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	; 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <xQueueReceive+0x30>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	623b      	str	r3, [r7, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <xQueueReceive+0x3e>
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <xQueueReceive+0x42>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <xQueueReceive+0x44>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xQueueReceive+0x5e>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	61fb      	str	r3, [r7, #28]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e06:	f001 f83b 	bl	8004e80 <xTaskGetSchedulerState>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <xQueueReceive+0x6e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <xQueueReceive+0x72>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <xQueueReceive+0x74>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <xQueueReceive+0x8e>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	61bb      	str	r3, [r7, #24]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e36:	f001 fd7d 	bl	8005934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01f      	beq.n	8003e86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4a:	f000 f8f7 	bl	800403c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	1e5a      	subs	r2, r3, #1
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00f      	beq.n	8003e7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	3310      	adds	r3, #16
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fe4e 	bl	8004b04 <xTaskRemoveFromEventList>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <xQueueReceive+0x1bc>)
 8003e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e7e:	f001 fd89 	bl	8005994 <vPortExitCritical>
				return pdPASS;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e069      	b.n	8003f5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e8c:	f001 fd82 	bl	8005994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e062      	b.n	8003f5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e9a:	f107 0310 	add.w	r3, r7, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fe94 	bl	8004bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea8:	f001 fd74 	bl	8005994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eac:	f000 fc06 	bl	80046bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb0:	f001 fd40 	bl	8005934 <vPortEnterCritical>
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d103      	bne.n	8003eca <xQueueReceive+0x122>
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d103      	bne.n	8003ee0 <xQueueReceive+0x138>
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee0:	f001 fd58 	bl	8005994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee4:	1d3a      	adds	r2, r7, #4
 8003ee6:	f107 0310 	add.w	r3, r7, #16
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fe83 	bl	8004bf8 <xTaskCheckForTimeOut>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d123      	bne.n	8003f40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efa:	f000 f917 	bl	800412c <prvIsQueueEmpty>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	3324      	adds	r3, #36	; 0x24
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fda9 	bl	8004a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f14:	f000 f8b8 	bl	8004088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f18:	f000 fbde 	bl	80046d8 <xTaskResumeAll>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d189      	bne.n	8003e36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <xQueueReceive+0x1bc>)
 8003f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	e780      	b.n	8003e36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f8a7 	bl	8004088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3a:	f000 fbcd 	bl	80046d8 <xTaskResumeAll>
 8003f3e:	e77a      	b.n	8003e36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f42:	f000 f8a1 	bl	8004088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f46:	f000 fbc7 	bl	80046d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4c:	f000 f8ee 	bl	800412c <prvIsQueueEmpty>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f43f af6f 	beq.w	8003e36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3730      	adds	r7, #48	; 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d14d      	bne.n	800402a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff92 	bl	8004ebc <xTaskPriorityDisinherit>
 8003f98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e043      	b.n	800402a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d119      	bne.n	8003fdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6858      	ldr	r0, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	f001 fff4 	bl	8005fa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	441a      	add	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d32b      	bcc.n	800402a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e026      	b.n	800402a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68d8      	ldr	r0, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	f001 ffda 	bl	8005fa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	441a      	add	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	425b      	negs	r3, r3
 8004012:	441a      	add	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d105      	bne.n	800402a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3b01      	subs	r3, #1
 8004028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004032:	697b      	ldr	r3, [r7, #20]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d018      	beq.n	8004080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	441a      	add	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d303      	bcc.n	8004070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68d9      	ldr	r1, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	461a      	mov	r2, r3
 800407a:	6838      	ldr	r0, [r7, #0]
 800407c:	f001 ff90 	bl	8005fa0 <memcpy>
	}
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004090:	f001 fc50 	bl	8005934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800409a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800409c:	e011      	b.n	80040c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3324      	adds	r3, #36	; 0x24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd2a 	bl	8004b04 <xTaskRemoveFromEventList>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040b6:	f000 fe01 	bl	8004cbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	3b01      	subs	r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dce9      	bgt.n	800409e <prvUnlockQueue+0x16>
 80040ca:	e000      	b.n	80040ce <prvUnlockQueue+0x46>
					break;
 80040cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040d6:	f001 fc5d 	bl	8005994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040da:	f001 fc2b 	bl	8005934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040e6:	e011      	b.n	800410c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3310      	adds	r3, #16
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd05 	bl	8004b04 <xTaskRemoveFromEventList>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004100:	f000 fddc 	bl	8004cbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004104:	7bbb      	ldrb	r3, [r7, #14]
 8004106:	3b01      	subs	r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800410c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004110:	2b00      	cmp	r3, #0
 8004112:	dce9      	bgt.n	80040e8 <prvUnlockQueue+0x60>
 8004114:	e000      	b.n	8004118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	22ff      	movs	r2, #255	; 0xff
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004120:	f001 fc38 	bl	8005994 <vPortExitCritical>
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004134:	f001 fbfe 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d102      	bne.n	8004146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e001      	b.n	800414a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800414a:	f001 fc23 	bl	8005994 <vPortExitCritical>

	return xReturn;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004160:	f001 fbe8 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	429a      	cmp	r2, r3
 800416e:	d102      	bne.n	8004176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e001      	b.n	800417a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800417a:	f001 fc0b 	bl	8005994 <vPortExitCritical>

	return xReturn;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e014      	b.n	80041c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004198:	4a0f      	ldr	r2, [pc, #60]	; (80041d8 <vQueueAddToRegistry+0x50>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041a4:	490c      	ldr	r1, [pc, #48]	; (80041d8 <vQueueAddToRegistry+0x50>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <vQueueAddToRegistry+0x50>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041ba:	e006      	b.n	80041ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b07      	cmp	r3, #7
 80041c6:	d9e7      	bls.n	8004198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20004ab8 	.word	0x20004ab8

080041dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041ec:	f001 fba2 	bl	8005934 <vPortEnterCritical>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d103      	bne.n	8004206 <vQueueWaitForMessageRestricted+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800420c:	b25b      	sxtb	r3, r3
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d103      	bne.n	800421c <vQueueWaitForMessageRestricted+0x40>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421c:	f001 fbba 	bl	8005994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fc3b 	bl	8004aac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7ff ff26 	bl	8004088 <prvUnlockQueue>
	}
 800423c:	bf00      	nop
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08e      	sub	sp, #56	; 0x38
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	623b      	str	r3, [r7, #32]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xTaskCreateStatic+0x46>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	61fb      	str	r3, [r7, #28]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800428a:	235c      	movs	r3, #92	; 0x5c
 800428c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b5c      	cmp	r3, #92	; 0x5c
 8004292:	d00a      	beq.n	80042aa <xTaskCreateStatic+0x66>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61bb      	str	r3, [r7, #24]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01e      	beq.n	80042f0 <xTaskCreateStatic+0xac>
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042ca:	2300      	movs	r3, #0
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f850 	bl	8004388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ea:	f000 f8dd 	bl	80044a8 <prvAddNewTaskToReadyList>
 80042ee:	e001      	b.n	80042f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f4:	697b      	ldr	r3, [r7, #20]
	}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b08c      	sub	sp, #48	; 0x30
 8004302:	af04      	add	r7, sp, #16
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fc30 	bl	8005b78 <pvPortMalloc>
 8004318:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004320:	205c      	movs	r0, #92	; 0x5c
 8004322:	f001 fc29 	bl	8005b78 <pvPortMalloc>
 8004326:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
 8004334:	e005      	b.n	8004342 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f001 fcea 	bl	8005d10 <vPortFree>
 800433c:	e001      	b.n	8004342 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d017      	beq.n	8004378 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	2300      	movs	r3, #0
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f80e 	bl	8004388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436c:	69f8      	ldr	r0, [r7, #28]
 800436e:	f000 f89b 	bl	80044a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004372:	2301      	movs	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e002      	b.n	800437e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800437e:	69bb      	ldr	r3, [r7, #24]
	}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	461a      	mov	r2, r3
 80043a0:	21a5      	movs	r1, #165	; 0xa5
 80043a2:	f001 fe0b 	bl	8005fbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043b0:	3b01      	subs	r3, #1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	617b      	str	r3, [r7, #20]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01f      	beq.n	8004426 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e012      	b.n	8004412 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	7819      	ldrb	r1, [r3, #0]
 80043f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	3334      	adds	r3, #52	; 0x34
 80043fc:	460a      	mov	r2, r1
 80043fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d006      	beq.n	800441a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b0f      	cmp	r3, #15
 8004416:	d9e9      	bls.n	80043ec <prvInitialiseNewTask+0x64>
 8004418:	e000      	b.n	800441c <prvInitialiseNewTask+0x94>
			{
				break;
 800441a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004424:	e003      	b.n	800442e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	2b37      	cmp	r3, #55	; 0x37
 8004432:	d901      	bls.n	8004438 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004434:	2337      	movs	r3, #55	; 0x37
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004442:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2200      	movs	r2, #0
 8004448:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	3304      	adds	r3, #4
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f978 	bl	8003744 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	3318      	adds	r3, #24
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f973 	bl	8003744 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004462:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	2200      	movs	r2, #0
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	69b8      	ldr	r0, [r7, #24]
 8004488:	f001 f928 	bl	80056dc <pxPortInitialiseStack>
 800448c:	4602      	mov	r2, r0
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800449e:	bf00      	nop
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044b0:	f001 fa40 	bl	8005934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <prvAddNewTaskToReadyList+0xc4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a2c      	ldr	r2, [pc, #176]	; (800456c <prvAddNewTaskToReadyList+0xc4>)
 80044bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044be:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044c6:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <prvAddNewTaskToReadyList+0xc4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d110      	bne.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044d4:	f000 fc16 	bl	8004d04 <prvInitialiseTaskLists>
 80044d8:	e00d      	b.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <prvAddNewTaskToReadyList+0xcc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044e2:	4b23      	ldr	r3, [pc, #140]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d802      	bhi.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044f0:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044f6:	4b20      	ldr	r3, [pc, #128]	; (8004578 <prvAddNewTaskToReadyList+0xd0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <prvAddNewTaskToReadyList+0xd0>)
 80044fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <prvAddNewTaskToReadyList+0xd0>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <prvAddNewTaskToReadyList+0xd4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d903      	bls.n	800451c <prvAddNewTaskToReadyList+0x74>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a18      	ldr	r2, [pc, #96]	; (800457c <prvAddNewTaskToReadyList+0xd4>)
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <prvAddNewTaskToReadyList+0xd8>)
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7ff f913 	bl	800375e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004538:	f001 fa2c 	bl	8005994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <prvAddNewTaskToReadyList+0xcc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00e      	beq.n	8004562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	429a      	cmp	r2, r3
 8004550:	d207      	bcs.n	8004562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <prvAddNewTaskToReadyList+0xdc>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000c40 	.word	0x20000c40
 8004570:	2000076c 	.word	0x2000076c
 8004574:	20000c4c 	.word	0x20000c4c
 8004578:	20000c5c 	.word	0x20000c5c
 800457c:	20000c48 	.word	0x20000c48
 8004580:	20000770 	.word	0x20000770
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d017      	beq.n	80045ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <vTaskDelay+0x60>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <vTaskDelay+0x30>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60bb      	str	r3, [r7, #8]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045b8:	f000 f880 	bl	80046bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045bc:	2100      	movs	r1, #0
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fcea 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045c4:	f000 f888 	bl	80046d8 <xTaskResumeAll>
 80045c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d107      	bne.n	80045e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <vTaskDelay+0x64>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000c68 	.word	0x20000c68
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045fe:	463a      	mov	r2, r7
 8004600:	1d39      	adds	r1, r7, #4
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f848 	bl	800369c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	9202      	str	r2, [sp, #8]
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	2300      	movs	r3, #0
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	460a      	mov	r2, r1
 800461e:	4921      	ldr	r1, [pc, #132]	; (80046a4 <vTaskStartScheduler+0xb4>)
 8004620:	4821      	ldr	r0, [pc, #132]	; (80046a8 <vTaskStartScheduler+0xb8>)
 8004622:	f7ff fe0f 	bl	8004244 <xTaskCreateStatic>
 8004626:	4603      	mov	r3, r0
 8004628:	4a20      	ldr	r2, [pc, #128]	; (80046ac <vTaskStartScheduler+0xbc>)
 800462a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800462c:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <vTaskStartScheduler+0xbc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e001      	b.n	800463e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d102      	bne.n	800464a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004644:	f000 fcfc 	bl	8005040 <xTimerCreateTimerTask>
 8004648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d116      	bne.n	800467e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <vTaskStartScheduler+0xc0>)
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <vTaskStartScheduler+0xc4>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004672:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <vTaskStartScheduler+0xc8>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004678:	f001 f8ba 	bl	80057f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800467c:	e00e      	b.n	800469c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d10a      	bne.n	800469c <vTaskStartScheduler+0xac>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60fb      	str	r3, [r7, #12]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <vTaskStartScheduler+0xaa>
}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	08006eb4 	.word	0x08006eb4
 80046a8:	08004cd5 	.word	0x08004cd5
 80046ac:	20000c64 	.word	0x20000c64
 80046b0:	20000c60 	.word	0x20000c60
 80046b4:	20000c4c 	.word	0x20000c4c
 80046b8:	20000c44 	.word	0x20000c44

080046bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <vTaskSuspendAll+0x18>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	4a03      	ldr	r2, [pc, #12]	; (80046d4 <vTaskSuspendAll+0x18>)
 80046c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046ca:	bf00      	nop
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000c68 	.word	0x20000c68

080046d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046e6:	4b42      	ldr	r3, [pc, #264]	; (80047f0 <xTaskResumeAll+0x118>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <xTaskResumeAll+0x2c>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	603b      	str	r3, [r7, #0]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004704:	f001 f916 	bl	8005934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004708:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <xTaskResumeAll+0x118>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3b01      	subs	r3, #1
 800470e:	4a38      	ldr	r2, [pc, #224]	; (80047f0 <xTaskResumeAll+0x118>)
 8004710:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004712:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <xTaskResumeAll+0x118>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d162      	bne.n	80047e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800471a:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <xTaskResumeAll+0x11c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d05e      	beq.n	80047e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004722:	e02f      	b.n	8004784 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004724:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <xTaskResumeAll+0x120>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3318      	adds	r3, #24
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff f871 	bl	8003818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3304      	adds	r3, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f86c 	bl	8003818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <xTaskResumeAll+0x124>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d903      	bls.n	8004754 <xTaskResumeAll+0x7c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <xTaskResumeAll+0x124>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a27      	ldr	r2, [pc, #156]	; (8004800 <xTaskResumeAll+0x128>)
 8004762:	441a      	add	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe fff7 	bl	800375e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <xTaskResumeAll+0x12c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	429a      	cmp	r2, r3
 800477c:	d302      	bcc.n	8004784 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <xTaskResumeAll+0x130>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <xTaskResumeAll+0x120>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1cb      	bne.n	8004724 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004792:	f000 fb55 	bl	8004e40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <xTaskResumeAll+0x134>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047a2:	f000 f847 	bl	8004834 <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047ac:	4b16      	ldr	r3, [pc, #88]	; (8004808 <xTaskResumeAll+0x130>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f1      	bne.n	80047a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <xTaskResumeAll+0x134>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047c4:	4b10      	ldr	r3, [pc, #64]	; (8004808 <xTaskResumeAll+0x130>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <xTaskResumeAll+0x138>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047e0:	f001 f8d8 	bl	8005994 <vPortExitCritical>

	return xAlreadyYielded;
 80047e4:	68bb      	ldr	r3, [r7, #8]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000c68 	.word	0x20000c68
 80047f4:	20000c40 	.word	0x20000c40
 80047f8:	20000c00 	.word	0x20000c00
 80047fc:	20000c48 	.word	0x20000c48
 8004800:	20000770 	.word	0x20000770
 8004804:	2000076c 	.word	0x2000076c
 8004808:	20000c54 	.word	0x20000c54
 800480c:	20000c50 	.word	0x20000c50
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <xTaskGetTickCount+0x1c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004820:	687b      	ldr	r3, [r7, #4]
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000c44 	.word	0x20000c44

08004834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800483e:	4b4f      	ldr	r3, [pc, #316]	; (800497c <xTaskIncrementTick+0x148>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 808f 	bne.w	8004966 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004848:	4b4d      	ldr	r3, [pc, #308]	; (8004980 <xTaskIncrementTick+0x14c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004850:	4a4b      	ldr	r2, [pc, #300]	; (8004980 <xTaskIncrementTick+0x14c>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d120      	bne.n	800489e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800485c:	4b49      	ldr	r3, [pc, #292]	; (8004984 <xTaskIncrementTick+0x150>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <xTaskIncrementTick+0x48>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	603b      	str	r3, [r7, #0]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xTaskIncrementTick+0x46>
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <xTaskIncrementTick+0x150>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	4b41      	ldr	r3, [pc, #260]	; (8004988 <xTaskIncrementTick+0x154>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3f      	ldr	r2, [pc, #252]	; (8004984 <xTaskIncrementTick+0x150>)
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <xTaskIncrementTick+0x154>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4b3e      	ldr	r3, [pc, #248]	; (800498c <xTaskIncrementTick+0x158>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	4a3d      	ldr	r2, [pc, #244]	; (800498c <xTaskIncrementTick+0x158>)
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	f000 fad1 	bl	8004e40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800489e:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <xTaskIncrementTick+0x15c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d349      	bcc.n	800493c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <xTaskIncrementTick+0x150>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <xTaskIncrementTick+0x15c>)
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295
 80048b8:	601a      	str	r2, [r3, #0]
					break;
 80048ba:	e03f      	b.n	800493c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048bc:	4b31      	ldr	r3, [pc, #196]	; (8004984 <xTaskIncrementTick+0x150>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d203      	bcs.n	80048dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048d4:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <xTaskIncrementTick+0x15c>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048da:	e02f      	b.n	800493c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3304      	adds	r3, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe ff99 	bl	8003818 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d004      	beq.n	80048f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3318      	adds	r3, #24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe ff90 	bl	8003818 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <xTaskIncrementTick+0x160>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d903      	bls.n	800490c <xTaskIncrementTick+0xd8>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	4a22      	ldr	r2, [pc, #136]	; (8004994 <xTaskIncrementTick+0x160>)
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <xTaskIncrementTick+0x164>)
 800491a:	441a      	add	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f7fe ff1b 	bl	800375e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <xTaskIncrementTick+0x168>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	429a      	cmp	r2, r3
 8004934:	d3b8      	bcc.n	80048a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800493a:	e7b5      	b.n	80048a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <xTaskIncrementTick+0x168>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	4915      	ldr	r1, [pc, #84]	; (8004998 <xTaskIncrementTick+0x164>)
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d901      	bls.n	8004958 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <xTaskIncrementTick+0x16c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e004      	b.n	8004970 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <xTaskIncrementTick+0x170>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3301      	adds	r3, #1
 800496c:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <xTaskIncrementTick+0x170>)
 800496e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004970:	697b      	ldr	r3, [r7, #20]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000c68 	.word	0x20000c68
 8004980:	20000c44 	.word	0x20000c44
 8004984:	20000bf8 	.word	0x20000bf8
 8004988:	20000bfc 	.word	0x20000bfc
 800498c:	20000c58 	.word	0x20000c58
 8004990:	20000c60 	.word	0x20000c60
 8004994:	20000c48 	.word	0x20000c48
 8004998:	20000770 	.word	0x20000770
 800499c:	2000076c 	.word	0x2000076c
 80049a0:	20000c54 	.word	0x20000c54
 80049a4:	20000c50 	.word	0x20000c50

080049a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <vTaskSwitchContext+0xa8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049b6:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <vTaskSwitchContext+0xac>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049bc:	e041      	b.n	8004a42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049be:	4b25      	ldr	r3, [pc, #148]	; (8004a54 <vTaskSwitchContext+0xac>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <vTaskSwitchContext+0xb0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e010      	b.n	80049ee <vTaskSwitchContext+0x46>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vTaskSwitchContext+0x3e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	491b      	ldr	r1, [pc, #108]	; (8004a5c <vTaskSwitchContext+0xb4>)
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0e4      	beq.n	80049cc <vTaskSwitchContext+0x24>
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <vTaskSwitchContext+0xb4>)
 8004a0e:	4413      	add	r3, r2
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3308      	adds	r3, #8
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d104      	bne.n	8004a32 <vTaskSwitchContext+0x8a>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <vTaskSwitchContext+0xb8>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <vTaskSwitchContext+0xb0>)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6013      	str	r3, [r2, #0]
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000c68 	.word	0x20000c68
 8004a54:	20000c54 	.word	0x20000c54
 8004a58:	20000c48 	.word	0x20000c48
 8004a5c:	20000770 	.word	0x20000770
 8004a60:	2000076c 	.word	0x2000076c

08004a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <vTaskPlaceOnEventList+0x44>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3318      	adds	r3, #24
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fe fe87 	bl	80037a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a98:	2101      	movs	r1, #1
 8004a9a:	6838      	ldr	r0, [r7, #0]
 8004a9c:	f000 fa7c 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	2000076c 	.word	0x2000076c

08004aac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	617b      	str	r3, [r7, #20]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3318      	adds	r3, #24
 8004ada:	4619      	mov	r1, r3
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7fe fe3e 	bl	800375e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f000 fa51 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
	}
 8004af6:	bf00      	nop
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000076c 	.word	0x2000076c

08004b04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60fb      	str	r3, [r7, #12]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fe6f 	bl	8003818 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <xTaskRemoveFromEventList+0xb0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fe66 	bl	8003818 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <xTaskRemoveFromEventList+0xb4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d903      	bls.n	8004b60 <xTaskRemoveFromEventList+0x5c>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <xTaskRemoveFromEventList+0xb4>)
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <xTaskRemoveFromEventList+0xb8>)
 8004b6e:	441a      	add	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fe fdf1 	bl	800375e <vListInsertEnd>
 8004b7c:	e005      	b.n	8004b8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3318      	adds	r3, #24
 8004b82:	4619      	mov	r1, r3
 8004b84:	480e      	ldr	r0, [pc, #56]	; (8004bc0 <xTaskRemoveFromEventList+0xbc>)
 8004b86:	f7fe fdea 	bl	800375e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <xTaskRemoveFromEventList+0xc0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d905      	bls.n	8004ba4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <xTaskRemoveFromEventList+0xc4>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e001      	b.n	8004ba8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ba8:	697b      	ldr	r3, [r7, #20]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000c68 	.word	0x20000c68
 8004bb8:	20000c48 	.word	0x20000c48
 8004bbc:	20000770 	.word	0x20000770
 8004bc0:	20000c00 	.word	0x20000c00
 8004bc4:	2000076c 	.word	0x2000076c
 8004bc8:	20000c54 	.word	0x20000c54

08004bcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <vTaskInternalSetTimeOutState+0x24>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <vTaskInternalSetTimeOutState+0x28>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	605a      	str	r2, [r3, #4]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000c58 	.word	0x20000c58
 8004bf4:	20000c44 	.word	0x20000c44

08004bf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	613b      	str	r3, [r7, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	60fb      	str	r3, [r7, #12]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c3a:	f000 fe7b 	bl	8005934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <xTaskCheckForTimeOut+0xbc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d102      	bne.n	8004c5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e023      	b.n	8004ca6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <xTaskCheckForTimeOut+0xc0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d007      	beq.n	8004c7a <xTaskCheckForTimeOut+0x82>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e015      	b.n	8004ca6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d20b      	bcs.n	8004c9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff9b 	bl	8004bcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e004      	b.n	8004ca6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ca6:	f000 fe75 	bl	8005994 <vPortExitCritical>

	return xReturn;
 8004caa:	69fb      	ldr	r3, [r7, #28]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000c44 	.word	0x20000c44
 8004cb8:	20000c58 	.word	0x20000c58

08004cbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <vTaskMissedYield+0x14>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20000c54 	.word	0x20000c54

08004cd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cdc:	f000 f852 	bl	8004d84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <prvIdleTask+0x28>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d9f9      	bls.n	8004cdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <prvIdleTask+0x2c>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cf8:	e7f0      	b.n	8004cdc <prvIdleTask+0x8>
 8004cfa:	bf00      	nop
 8004cfc:	20000770 	.word	0x20000770
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	e00c      	b.n	8004d2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <prvInitialiseTaskLists+0x60>)
 8004d1c:	4413      	add	r3, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fcf0 	bl	8003704 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3301      	adds	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b37      	cmp	r3, #55	; 0x37
 8004d2e:	d9ef      	bls.n	8004d10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d30:	480d      	ldr	r0, [pc, #52]	; (8004d68 <prvInitialiseTaskLists+0x64>)
 8004d32:	f7fe fce7 	bl	8003704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d36:	480d      	ldr	r0, [pc, #52]	; (8004d6c <prvInitialiseTaskLists+0x68>)
 8004d38:	f7fe fce4 	bl	8003704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d3c:	480c      	ldr	r0, [pc, #48]	; (8004d70 <prvInitialiseTaskLists+0x6c>)
 8004d3e:	f7fe fce1 	bl	8003704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d42:	480c      	ldr	r0, [pc, #48]	; (8004d74 <prvInitialiseTaskLists+0x70>)
 8004d44:	f7fe fcde 	bl	8003704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d48:	480b      	ldr	r0, [pc, #44]	; (8004d78 <prvInitialiseTaskLists+0x74>)
 8004d4a:	f7fe fcdb 	bl	8003704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <prvInitialiseTaskLists+0x78>)
 8004d50:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <prvInitialiseTaskLists+0x64>)
 8004d52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <prvInitialiseTaskLists+0x7c>)
 8004d56:	4a05      	ldr	r2, [pc, #20]	; (8004d6c <prvInitialiseTaskLists+0x68>)
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000770 	.word	0x20000770
 8004d68:	20000bd0 	.word	0x20000bd0
 8004d6c:	20000be4 	.word	0x20000be4
 8004d70:	20000c00 	.word	0x20000c00
 8004d74:	20000c14 	.word	0x20000c14
 8004d78:	20000c2c 	.word	0x20000c2c
 8004d7c:	20000bf8 	.word	0x20000bf8
 8004d80:	20000bfc 	.word	0x20000bfc

08004d84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d8a:	e019      	b.n	8004dc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d8c:	f000 fdd2 	bl	8005934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <prvCheckTasksWaitingTermination+0x50>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fd3b 	bl	8003818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <prvCheckTasksWaitingTermination+0x54>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a0b      	ldr	r2, [pc, #44]	; (8004dd8 <prvCheckTasksWaitingTermination+0x54>)
 8004daa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <prvCheckTasksWaitingTermination+0x58>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <prvCheckTasksWaitingTermination+0x58>)
 8004db4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004db6:	f000 fded 	bl	8005994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f810 	bl	8004de0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <prvCheckTasksWaitingTermination+0x58>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e1      	bne.n	8004d8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000c14 	.word	0x20000c14
 8004dd8:	20000c40 	.word	0x20000c40
 8004ddc:	20000c28 	.word	0x20000c28

08004de0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 ff8a 	bl	8005d10 <vPortFree>
				vPortFree( pxTCB );
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 ff87 	bl	8005d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e02:	e018      	b.n	8004e36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d103      	bne.n	8004e16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 ff7e 	bl	8005d10 <vPortFree>
	}
 8004e14:	e00f      	b.n	8004e36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d00a      	beq.n	8004e36 <prvDeleteTCB+0x56>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <prvDeleteTCB+0x54>
	}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <prvResetNextTaskUnblockTime+0x38>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <prvResetNextTaskUnblockTime+0x3c>)
 8004e52:	f04f 32ff 	mov.w	r2, #4294967295
 8004e56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e58:	e008      	b.n	8004e6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <prvResetNextTaskUnblockTime+0x38>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <prvResetNextTaskUnblockTime+0x3c>)
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000bf8 	.word	0x20000bf8
 8004e7c:	20000c60 	.word	0x20000c60

08004e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <xTaskGetSchedulerState+0x34>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	e008      	b.n	8004ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <xTaskGetSchedulerState+0x38>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	e001      	b.n	8004ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ea6:	687b      	ldr	r3, [r7, #4]
	}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	20000c4c 	.word	0x20000c4c
 8004eb8:	20000c68 	.word	0x20000c68

08004ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d056      	beq.n	8004f80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <xTaskPriorityDisinherit+0xd0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d00a      	beq.n	8004ef2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60bb      	str	r3, [r7, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d02c      	beq.n	8004f80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d128      	bne.n	8004f80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fc70 	bl	8003818 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <xTaskPriorityDisinherit+0xd4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d903      	bls.n	8004f60 <xTaskPriorityDisinherit+0xa4>
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <xTaskPriorityDisinherit+0xd4>)
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <xTaskPriorityDisinherit+0xd8>)
 8004f6e:	441a      	add	r2, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7fe fbf1 	bl	800375e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f80:	697b      	ldr	r3, [r7, #20]
	}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	2000076c 	.word	0x2000076c
 8004f90:	20000c48 	.word	0x20000c48
 8004f94:	20000770 	.word	0x20000770

08004f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fa2:	4b21      	ldr	r3, [pc, #132]	; (8005028 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa8:	4b20      	ldr	r3, [pc, #128]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fc32 	bl	8003818 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d10a      	bne.n	8004fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4819      	ldr	r0, [pc, #100]	; (8005030 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fcc:	f7fe fbc7 	bl	800375e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fd0:	e026      	b.n	8005020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d209      	bcs.n	8004ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b0f      	ldr	r3, [pc, #60]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fe fbd5 	bl	80037a6 <vListInsert>
}
 8004ffc:	e010      	b.n	8005020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fe fbcb 	bl	80037a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	429a      	cmp	r2, r3
 8005018:	d202      	bcs.n	8005020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800501a:	4a08      	ldr	r2, [pc, #32]	; (800503c <prvAddCurrentTaskToDelayedList+0xa4>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6013      	str	r3, [r2, #0]
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000c44 	.word	0x20000c44
 800502c:	2000076c 	.word	0x2000076c
 8005030:	20000c2c 	.word	0x20000c2c
 8005034:	20000bfc 	.word	0x20000bfc
 8005038:	20000bf8 	.word	0x20000bf8
 800503c:	20000c60 	.word	0x20000c60

08005040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800504a:	f000 fb07 	bl	800565c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <xTimerCreateTimerTask+0x80>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d021      	beq.n	800509a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800505e:	1d3a      	adds	r2, r7, #4
 8005060:	f107 0108 	add.w	r1, r7, #8
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe fb31 	bl	80036d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	9202      	str	r2, [sp, #8]
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	2302      	movs	r3, #2
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	460a      	mov	r2, r1
 8005080:	4910      	ldr	r1, [pc, #64]	; (80050c4 <xTimerCreateTimerTask+0x84>)
 8005082:	4811      	ldr	r0, [pc, #68]	; (80050c8 <xTimerCreateTimerTask+0x88>)
 8005084:	f7ff f8de 	bl	8004244 <xTaskCreateStatic>
 8005088:	4603      	mov	r3, r0
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <xTimerCreateTimerTask+0x8c>)
 800508c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <xTimerCreateTimerTask+0x8c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005096:	2301      	movs	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	613b      	str	r3, [r7, #16]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050b6:	697b      	ldr	r3, [r7, #20]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000c9c 	.word	0x20000c9c
 80050c4:	08006ebc 	.word	0x08006ebc
 80050c8:	08005205 	.word	0x08005205
 80050cc:	20000ca0 	.word	0x20000ca0

080050d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	623b      	str	r3, [r7, #32]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <xTimerGenericCommand+0x98>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02a      	beq.n	800515c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b05      	cmp	r3, #5
 8005116:	dc18      	bgt.n	800514a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005118:	f7ff feb2 	bl	8004e80 <xTaskGetSchedulerState>
 800511c:	4603      	mov	r3, r0
 800511e:	2b02      	cmp	r3, #2
 8005120:	d109      	bne.n	8005136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <xTimerGenericCommand+0x98>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f107 0110 	add.w	r1, r7, #16
 800512a:	2300      	movs	r3, #0
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	f7fe fca1 	bl	8003a74 <xQueueGenericSend>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24
 8005134:	e012      	b.n	800515c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <xTimerGenericCommand+0x98>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	f107 0110 	add.w	r1, r7, #16
 800513e:	2300      	movs	r3, #0
 8005140:	2200      	movs	r2, #0
 8005142:	f7fe fc97 	bl	8003a74 <xQueueGenericSend>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
 8005148:	e008      	b.n	800515c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <xTimerGenericCommand+0x98>)
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f107 0110 	add.w	r1, r7, #16
 8005152:	2300      	movs	r3, #0
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	f7fe fd8b 	bl	8003c70 <xQueueGenericSendFromISR>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800515e:	4618      	mov	r0, r3
 8005160:	3728      	adds	r7, #40	; 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000c9c 	.word	0x20000c9c

0800516c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <prvProcessExpiredTimer+0x94>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3304      	adds	r3, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fb47 	bl	8003818 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d022      	beq.n	80051de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	18d1      	adds	r1, r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	f000 f8d1 	bl	800534c <prvInsertTimerInActiveList>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051b0:	2300      	movs	r3, #0
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	2100      	movs	r1, #0
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff88 	bl	80050d0 <xTimerGenericCommand>
 80051c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d113      	bne.n	80051f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	4798      	blx	r3
}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000c94 	.word	0x20000c94

08005204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f857 	bl	80052c4 <prvGetNextExpireTime>
 8005216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4619      	mov	r1, r3
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f803 	bl	8005228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005222:	f000 f8d5 	bl	80053d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005226:	e7f1      	b.n	800520c <prvTimerTask+0x8>

08005228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005232:	f7ff fa43 	bl	80046bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f866 	bl	800530c <prvSampleTimeNow>
 8005240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d130      	bne.n	80052aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <prvProcessTimerOrBlockTask+0x3c>
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d806      	bhi.n	8005264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005256:	f7ff fa3f 	bl	80046d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff85 	bl	800516c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005262:	e024      	b.n	80052ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <prvProcessTimerOrBlockTask+0x90>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <prvProcessTimerOrBlockTask+0x50>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <prvProcessTimerOrBlockTask+0x52>
 8005278:	2300      	movs	r3, #0
 800527a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <prvProcessTimerOrBlockTask+0x94>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4619      	mov	r1, r3
 800528a:	f7fe ffa7 	bl	80041dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800528e:	f7ff fa23 	bl	80046d8 <xTaskResumeAll>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <prvProcessTimerOrBlockTask+0x98>)
 800529a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
}
 80052a8:	e001      	b.n	80052ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052aa:	f7ff fa15 	bl	80046d8 <xTaskResumeAll>
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000c98 	.word	0x20000c98
 80052bc:	20000c9c 	.word	0x20000c9c
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <prvGetNextExpireTime+0x44>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <prvGetNextExpireTime+0x16>
 80052d6:	2201      	movs	r2, #1
 80052d8:	e000      	b.n	80052dc <prvGetNextExpireTime+0x18>
 80052da:	2200      	movs	r2, #0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <prvGetNextExpireTime+0x44>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e001      	b.n	80052f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052f8:	68fb      	ldr	r3, [r7, #12]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20000c94 	.word	0x20000c94

0800530c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005314:	f7ff fa7e 	bl	8004814 <xTaskGetTickCount>
 8005318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <prvSampleTimeNow+0x3c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d205      	bcs.n	8005330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005324:	f000 f936 	bl	8005594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e002      	b.n	8005336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <prvSampleTimeNow+0x3c>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000ca4 	.word	0x20000ca4

0800534c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d812      	bhi.n	8005398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	1ad2      	subs	r2, r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e01b      	b.n	80053be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <prvInsertTimerInActiveList+0x7c>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f7fe fa08 	bl	80037a6 <vListInsert>
 8005396:	e012      	b.n	80053be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d206      	bcs.n	80053ae <prvInsertTimerInActiveList+0x62>
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e007      	b.n	80053be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ae:	4b07      	ldr	r3, [pc, #28]	; (80053cc <prvInsertTimerInActiveList+0x80>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fe f9f4 	bl	80037a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053be:	697b      	ldr	r3, [r7, #20]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000c98 	.word	0x20000c98
 80053cc:	20000c94 	.word	0x20000c94

080053d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053d6:	e0ca      	b.n	800556e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da18      	bge.n	8005410 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	3304      	adds	r3, #4
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	61fb      	str	r3, [r7, #28]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005406:	6850      	ldr	r0, [r2, #4]
 8005408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	4611      	mov	r1, r2
 800540e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f2c0 80aa 	blt.w	800556c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe f9f5 	bl	8003818 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800542e:	463b      	mov	r3, r7
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff6b 	bl	800530c <prvSampleTimeNow>
 8005436:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b09      	cmp	r3, #9
 800543c:	f200 8097 	bhi.w	800556e <prvProcessReceivedCommands+0x19e>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <prvProcessReceivedCommands+0x78>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005471 	.word	0x08005471
 800544c:	08005471 	.word	0x08005471
 8005450:	08005471 	.word	0x08005471
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054f9 	.word	0x080054f9
 800545c:	08005543 	.word	0x08005543
 8005460:	08005471 	.word	0x08005471
 8005464:	08005471 	.word	0x08005471
 8005468:	080054e5 	.word	0x080054e5
 800546c:	080054f9 	.word	0x080054f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	18d1      	adds	r1, r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005490:	f7ff ff5c 	bl	800534c <prvInsertTimerInActiveList>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d069      	beq.n	800556e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05e      	beq.n	800556e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	441a      	add	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	2100      	movs	r1, #0
 80054c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c2:	f7ff fe05 	bl	80050d0 <xTimerGenericCommand>
 80054c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d14f      	bne.n	800556e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	61bb      	str	r3, [r7, #24]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054f6:	e03a      	b.n	800556e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	617b      	str	r3, [r7, #20]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	18d1      	adds	r1, r2, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	f7ff ff06 	bl	800534c <prvInsertTimerInActiveList>
					break;
 8005540:	e015      	b.n	800556e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 fbdd 	bl	8005d10 <vPortFree>
 8005556:	e00a      	b.n	800556e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800556a:	e000      	b.n	800556e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800556c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <prvProcessReceivedCommands+0x1c0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1d39      	adds	r1, r7, #4
 8005574:	2200      	movs	r2, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fc16 	bl	8003da8 <xQueueReceive>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	f47f af2a 	bne.w	80053d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3730      	adds	r7, #48	; 0x30
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000c9c 	.word	0x20000c9c

08005594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800559a:	e048      	b.n	800562e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800559c:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <prvSwitchTimerLists+0xc0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a6:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <prvSwitchTimerLists+0xc0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe f92f 	bl	8003818 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02e      	beq.n	800562e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4413      	add	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d90e      	bls.n	8005600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <prvSwitchTimerLists+0xc0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe f8d4 	bl	80037a6 <vListInsert>
 80055fe:	e016      	b.n	800562e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	2100      	movs	r1, #0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fd60 	bl	80050d0 <xTimerGenericCommand>
 8005610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	603b      	str	r3, [r7, #0]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <prvSwitchTimerLists+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1b1      	bne.n	800559c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <prvSwitchTimerLists+0xc0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <prvSwitchTimerLists+0xc4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvSwitchTimerLists+0xc0>)
 8005644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005646:	4a04      	ldr	r2, [pc, #16]	; (8005658 <prvSwitchTimerLists+0xc4>)
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	6013      	str	r3, [r2, #0]
}
 800564c:	bf00      	nop
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000c94 	.word	0x20000c94
 8005658:	20000c98 	.word	0x20000c98

0800565c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005662:	f000 f967 	bl	8005934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d120      	bne.n	80056b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800566e:	4814      	ldr	r0, [pc, #80]	; (80056c0 <prvCheckForValidListAndQueue+0x64>)
 8005670:	f7fe f848 	bl	8003704 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005674:	4813      	ldr	r0, [pc, #76]	; (80056c4 <prvCheckForValidListAndQueue+0x68>)
 8005676:	f7fe f845 	bl	8003704 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <prvCheckForValidListAndQueue+0x6c>)
 800567c:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <prvCheckForValidListAndQueue+0x64>)
 800567e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <prvCheckForValidListAndQueue+0x70>)
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <prvCheckForValidListAndQueue+0x68>)
 8005684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <prvCheckForValidListAndQueue+0x74>)
 800568c:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <prvCheckForValidListAndQueue+0x78>)
 800568e:	2110      	movs	r1, #16
 8005690:	200a      	movs	r0, #10
 8005692:	f7fe f953 	bl	800393c <xQueueGenericCreateStatic>
 8005696:	4603      	mov	r3, r0
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 800569a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	490b      	ldr	r1, [pc, #44]	; (80056d8 <prvCheckForValidListAndQueue+0x7c>)
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fd6c 	bl	8004188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b0:	f000 f970 	bl	8005994 <vPortExitCritical>
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000c9c 	.word	0x20000c9c
 80056c0:	20000c6c 	.word	0x20000c6c
 80056c4:	20000c80 	.word	0x20000c80
 80056c8:	20000c94 	.word	0x20000c94
 80056cc:	20000c98 	.word	0x20000c98
 80056d0:	20000d48 	.word	0x20000d48
 80056d4:	20000ca8 	.word	0x20000ca8
 80056d8:	08006ec4 	.word	0x08006ec4

080056dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3b04      	subs	r3, #4
 80056ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3b04      	subs	r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b04      	subs	r3, #4
 800570a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800570c:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <pxPortInitialiseStack+0x64>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b14      	subs	r3, #20
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3b04      	subs	r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f06f 0202 	mvn.w	r2, #2
 800572a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b20      	subs	r3, #32
 8005730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	08005745 	.word	0x08005745

08005744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <prvTaskExitError+0x54>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d00a      	beq.n	800576e <prvTaskExitError+0x2a>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <prvTaskExitError+0x28>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60bb      	str	r3, [r7, #8]
}
 8005780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005782:	bf00      	nop
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0fc      	beq.n	8005784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800578a:	bf00      	nop
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000028 	.word	0x20000028
 800579c:	00000000 	.word	0x00000000

080057a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <pxCurrentTCBConst2>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	f380 8809 	msr	PSP, r0
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	4770      	bx	lr
 80057bc:	f3af 8000 	nop.w

080057c0 <pxCurrentTCBConst2>:
 80057c0:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057c8:	4808      	ldr	r0, [pc, #32]	; (80057ec <prvPortStartFirstTask+0x24>)
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f380 8808 	msr	MSP, r0
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8814 	msr	CONTROL, r0
 80057da:	b662      	cpsie	i
 80057dc:	b661      	cpsie	f
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	df00      	svc	0
 80057e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ea:	bf00      	nop
 80057ec:	e000ed08 	.word	0xe000ed08

080057f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <xPortStartScheduler+0x120>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a46      	ldr	r2, [pc, #280]	; (8005914 <xPortStartScheduler+0x124>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10a      	bne.n	8005816 <xPortStartScheduler+0x26>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	613b      	str	r3, [r7, #16]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005816:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <xPortStartScheduler+0x120>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3f      	ldr	r2, [pc, #252]	; (8005918 <xPortStartScheduler+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10a      	bne.n	8005836 <xPortStartScheduler+0x46>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <xPortStartScheduler+0x12c>)
 8005838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b31      	ldr	r3, [pc, #196]	; (8005920 <xPortStartScheduler+0x130>)
 800585c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <xPortStartScheduler+0x134>)
 8005860:	2207      	movs	r2, #7
 8005862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005864:	e009      	b.n	800587a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005866:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <xPortStartScheduler+0x134>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <xPortStartScheduler+0x134>)
 800586e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d0ef      	beq.n	8005866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005886:	4b27      	ldr	r3, [pc, #156]	; (8005924 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1c3 0307 	rsb	r3, r3, #7
 800588e:	2b04      	cmp	r3, #4
 8005890:	d00a      	beq.n	80058a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <xPortStartScheduler+0x134>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <xPortStartScheduler+0x134>)
 80058b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <xPortStartScheduler+0x134>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ba:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <xPortStartScheduler+0x134>)
 80058bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <xPortStartScheduler+0x138>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <xPortStartScheduler+0x138>)
 80058cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <xPortStartScheduler+0x138>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <xPortStartScheduler+0x138>)
 80058d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058de:	f000 f8dd 	bl	8005a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <xPortStartScheduler+0x13c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058e8:	f000 f8fc 	bl	8005ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xPortStartScheduler+0x140>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0f      	ldr	r2, [pc, #60]	; (8005930 <xPortStartScheduler+0x140>)
 80058f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058f8:	f7ff ff66 	bl	80057c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058fc:	f7ff f854 	bl	80049a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005900:	f7ff ff20 	bl	8005744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000ed00 	.word	0xe000ed00
 8005914:	410fc271 	.word	0x410fc271
 8005918:	410fc270 	.word	0x410fc270
 800591c:	e000e400 	.word	0xe000e400
 8005920:	20000d98 	.word	0x20000d98
 8005924:	20000d9c 	.word	0x20000d9c
 8005928:	e000ed20 	.word	0xe000ed20
 800592c:	20000028 	.word	0x20000028
 8005930:	e000ef34 	.word	0xe000ef34

08005934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
}
 800594c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <vPortEnterCritical+0x58>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <vPortEnterCritical+0x58>)
 8005956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <vPortEnterCritical+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10f      	bne.n	8005980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <vPortEnterCritical+0x5c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <vPortEnterCritical+0x4c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <vPortEnterCritical+0x4a>
	}
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000028 	.word	0x20000028
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <vPortExitCritical+0x50>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <vPortExitCritical+0x24>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	607b      	str	r3, [r7, #4]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <vPortExitCritical+0x50>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <vPortExitCritical+0x50>)
 80059c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <vPortExitCritical+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <vPortExitCritical+0x42>
 80059ca:	2300      	movs	r3, #0
 80059cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f383 8811 	msr	BASEPRI, r3
}
 80059d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000028 	.word	0x20000028
	...

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7fe ffc2 	bl	80049a8 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a72:	f7fe fedf 	bl	8004834 <xTaskIncrementTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <xPortSysTickHandler+0x40>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
}
 8005a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <vPortSetupTimerInterrupt+0x38>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <vPortSetupTimerInterrupt+0x3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <vPortSetupTimerInterrupt+0x40>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <vPortSetupTimerInterrupt+0x44>)
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e010 	.word	0xe000e010
 8005ad4:	e000e018 	.word	0xe000e018
 8005ad8:	2000001c 	.word	0x2000001c
 8005adc:	10624dd3 	.word	0x10624dd3
 8005ae0:	e000e014 	.word	0xe000e014

08005ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005af4 <vPortEnableVFP+0x10>
 8005ae8:	6801      	ldr	r1, [r0, #0]
 8005aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aee:	6001      	str	r1, [r0, #0]
 8005af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005af2:	bf00      	nop
 8005af4:	e000ed88 	.word	0xe000ed88

08005af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d914      	bls.n	8005b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <vPortValidateInterruptPriority+0x70>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <vPortValidateInterruptPriority+0x74>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	7afa      	ldrb	r2, [r7, #11]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20a      	bcs.n	8005b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b34:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <vPortValidateInterruptPriority+0x78>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <vPortValidateInterruptPriority+0x7c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d90a      	bls.n	8005b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	603b      	str	r3, [r7, #0]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <vPortValidateInterruptPriority+0x60>
	}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	e000e3f0 	.word	0xe000e3f0
 8005b6c:	20000d98 	.word	0x20000d98
 8005b70:	e000ed0c 	.word	0xe000ed0c
 8005b74:	20000d9c 	.word	0x20000d9c

08005b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b84:	f7fe fd9a 	bl	80046bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b88:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <pvPortMalloc+0x180>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b90:	f000 f920 	bl	8005dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <pvPortMalloc+0x184>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 8093 	bne.w	8005cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01d      	beq.n	8005be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ba8:	2208      	movs	r2, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	617b      	str	r3, [r7, #20]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d06e      	beq.n	8005cc8 <pvPortMalloc+0x150>
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <pvPortMalloc+0x188>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d869      	bhi.n	8005cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bf4:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <pvPortMalloc+0x18c>)
 8005bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bf8:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <pvPortMalloc+0x18c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfe:	e004      	b.n	8005c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <pvPortMalloc+0xa4>
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f1      	bne.n	8005c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c1c:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <pvPortMalloc+0x180>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d050      	beq.n	8005cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	2308      	movs	r3, #8
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d91f      	bls.n	8005c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <pvPortMalloc+0xf8>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	613b      	str	r3, [r7, #16]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c82:	69b8      	ldr	r0, [r7, #24]
 8005c84:	f000 f908 	bl	8005e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <pvPortMalloc+0x188>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <pvPortMalloc+0x188>)
 8005c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c96:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <pvPortMalloc+0x188>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <pvPortMalloc+0x190>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d203      	bcs.n	8005caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <pvPortMalloc+0x188>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <pvPortMalloc+0x190>)
 8005ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <pvPortMalloc+0x184>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <pvPortMalloc+0x194>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <pvPortMalloc+0x194>)
 8005cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cc8:	f7fe fd06 	bl	80046d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <pvPortMalloc+0x174>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60fb      	str	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <pvPortMalloc+0x172>
	return pvReturn;
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3728      	adds	r7, #40	; 0x28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200049a8 	.word	0x200049a8
 8005cfc:	200049bc 	.word	0x200049bc
 8005d00:	200049ac 	.word	0x200049ac
 8005d04:	200049a0 	.word	0x200049a0
 8005d08:	200049b0 	.word	0x200049b0
 8005d0c:	200049b4 	.word	0x200049b4

08005d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04d      	beq.n	8005dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d22:	2308      	movs	r3, #8
 8005d24:	425b      	negs	r3, r3
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4b24      	ldr	r3, [pc, #144]	; (8005dc8 <vPortFree+0xb8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <vPortFree+0x44>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60fb      	str	r3, [r7, #12]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <vPortFree+0x62>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60bb      	str	r3, [r7, #8]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <vPortFree+0xb8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d11a      	bne.n	8005dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <vPortFree+0xb8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d98:	f7fe fc90 	bl	80046bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <vPortFree+0xbc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4413      	add	r3, r2
 8005da6:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <vPortFree+0xbc>)
 8005da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f000 f874 	bl	8005e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <vPortFree+0xc0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	4a06      	ldr	r2, [pc, #24]	; (8005dd0 <vPortFree+0xc0>)
 8005db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dba:	f7fe fc8d 	bl	80046d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200049bc 	.word	0x200049bc
 8005dcc:	200049ac 	.word	0x200049ac
 8005dd0:	200049b8 	.word	0x200049b8

08005dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <prvHeapInit+0xac>)
 8005de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3307      	adds	r3, #7
 8005df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <prvHeapInit+0xac>)
 8005e04:	4413      	add	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <prvHeapInit+0xb0>)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <prvHeapInit+0xb0>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e20:	2208      	movs	r2, #8
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <prvHeapInit+0xb4>)
 8005e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <prvHeapInit+0xb4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <prvHeapInit+0xb4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvHeapInit+0xb4>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <prvHeapInit+0xb8>)
 8005e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <prvHeapInit+0xbc>)
 8005e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <prvHeapInit+0xc0>)
 8005e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000da0 	.word	0x20000da0
 8005e84:	200049a0 	.word	0x200049a0
 8005e88:	200049a8 	.word	0x200049a8
 8005e8c:	200049b0 	.word	0x200049b0
 8005e90:	200049ac 	.word	0x200049ac
 8005e94:	200049bc 	.word	0x200049bc

08005e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ea0:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <prvInsertBlockIntoFreeList+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e002      	b.n	8005eac <prvInsertBlockIntoFreeList+0x14>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d8f7      	bhi.n	8005ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d108      	bne.n	8005eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d118      	bne.n	8005f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d00d      	beq.n	8005f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e008      	b.n	8005f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvInsertBlockIntoFreeList+0xb0>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e003      	b.n	8005f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d002      	beq.n	8005f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	200049a0 	.word	0x200049a0
 8005f48:	200049a8 	.word	0x200049a8

08005f4c <__errno>:
 8005f4c:	4b01      	ldr	r3, [pc, #4]	; (8005f54 <__errno+0x8>)
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	2000002c 	.word	0x2000002c

08005f58 <__libc_init_array>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	4d0d      	ldr	r5, [pc, #52]	; (8005f90 <__libc_init_array+0x38>)
 8005f5c:	4c0d      	ldr	r4, [pc, #52]	; (8005f94 <__libc_init_array+0x3c>)
 8005f5e:	1b64      	subs	r4, r4, r5
 8005f60:	10a4      	asrs	r4, r4, #2
 8005f62:	2600      	movs	r6, #0
 8005f64:	42a6      	cmp	r6, r4
 8005f66:	d109      	bne.n	8005f7c <__libc_init_array+0x24>
 8005f68:	4d0b      	ldr	r5, [pc, #44]	; (8005f98 <__libc_init_array+0x40>)
 8005f6a:	4c0c      	ldr	r4, [pc, #48]	; (8005f9c <__libc_init_array+0x44>)
 8005f6c:	f000 ff84 	bl	8006e78 <_init>
 8005f70:	1b64      	subs	r4, r4, r5
 8005f72:	10a4      	asrs	r4, r4, #2
 8005f74:	2600      	movs	r6, #0
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	d105      	bne.n	8005f86 <__libc_init_array+0x2e>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f80:	4798      	blx	r3
 8005f82:	3601      	adds	r6, #1
 8005f84:	e7ee      	b.n	8005f64 <__libc_init_array+0xc>
 8005f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8a:	4798      	blx	r3
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	e7f2      	b.n	8005f76 <__libc_init_array+0x1e>
 8005f90:	08006f84 	.word	0x08006f84
 8005f94:	08006f84 	.word	0x08006f84
 8005f98:	08006f84 	.word	0x08006f84
 8005f9c:	08006f88 	.word	0x08006f88

08005fa0 <memcpy>:
 8005fa0:	440a      	add	r2, r1
 8005fa2:	4291      	cmp	r1, r2
 8005fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa8:	d100      	bne.n	8005fac <memcpy+0xc>
 8005faa:	4770      	bx	lr
 8005fac:	b510      	push	{r4, lr}
 8005fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	d1f9      	bne.n	8005fae <memcpy+0xe>
 8005fba:	bd10      	pop	{r4, pc}

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <iprintf>:
 8005fcc:	b40f      	push	{r0, r1, r2, r3}
 8005fce:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <iprintf+0x2c>)
 8005fd0:	b513      	push	{r0, r1, r4, lr}
 8005fd2:	681c      	ldr	r4, [r3, #0]
 8005fd4:	b124      	cbz	r4, 8005fe0 <iprintf+0x14>
 8005fd6:	69a3      	ldr	r3, [r4, #24]
 8005fd8:	b913      	cbnz	r3, 8005fe0 <iprintf+0x14>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f866 	bl	80060ac <__sinit>
 8005fe0:	ab05      	add	r3, sp, #20
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	68a1      	ldr	r1, [r4, #8]
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f983 	bl	80062f4 <_vfiprintf_r>
 8005fee:	b002      	add	sp, #8
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	b004      	add	sp, #16
 8005ff6:	4770      	bx	lr
 8005ff8:	2000002c 	.word	0x2000002c

08005ffc <std>:
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	b510      	push	{r4, lr}
 8006000:	4604      	mov	r4, r0
 8006002:	e9c0 3300 	strd	r3, r3, [r0]
 8006006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800600a:	6083      	str	r3, [r0, #8]
 800600c:	8181      	strh	r1, [r0, #12]
 800600e:	6643      	str	r3, [r0, #100]	; 0x64
 8006010:	81c2      	strh	r2, [r0, #14]
 8006012:	6183      	str	r3, [r0, #24]
 8006014:	4619      	mov	r1, r3
 8006016:	2208      	movs	r2, #8
 8006018:	305c      	adds	r0, #92	; 0x5c
 800601a:	f7ff ffcf 	bl	8005fbc <memset>
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <std+0x38>)
 8006020:	6263      	str	r3, [r4, #36]	; 0x24
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <std+0x3c>)
 8006024:	62a3      	str	r3, [r4, #40]	; 0x28
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <std+0x40>)
 8006028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <std+0x44>)
 800602c:	6224      	str	r4, [r4, #32]
 800602e:	6323      	str	r3, [r4, #48]	; 0x30
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	0800689d 	.word	0x0800689d
 8006038:	080068bf 	.word	0x080068bf
 800603c:	080068f7 	.word	0x080068f7
 8006040:	0800691b 	.word	0x0800691b

08006044 <_cleanup_r>:
 8006044:	4901      	ldr	r1, [pc, #4]	; (800604c <_cleanup_r+0x8>)
 8006046:	f000 b8af 	b.w	80061a8 <_fwalk_reent>
 800604a:	bf00      	nop
 800604c:	08006bf5 	.word	0x08006bf5

08006050 <__sfmoreglue>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	1e4a      	subs	r2, r1, #1
 8006054:	2568      	movs	r5, #104	; 0x68
 8006056:	4355      	muls	r5, r2
 8006058:	460e      	mov	r6, r1
 800605a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800605e:	f000 f8c5 	bl	80061ec <_malloc_r>
 8006062:	4604      	mov	r4, r0
 8006064:	b140      	cbz	r0, 8006078 <__sfmoreglue+0x28>
 8006066:	2100      	movs	r1, #0
 8006068:	e9c0 1600 	strd	r1, r6, [r0]
 800606c:	300c      	adds	r0, #12
 800606e:	60a0      	str	r0, [r4, #8]
 8006070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006074:	f7ff ffa2 	bl	8005fbc <memset>
 8006078:	4620      	mov	r0, r4
 800607a:	bd70      	pop	{r4, r5, r6, pc}

0800607c <__sfp_lock_acquire>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__sfp_lock_acquire+0x8>)
 800607e:	f000 b8b3 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	20004b00 	.word	0x20004b00

08006088 <__sfp_lock_release>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sfp_lock_release+0x8>)
 800608a:	f000 b8ae 	b.w	80061ea <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	20004b00 	.word	0x20004b00

08006094 <__sinit_lock_acquire>:
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <__sinit_lock_acquire+0x8>)
 8006096:	f000 b8a7 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 800609a:	bf00      	nop
 800609c:	20004afb 	.word	0x20004afb

080060a0 <__sinit_lock_release>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__sinit_lock_release+0x8>)
 80060a2:	f000 b8a2 	b.w	80061ea <__retarget_lock_release_recursive>
 80060a6:	bf00      	nop
 80060a8:	20004afb 	.word	0x20004afb

080060ac <__sinit>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4604      	mov	r4, r0
 80060b0:	f7ff fff0 	bl	8006094 <__sinit_lock_acquire>
 80060b4:	69a3      	ldr	r3, [r4, #24]
 80060b6:	b11b      	cbz	r3, 80060c0 <__sinit+0x14>
 80060b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060bc:	f7ff bff0 	b.w	80060a0 <__sinit_lock_release>
 80060c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060c4:	6523      	str	r3, [r4, #80]	; 0x50
 80060c6:	4b13      	ldr	r3, [pc, #76]	; (8006114 <__sinit+0x68>)
 80060c8:	4a13      	ldr	r2, [pc, #76]	; (8006118 <__sinit+0x6c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	bf04      	itt	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	61a3      	streq	r3, [r4, #24]
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 f820 	bl	800611c <__sfp>
 80060dc:	6060      	str	r0, [r4, #4]
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 f81c 	bl	800611c <__sfp>
 80060e4:	60a0      	str	r0, [r4, #8]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f818 	bl	800611c <__sfp>
 80060ec:	2200      	movs	r2, #0
 80060ee:	60e0      	str	r0, [r4, #12]
 80060f0:	2104      	movs	r1, #4
 80060f2:	6860      	ldr	r0, [r4, #4]
 80060f4:	f7ff ff82 	bl	8005ffc <std>
 80060f8:	68a0      	ldr	r0, [r4, #8]
 80060fa:	2201      	movs	r2, #1
 80060fc:	2109      	movs	r1, #9
 80060fe:	f7ff ff7d 	bl	8005ffc <std>
 8006102:	68e0      	ldr	r0, [r4, #12]
 8006104:	2202      	movs	r2, #2
 8006106:	2112      	movs	r1, #18
 8006108:	f7ff ff78 	bl	8005ffc <std>
 800610c:	2301      	movs	r3, #1
 800610e:	61a3      	str	r3, [r4, #24]
 8006110:	e7d2      	b.n	80060b8 <__sinit+0xc>
 8006112:	bf00      	nop
 8006114:	08006ee4 	.word	0x08006ee4
 8006118:	08006045 	.word	0x08006045

0800611c <__sfp>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	4607      	mov	r7, r0
 8006120:	f7ff ffac 	bl	800607c <__sfp_lock_acquire>
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <__sfp+0x84>)
 8006126:	681e      	ldr	r6, [r3, #0]
 8006128:	69b3      	ldr	r3, [r6, #24]
 800612a:	b913      	cbnz	r3, 8006132 <__sfp+0x16>
 800612c:	4630      	mov	r0, r6
 800612e:	f7ff ffbd 	bl	80060ac <__sinit>
 8006132:	3648      	adds	r6, #72	; 0x48
 8006134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006138:	3b01      	subs	r3, #1
 800613a:	d503      	bpl.n	8006144 <__sfp+0x28>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	b30b      	cbz	r3, 8006184 <__sfp+0x68>
 8006140:	6836      	ldr	r6, [r6, #0]
 8006142:	e7f7      	b.n	8006134 <__sfp+0x18>
 8006144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006148:	b9d5      	cbnz	r5, 8006180 <__sfp+0x64>
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <__sfp+0x88>)
 800614c:	60e3      	str	r3, [r4, #12]
 800614e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006152:	6665      	str	r5, [r4, #100]	; 0x64
 8006154:	f000 f847 	bl	80061e6 <__retarget_lock_init_recursive>
 8006158:	f7ff ff96 	bl	8006088 <__sfp_lock_release>
 800615c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006164:	6025      	str	r5, [r4, #0]
 8006166:	61a5      	str	r5, [r4, #24]
 8006168:	2208      	movs	r2, #8
 800616a:	4629      	mov	r1, r5
 800616c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006170:	f7ff ff24 	bl	8005fbc <memset>
 8006174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800617c:	4620      	mov	r0, r4
 800617e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006180:	3468      	adds	r4, #104	; 0x68
 8006182:	e7d9      	b.n	8006138 <__sfp+0x1c>
 8006184:	2104      	movs	r1, #4
 8006186:	4638      	mov	r0, r7
 8006188:	f7ff ff62 	bl	8006050 <__sfmoreglue>
 800618c:	4604      	mov	r4, r0
 800618e:	6030      	str	r0, [r6, #0]
 8006190:	2800      	cmp	r0, #0
 8006192:	d1d5      	bne.n	8006140 <__sfp+0x24>
 8006194:	f7ff ff78 	bl	8006088 <__sfp_lock_release>
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	e7ee      	b.n	800617c <__sfp+0x60>
 800619e:	bf00      	nop
 80061a0:	08006ee4 	.word	0x08006ee4
 80061a4:	ffff0001 	.word	0xffff0001

080061a8 <_fwalk_reent>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	4606      	mov	r6, r0
 80061ae:	4688      	mov	r8, r1
 80061b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061b4:	2700      	movs	r7, #0
 80061b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ba:	f1b9 0901 	subs.w	r9, r9, #1
 80061be:	d505      	bpl.n	80061cc <_fwalk_reent+0x24>
 80061c0:	6824      	ldr	r4, [r4, #0]
 80061c2:	2c00      	cmp	r4, #0
 80061c4:	d1f7      	bne.n	80061b6 <_fwalk_reent+0xe>
 80061c6:	4638      	mov	r0, r7
 80061c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061cc:	89ab      	ldrh	r3, [r5, #12]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d907      	bls.n	80061e2 <_fwalk_reent+0x3a>
 80061d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061d6:	3301      	adds	r3, #1
 80061d8:	d003      	beq.n	80061e2 <_fwalk_reent+0x3a>
 80061da:	4629      	mov	r1, r5
 80061dc:	4630      	mov	r0, r6
 80061de:	47c0      	blx	r8
 80061e0:	4307      	orrs	r7, r0
 80061e2:	3568      	adds	r5, #104	; 0x68
 80061e4:	e7e9      	b.n	80061ba <_fwalk_reent+0x12>

080061e6 <__retarget_lock_init_recursive>:
 80061e6:	4770      	bx	lr

080061e8 <__retarget_lock_acquire_recursive>:
 80061e8:	4770      	bx	lr

080061ea <__retarget_lock_release_recursive>:
 80061ea:	4770      	bx	lr

080061ec <_malloc_r>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	1ccd      	adds	r5, r1, #3
 80061f0:	f025 0503 	bic.w	r5, r5, #3
 80061f4:	3508      	adds	r5, #8
 80061f6:	2d0c      	cmp	r5, #12
 80061f8:	bf38      	it	cc
 80061fa:	250c      	movcc	r5, #12
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	4606      	mov	r6, r0
 8006200:	db01      	blt.n	8006206 <_malloc_r+0x1a>
 8006202:	42a9      	cmp	r1, r5
 8006204:	d903      	bls.n	800620e <_malloc_r+0x22>
 8006206:	230c      	movs	r3, #12
 8006208:	6033      	str	r3, [r6, #0]
 800620a:	2000      	movs	r0, #0
 800620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800620e:	f000 fda3 	bl	8006d58 <__malloc_lock>
 8006212:	4921      	ldr	r1, [pc, #132]	; (8006298 <_malloc_r+0xac>)
 8006214:	680a      	ldr	r2, [r1, #0]
 8006216:	4614      	mov	r4, r2
 8006218:	b99c      	cbnz	r4, 8006242 <_malloc_r+0x56>
 800621a:	4f20      	ldr	r7, [pc, #128]	; (800629c <_malloc_r+0xb0>)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	b923      	cbnz	r3, 800622a <_malloc_r+0x3e>
 8006220:	4621      	mov	r1, r4
 8006222:	4630      	mov	r0, r6
 8006224:	f000 fb2a 	bl	800687c <_sbrk_r>
 8006228:	6038      	str	r0, [r7, #0]
 800622a:	4629      	mov	r1, r5
 800622c:	4630      	mov	r0, r6
 800622e:	f000 fb25 	bl	800687c <_sbrk_r>
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	d123      	bne.n	800627e <_malloc_r+0x92>
 8006236:	230c      	movs	r3, #12
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	4630      	mov	r0, r6
 800623c:	f000 fd92 	bl	8006d64 <__malloc_unlock>
 8006240:	e7e3      	b.n	800620a <_malloc_r+0x1e>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	1b5b      	subs	r3, r3, r5
 8006246:	d417      	bmi.n	8006278 <_malloc_r+0x8c>
 8006248:	2b0b      	cmp	r3, #11
 800624a:	d903      	bls.n	8006254 <_malloc_r+0x68>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	441c      	add	r4, r3
 8006250:	6025      	str	r5, [r4, #0]
 8006252:	e004      	b.n	800625e <_malloc_r+0x72>
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	42a2      	cmp	r2, r4
 8006258:	bf0c      	ite	eq
 800625a:	600b      	streq	r3, [r1, #0]
 800625c:	6053      	strne	r3, [r2, #4]
 800625e:	4630      	mov	r0, r6
 8006260:	f000 fd80 	bl	8006d64 <__malloc_unlock>
 8006264:	f104 000b 	add.w	r0, r4, #11
 8006268:	1d23      	adds	r3, r4, #4
 800626a:	f020 0007 	bic.w	r0, r0, #7
 800626e:	1ac2      	subs	r2, r0, r3
 8006270:	d0cc      	beq.n	800620c <_malloc_r+0x20>
 8006272:	1a1b      	subs	r3, r3, r0
 8006274:	50a3      	str	r3, [r4, r2]
 8006276:	e7c9      	b.n	800620c <_malloc_r+0x20>
 8006278:	4622      	mov	r2, r4
 800627a:	6864      	ldr	r4, [r4, #4]
 800627c:	e7cc      	b.n	8006218 <_malloc_r+0x2c>
 800627e:	1cc4      	adds	r4, r0, #3
 8006280:	f024 0403 	bic.w	r4, r4, #3
 8006284:	42a0      	cmp	r0, r4
 8006286:	d0e3      	beq.n	8006250 <_malloc_r+0x64>
 8006288:	1a21      	subs	r1, r4, r0
 800628a:	4630      	mov	r0, r6
 800628c:	f000 faf6 	bl	800687c <_sbrk_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d1dd      	bne.n	8006250 <_malloc_r+0x64>
 8006294:	e7cf      	b.n	8006236 <_malloc_r+0x4a>
 8006296:	bf00      	nop
 8006298:	200049c0 	.word	0x200049c0
 800629c:	200049c4 	.word	0x200049c4

080062a0 <__sfputc_r>:
 80062a0:	6893      	ldr	r3, [r2, #8]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	b410      	push	{r4}
 80062a8:	6093      	str	r3, [r2, #8]
 80062aa:	da08      	bge.n	80062be <__sfputc_r+0x1e>
 80062ac:	6994      	ldr	r4, [r2, #24]
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	db01      	blt.n	80062b6 <__sfputc_r+0x16>
 80062b2:	290a      	cmp	r1, #10
 80062b4:	d103      	bne.n	80062be <__sfputc_r+0x1e>
 80062b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ba:	f000 bb33 	b.w	8006924 <__swbuf_r>
 80062be:	6813      	ldr	r3, [r2, #0]
 80062c0:	1c58      	adds	r0, r3, #1
 80062c2:	6010      	str	r0, [r2, #0]
 80062c4:	7019      	strb	r1, [r3, #0]
 80062c6:	4608      	mov	r0, r1
 80062c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <__sfputs_r>:
 80062ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d0:	4606      	mov	r6, r0
 80062d2:	460f      	mov	r7, r1
 80062d4:	4614      	mov	r4, r2
 80062d6:	18d5      	adds	r5, r2, r3
 80062d8:	42ac      	cmp	r4, r5
 80062da:	d101      	bne.n	80062e0 <__sfputs_r+0x12>
 80062dc:	2000      	movs	r0, #0
 80062de:	e007      	b.n	80062f0 <__sfputs_r+0x22>
 80062e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e4:	463a      	mov	r2, r7
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7ff ffda 	bl	80062a0 <__sfputc_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d1f3      	bne.n	80062d8 <__sfputs_r+0xa>
 80062f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062f4 <_vfiprintf_r>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	460d      	mov	r5, r1
 80062fa:	b09d      	sub	sp, #116	; 0x74
 80062fc:	4614      	mov	r4, r2
 80062fe:	4698      	mov	r8, r3
 8006300:	4606      	mov	r6, r0
 8006302:	b118      	cbz	r0, 800630c <_vfiprintf_r+0x18>
 8006304:	6983      	ldr	r3, [r0, #24]
 8006306:	b90b      	cbnz	r3, 800630c <_vfiprintf_r+0x18>
 8006308:	f7ff fed0 	bl	80060ac <__sinit>
 800630c:	4b89      	ldr	r3, [pc, #548]	; (8006534 <_vfiprintf_r+0x240>)
 800630e:	429d      	cmp	r5, r3
 8006310:	d11b      	bne.n	800634a <_vfiprintf_r+0x56>
 8006312:	6875      	ldr	r5, [r6, #4]
 8006314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006316:	07d9      	lsls	r1, r3, #31
 8006318:	d405      	bmi.n	8006326 <_vfiprintf_r+0x32>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	059a      	lsls	r2, r3, #22
 800631e:	d402      	bmi.n	8006326 <_vfiprintf_r+0x32>
 8006320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006322:	f7ff ff61 	bl	80061e8 <__retarget_lock_acquire_recursive>
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	071b      	lsls	r3, r3, #28
 800632a:	d501      	bpl.n	8006330 <_vfiprintf_r+0x3c>
 800632c:	692b      	ldr	r3, [r5, #16]
 800632e:	b9eb      	cbnz	r3, 800636c <_vfiprintf_r+0x78>
 8006330:	4629      	mov	r1, r5
 8006332:	4630      	mov	r0, r6
 8006334:	f000 fb5a 	bl	80069ec <__swsetup_r>
 8006338:	b1c0      	cbz	r0, 800636c <_vfiprintf_r+0x78>
 800633a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800633c:	07dc      	lsls	r4, r3, #31
 800633e:	d50e      	bpl.n	800635e <_vfiprintf_r+0x6a>
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	b01d      	add	sp, #116	; 0x74
 8006346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634a:	4b7b      	ldr	r3, [pc, #492]	; (8006538 <_vfiprintf_r+0x244>)
 800634c:	429d      	cmp	r5, r3
 800634e:	d101      	bne.n	8006354 <_vfiprintf_r+0x60>
 8006350:	68b5      	ldr	r5, [r6, #8]
 8006352:	e7df      	b.n	8006314 <_vfiprintf_r+0x20>
 8006354:	4b79      	ldr	r3, [pc, #484]	; (800653c <_vfiprintf_r+0x248>)
 8006356:	429d      	cmp	r5, r3
 8006358:	bf08      	it	eq
 800635a:	68f5      	ldreq	r5, [r6, #12]
 800635c:	e7da      	b.n	8006314 <_vfiprintf_r+0x20>
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	0598      	lsls	r0, r3, #22
 8006362:	d4ed      	bmi.n	8006340 <_vfiprintf_r+0x4c>
 8006364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006366:	f7ff ff40 	bl	80061ea <__retarget_lock_release_recursive>
 800636a:	e7e9      	b.n	8006340 <_vfiprintf_r+0x4c>
 800636c:	2300      	movs	r3, #0
 800636e:	9309      	str	r3, [sp, #36]	; 0x24
 8006370:	2320      	movs	r3, #32
 8006372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006376:	f8cd 800c 	str.w	r8, [sp, #12]
 800637a:	2330      	movs	r3, #48	; 0x30
 800637c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006540 <_vfiprintf_r+0x24c>
 8006380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006384:	f04f 0901 	mov.w	r9, #1
 8006388:	4623      	mov	r3, r4
 800638a:	469a      	mov	sl, r3
 800638c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006390:	b10a      	cbz	r2, 8006396 <_vfiprintf_r+0xa2>
 8006392:	2a25      	cmp	r2, #37	; 0x25
 8006394:	d1f9      	bne.n	800638a <_vfiprintf_r+0x96>
 8006396:	ebba 0b04 	subs.w	fp, sl, r4
 800639a:	d00b      	beq.n	80063b4 <_vfiprintf_r+0xc0>
 800639c:	465b      	mov	r3, fp
 800639e:	4622      	mov	r2, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7ff ff93 	bl	80062ce <__sfputs_r>
 80063a8:	3001      	adds	r0, #1
 80063aa:	f000 80aa 	beq.w	8006502 <_vfiprintf_r+0x20e>
 80063ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b0:	445a      	add	r2, fp
 80063b2:	9209      	str	r2, [sp, #36]	; 0x24
 80063b4:	f89a 3000 	ldrb.w	r3, [sl]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a2 	beq.w	8006502 <_vfiprintf_r+0x20e>
 80063be:	2300      	movs	r3, #0
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c8:	f10a 0a01 	add.w	sl, sl, #1
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063d4:	931a      	str	r3, [sp, #104]	; 0x68
 80063d6:	4654      	mov	r4, sl
 80063d8:	2205      	movs	r2, #5
 80063da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063de:	4858      	ldr	r0, [pc, #352]	; (8006540 <_vfiprintf_r+0x24c>)
 80063e0:	f7f9 fefe 	bl	80001e0 <memchr>
 80063e4:	9a04      	ldr	r2, [sp, #16]
 80063e6:	b9d8      	cbnz	r0, 8006420 <_vfiprintf_r+0x12c>
 80063e8:	06d1      	lsls	r1, r2, #27
 80063ea:	bf44      	itt	mi
 80063ec:	2320      	movmi	r3, #32
 80063ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063f2:	0713      	lsls	r3, r2, #28
 80063f4:	bf44      	itt	mi
 80063f6:	232b      	movmi	r3, #43	; 0x2b
 80063f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006400:	2b2a      	cmp	r3, #42	; 0x2a
 8006402:	d015      	beq.n	8006430 <_vfiprintf_r+0x13c>
 8006404:	9a07      	ldr	r2, [sp, #28]
 8006406:	4654      	mov	r4, sl
 8006408:	2000      	movs	r0, #0
 800640a:	f04f 0c0a 	mov.w	ip, #10
 800640e:	4621      	mov	r1, r4
 8006410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006414:	3b30      	subs	r3, #48	; 0x30
 8006416:	2b09      	cmp	r3, #9
 8006418:	d94e      	bls.n	80064b8 <_vfiprintf_r+0x1c4>
 800641a:	b1b0      	cbz	r0, 800644a <_vfiprintf_r+0x156>
 800641c:	9207      	str	r2, [sp, #28]
 800641e:	e014      	b.n	800644a <_vfiprintf_r+0x156>
 8006420:	eba0 0308 	sub.w	r3, r0, r8
 8006424:	fa09 f303 	lsl.w	r3, r9, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	46a2      	mov	sl, r4
 800642e:	e7d2      	b.n	80063d6 <_vfiprintf_r+0xe2>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	1d19      	adds	r1, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	9103      	str	r1, [sp, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	bfbb      	ittet	lt
 800643c:	425b      	neglt	r3, r3
 800643e:	f042 0202 	orrlt.w	r2, r2, #2
 8006442:	9307      	strge	r3, [sp, #28]
 8006444:	9307      	strlt	r3, [sp, #28]
 8006446:	bfb8      	it	lt
 8006448:	9204      	strlt	r2, [sp, #16]
 800644a:	7823      	ldrb	r3, [r4, #0]
 800644c:	2b2e      	cmp	r3, #46	; 0x2e
 800644e:	d10c      	bne.n	800646a <_vfiprintf_r+0x176>
 8006450:	7863      	ldrb	r3, [r4, #1]
 8006452:	2b2a      	cmp	r3, #42	; 0x2a
 8006454:	d135      	bne.n	80064c2 <_vfiprintf_r+0x1ce>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	1d1a      	adds	r2, r3, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	9203      	str	r2, [sp, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	f04f 33ff 	movlt.w	r3, #4294967295
 8006466:	3402      	adds	r4, #2
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006550 <_vfiprintf_r+0x25c>
 800646e:	7821      	ldrb	r1, [r4, #0]
 8006470:	2203      	movs	r2, #3
 8006472:	4650      	mov	r0, sl
 8006474:	f7f9 feb4 	bl	80001e0 <memchr>
 8006478:	b140      	cbz	r0, 800648c <_vfiprintf_r+0x198>
 800647a:	2340      	movs	r3, #64	; 0x40
 800647c:	eba0 000a 	sub.w	r0, r0, sl
 8006480:	fa03 f000 	lsl.w	r0, r3, r0
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	4303      	orrs	r3, r0
 8006488:	3401      	adds	r4, #1
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006490:	482c      	ldr	r0, [pc, #176]	; (8006544 <_vfiprintf_r+0x250>)
 8006492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006496:	2206      	movs	r2, #6
 8006498:	f7f9 fea2 	bl	80001e0 <memchr>
 800649c:	2800      	cmp	r0, #0
 800649e:	d03f      	beq.n	8006520 <_vfiprintf_r+0x22c>
 80064a0:	4b29      	ldr	r3, [pc, #164]	; (8006548 <_vfiprintf_r+0x254>)
 80064a2:	bb1b      	cbnz	r3, 80064ec <_vfiprintf_r+0x1f8>
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	3307      	adds	r3, #7
 80064a8:	f023 0307 	bic.w	r3, r3, #7
 80064ac:	3308      	adds	r3, #8
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b2:	443b      	add	r3, r7
 80064b4:	9309      	str	r3, [sp, #36]	; 0x24
 80064b6:	e767      	b.n	8006388 <_vfiprintf_r+0x94>
 80064b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064bc:	460c      	mov	r4, r1
 80064be:	2001      	movs	r0, #1
 80064c0:	e7a5      	b.n	800640e <_vfiprintf_r+0x11a>
 80064c2:	2300      	movs	r3, #0
 80064c4:	3401      	adds	r4, #1
 80064c6:	9305      	str	r3, [sp, #20]
 80064c8:	4619      	mov	r1, r3
 80064ca:	f04f 0c0a 	mov.w	ip, #10
 80064ce:	4620      	mov	r0, r4
 80064d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064d4:	3a30      	subs	r2, #48	; 0x30
 80064d6:	2a09      	cmp	r2, #9
 80064d8:	d903      	bls.n	80064e2 <_vfiprintf_r+0x1ee>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0c5      	beq.n	800646a <_vfiprintf_r+0x176>
 80064de:	9105      	str	r1, [sp, #20]
 80064e0:	e7c3      	b.n	800646a <_vfiprintf_r+0x176>
 80064e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e6:	4604      	mov	r4, r0
 80064e8:	2301      	movs	r3, #1
 80064ea:	e7f0      	b.n	80064ce <_vfiprintf_r+0x1da>
 80064ec:	ab03      	add	r3, sp, #12
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	462a      	mov	r2, r5
 80064f2:	4b16      	ldr	r3, [pc, #88]	; (800654c <_vfiprintf_r+0x258>)
 80064f4:	a904      	add	r1, sp, #16
 80064f6:	4630      	mov	r0, r6
 80064f8:	f3af 8000 	nop.w
 80064fc:	4607      	mov	r7, r0
 80064fe:	1c78      	adds	r0, r7, #1
 8006500:	d1d6      	bne.n	80064b0 <_vfiprintf_r+0x1bc>
 8006502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006504:	07d9      	lsls	r1, r3, #31
 8006506:	d405      	bmi.n	8006514 <_vfiprintf_r+0x220>
 8006508:	89ab      	ldrh	r3, [r5, #12]
 800650a:	059a      	lsls	r2, r3, #22
 800650c:	d402      	bmi.n	8006514 <_vfiprintf_r+0x220>
 800650e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006510:	f7ff fe6b 	bl	80061ea <__retarget_lock_release_recursive>
 8006514:	89ab      	ldrh	r3, [r5, #12]
 8006516:	065b      	lsls	r3, r3, #25
 8006518:	f53f af12 	bmi.w	8006340 <_vfiprintf_r+0x4c>
 800651c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651e:	e711      	b.n	8006344 <_vfiprintf_r+0x50>
 8006520:	ab03      	add	r3, sp, #12
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	462a      	mov	r2, r5
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <_vfiprintf_r+0x258>)
 8006528:	a904      	add	r1, sp, #16
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f880 	bl	8006630 <_printf_i>
 8006530:	e7e4      	b.n	80064fc <_vfiprintf_r+0x208>
 8006532:	bf00      	nop
 8006534:	08006f08 	.word	0x08006f08
 8006538:	08006f28 	.word	0x08006f28
 800653c:	08006ee8 	.word	0x08006ee8
 8006540:	08006f48 	.word	0x08006f48
 8006544:	08006f52 	.word	0x08006f52
 8006548:	00000000 	.word	0x00000000
 800654c:	080062cf 	.word	0x080062cf
 8006550:	08006f4e 	.word	0x08006f4e

08006554 <_printf_common>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	4616      	mov	r6, r2
 800655a:	4699      	mov	r9, r3
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006564:	4293      	cmp	r3, r2
 8006566:	bfb8      	it	lt
 8006568:	4613      	movlt	r3, r2
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006570:	4607      	mov	r7, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b10a      	cbz	r2, 800657a <_printf_common+0x26>
 8006576:	3301      	adds	r3, #1
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	0699      	lsls	r1, r3, #26
 800657e:	bf42      	ittt	mi
 8006580:	6833      	ldrmi	r3, [r6, #0]
 8006582:	3302      	addmi	r3, #2
 8006584:	6033      	strmi	r3, [r6, #0]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d106      	bne.n	800659c <_printf_common+0x48>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	6832      	ldr	r2, [r6, #0]
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc26      	bgt.n	80065ea <_printf_common+0x96>
 800659c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065a0:	1e13      	subs	r3, r2, #0
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	bf18      	it	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	0692      	lsls	r2, r2, #26
 80065aa:	d42b      	bmi.n	8006604 <_printf_common+0xb0>
 80065ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065b0:	4649      	mov	r1, r9
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c0      	blx	r8
 80065b6:	3001      	adds	r0, #1
 80065b8:	d01e      	beq.n	80065f8 <_printf_common+0xa4>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	68e5      	ldr	r5, [r4, #12]
 80065be:	6832      	ldr	r2, [r6, #0]
 80065c0:	f003 0306 	and.w	r3, r3, #6
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	bf08      	it	eq
 80065c8:	1aad      	subeq	r5, r5, r2
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	6922      	ldr	r2, [r4, #16]
 80065ce:	bf0c      	ite	eq
 80065d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d4:	2500      	movne	r5, #0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bfc4      	itt	gt
 80065da:	1a9b      	subgt	r3, r3, r2
 80065dc:	18ed      	addgt	r5, r5, r3
 80065de:	2600      	movs	r6, #0
 80065e0:	341a      	adds	r4, #26
 80065e2:	42b5      	cmp	r5, r6
 80065e4:	d11a      	bne.n	800661c <_printf_common+0xc8>
 80065e6:	2000      	movs	r0, #0
 80065e8:	e008      	b.n	80065fc <_printf_common+0xa8>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4652      	mov	r2, sl
 80065ee:	4649      	mov	r1, r9
 80065f0:	4638      	mov	r0, r7
 80065f2:	47c0      	blx	r8
 80065f4:	3001      	adds	r0, #1
 80065f6:	d103      	bne.n	8006600 <_printf_common+0xac>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	3501      	adds	r5, #1
 8006602:	e7c6      	b.n	8006592 <_printf_common+0x3e>
 8006604:	18e1      	adds	r1, r4, r3
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	2030      	movs	r0, #48	; 0x30
 800660a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800660e:	4422      	add	r2, r4
 8006610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006618:	3302      	adds	r3, #2
 800661a:	e7c7      	b.n	80065ac <_printf_common+0x58>
 800661c:	2301      	movs	r3, #1
 800661e:	4622      	mov	r2, r4
 8006620:	4649      	mov	r1, r9
 8006622:	4638      	mov	r0, r7
 8006624:	47c0      	blx	r8
 8006626:	3001      	adds	r0, #1
 8006628:	d0e6      	beq.n	80065f8 <_printf_common+0xa4>
 800662a:	3601      	adds	r6, #1
 800662c:	e7d9      	b.n	80065e2 <_printf_common+0x8e>
	...

08006630 <_printf_i>:
 8006630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	4691      	mov	r9, r2
 8006638:	7e27      	ldrb	r7, [r4, #24]
 800663a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800663c:	2f78      	cmp	r7, #120	; 0x78
 800663e:	4680      	mov	r8, r0
 8006640:	469a      	mov	sl, r3
 8006642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006646:	d807      	bhi.n	8006658 <_printf_i+0x28>
 8006648:	2f62      	cmp	r7, #98	; 0x62
 800664a:	d80a      	bhi.n	8006662 <_printf_i+0x32>
 800664c:	2f00      	cmp	r7, #0
 800664e:	f000 80d8 	beq.w	8006802 <_printf_i+0x1d2>
 8006652:	2f58      	cmp	r7, #88	; 0x58
 8006654:	f000 80a3 	beq.w	800679e <_printf_i+0x16e>
 8006658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800665c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006660:	e03a      	b.n	80066d8 <_printf_i+0xa8>
 8006662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006666:	2b15      	cmp	r3, #21
 8006668:	d8f6      	bhi.n	8006658 <_printf_i+0x28>
 800666a:	a001      	add	r0, pc, #4	; (adr r0, 8006670 <_printf_i+0x40>)
 800666c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066dd 	.word	0x080066dd
 8006678:	08006659 	.word	0x08006659
 800667c:	08006659 	.word	0x08006659
 8006680:	08006659 	.word	0x08006659
 8006684:	08006659 	.word	0x08006659
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006659 	.word	0x08006659
 8006690:	08006659 	.word	0x08006659
 8006694:	08006659 	.word	0x08006659
 8006698:	08006659 	.word	0x08006659
 800669c:	080067e9 	.word	0x080067e9
 80066a0:	0800670d 	.word	0x0800670d
 80066a4:	080067cb 	.word	0x080067cb
 80066a8:	08006659 	.word	0x08006659
 80066ac:	08006659 	.word	0x08006659
 80066b0:	0800680b 	.word	0x0800680b
 80066b4:	08006659 	.word	0x08006659
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	08006659 	.word	0x08006659
 80066c0:	08006659 	.word	0x08006659
 80066c4:	080067d3 	.word	0x080067d3
 80066c8:	680b      	ldr	r3, [r1, #0]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	600a      	str	r2, [r1, #0]
 80066d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e0a3      	b.n	8006824 <_printf_i+0x1f4>
 80066dc:	6825      	ldr	r5, [r4, #0]
 80066de:	6808      	ldr	r0, [r1, #0]
 80066e0:	062e      	lsls	r6, r5, #24
 80066e2:	f100 0304 	add.w	r3, r0, #4
 80066e6:	d50a      	bpl.n	80066fe <_printf_i+0xce>
 80066e8:	6805      	ldr	r5, [r0, #0]
 80066ea:	600b      	str	r3, [r1, #0]
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	da03      	bge.n	80066f8 <_printf_i+0xc8>
 80066f0:	232d      	movs	r3, #45	; 0x2d
 80066f2:	426d      	negs	r5, r5
 80066f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f8:	485e      	ldr	r0, [pc, #376]	; (8006874 <_printf_i+0x244>)
 80066fa:	230a      	movs	r3, #10
 80066fc:	e019      	b.n	8006732 <_printf_i+0x102>
 80066fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006702:	6805      	ldr	r5, [r0, #0]
 8006704:	600b      	str	r3, [r1, #0]
 8006706:	bf18      	it	ne
 8006708:	b22d      	sxthne	r5, r5
 800670a:	e7ef      	b.n	80066ec <_printf_i+0xbc>
 800670c:	680b      	ldr	r3, [r1, #0]
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	1d18      	adds	r0, r3, #4
 8006712:	6008      	str	r0, [r1, #0]
 8006714:	0628      	lsls	r0, r5, #24
 8006716:	d501      	bpl.n	800671c <_printf_i+0xec>
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	e002      	b.n	8006722 <_printf_i+0xf2>
 800671c:	0669      	lsls	r1, r5, #25
 800671e:	d5fb      	bpl.n	8006718 <_printf_i+0xe8>
 8006720:	881d      	ldrh	r5, [r3, #0]
 8006722:	4854      	ldr	r0, [pc, #336]	; (8006874 <_printf_i+0x244>)
 8006724:	2f6f      	cmp	r7, #111	; 0x6f
 8006726:	bf0c      	ite	eq
 8006728:	2308      	moveq	r3, #8
 800672a:	230a      	movne	r3, #10
 800672c:	2100      	movs	r1, #0
 800672e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006732:	6866      	ldr	r6, [r4, #4]
 8006734:	60a6      	str	r6, [r4, #8]
 8006736:	2e00      	cmp	r6, #0
 8006738:	bfa2      	ittt	ge
 800673a:	6821      	ldrge	r1, [r4, #0]
 800673c:	f021 0104 	bicge.w	r1, r1, #4
 8006740:	6021      	strge	r1, [r4, #0]
 8006742:	b90d      	cbnz	r5, 8006748 <_printf_i+0x118>
 8006744:	2e00      	cmp	r6, #0
 8006746:	d04d      	beq.n	80067e4 <_printf_i+0x1b4>
 8006748:	4616      	mov	r6, r2
 800674a:	fbb5 f1f3 	udiv	r1, r5, r3
 800674e:	fb03 5711 	mls	r7, r3, r1, r5
 8006752:	5dc7      	ldrb	r7, [r0, r7]
 8006754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006758:	462f      	mov	r7, r5
 800675a:	42bb      	cmp	r3, r7
 800675c:	460d      	mov	r5, r1
 800675e:	d9f4      	bls.n	800674a <_printf_i+0x11a>
 8006760:	2b08      	cmp	r3, #8
 8006762:	d10b      	bne.n	800677c <_printf_i+0x14c>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	07df      	lsls	r7, r3, #31
 8006768:	d508      	bpl.n	800677c <_printf_i+0x14c>
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	6861      	ldr	r1, [r4, #4]
 800676e:	4299      	cmp	r1, r3
 8006770:	bfde      	ittt	le
 8006772:	2330      	movle	r3, #48	; 0x30
 8006774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800677c:	1b92      	subs	r2, r2, r6
 800677e:	6122      	str	r2, [r4, #16]
 8006780:	f8cd a000 	str.w	sl, [sp]
 8006784:	464b      	mov	r3, r9
 8006786:	aa03      	add	r2, sp, #12
 8006788:	4621      	mov	r1, r4
 800678a:	4640      	mov	r0, r8
 800678c:	f7ff fee2 	bl	8006554 <_printf_common>
 8006790:	3001      	adds	r0, #1
 8006792:	d14c      	bne.n	800682e <_printf_i+0x1fe>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	b004      	add	sp, #16
 800679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679e:	4835      	ldr	r0, [pc, #212]	; (8006874 <_printf_i+0x244>)
 80067a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	680e      	ldr	r6, [r1, #0]
 80067a8:	061f      	lsls	r7, r3, #24
 80067aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80067ae:	600e      	str	r6, [r1, #0]
 80067b0:	d514      	bpl.n	80067dc <_printf_i+0x1ac>
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	bf44      	itt	mi
 80067b6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ba:	6023      	strmi	r3, [r4, #0]
 80067bc:	b91d      	cbnz	r5, 80067c6 <_printf_i+0x196>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	f023 0320 	bic.w	r3, r3, #32
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	2310      	movs	r3, #16
 80067c8:	e7b0      	b.n	800672c <_printf_i+0xfc>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f043 0320 	orr.w	r3, r3, #32
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	2378      	movs	r3, #120	; 0x78
 80067d4:	4828      	ldr	r0, [pc, #160]	; (8006878 <_printf_i+0x248>)
 80067d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067da:	e7e3      	b.n	80067a4 <_printf_i+0x174>
 80067dc:	065e      	lsls	r6, r3, #25
 80067de:	bf48      	it	mi
 80067e0:	b2ad      	uxthmi	r5, r5
 80067e2:	e7e6      	b.n	80067b2 <_printf_i+0x182>
 80067e4:	4616      	mov	r6, r2
 80067e6:	e7bb      	b.n	8006760 <_printf_i+0x130>
 80067e8:	680b      	ldr	r3, [r1, #0]
 80067ea:	6826      	ldr	r6, [r4, #0]
 80067ec:	6960      	ldr	r0, [r4, #20]
 80067ee:	1d1d      	adds	r5, r3, #4
 80067f0:	600d      	str	r5, [r1, #0]
 80067f2:	0635      	lsls	r5, r6, #24
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	d501      	bpl.n	80067fc <_printf_i+0x1cc>
 80067f8:	6018      	str	r0, [r3, #0]
 80067fa:	e002      	b.n	8006802 <_printf_i+0x1d2>
 80067fc:	0671      	lsls	r1, r6, #25
 80067fe:	d5fb      	bpl.n	80067f8 <_printf_i+0x1c8>
 8006800:	8018      	strh	r0, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	4616      	mov	r6, r2
 8006808:	e7ba      	b.n	8006780 <_printf_i+0x150>
 800680a:	680b      	ldr	r3, [r1, #0]
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	600a      	str	r2, [r1, #0]
 8006810:	681e      	ldr	r6, [r3, #0]
 8006812:	6862      	ldr	r2, [r4, #4]
 8006814:	2100      	movs	r1, #0
 8006816:	4630      	mov	r0, r6
 8006818:	f7f9 fce2 	bl	80001e0 <memchr>
 800681c:	b108      	cbz	r0, 8006822 <_printf_i+0x1f2>
 800681e:	1b80      	subs	r0, r0, r6
 8006820:	6060      	str	r0, [r4, #4]
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	2300      	movs	r3, #0
 8006828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682c:	e7a8      	b.n	8006780 <_printf_i+0x150>
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	4640      	mov	r0, r8
 8006836:	47d0      	blx	sl
 8006838:	3001      	adds	r0, #1
 800683a:	d0ab      	beq.n	8006794 <_printf_i+0x164>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	079b      	lsls	r3, r3, #30
 8006840:	d413      	bmi.n	800686a <_printf_i+0x23a>
 8006842:	68e0      	ldr	r0, [r4, #12]
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	4298      	cmp	r0, r3
 8006848:	bfb8      	it	lt
 800684a:	4618      	movlt	r0, r3
 800684c:	e7a4      	b.n	8006798 <_printf_i+0x168>
 800684e:	2301      	movs	r3, #1
 8006850:	4632      	mov	r2, r6
 8006852:	4649      	mov	r1, r9
 8006854:	4640      	mov	r0, r8
 8006856:	47d0      	blx	sl
 8006858:	3001      	adds	r0, #1
 800685a:	d09b      	beq.n	8006794 <_printf_i+0x164>
 800685c:	3501      	adds	r5, #1
 800685e:	68e3      	ldr	r3, [r4, #12]
 8006860:	9903      	ldr	r1, [sp, #12]
 8006862:	1a5b      	subs	r3, r3, r1
 8006864:	42ab      	cmp	r3, r5
 8006866:	dcf2      	bgt.n	800684e <_printf_i+0x21e>
 8006868:	e7eb      	b.n	8006842 <_printf_i+0x212>
 800686a:	2500      	movs	r5, #0
 800686c:	f104 0619 	add.w	r6, r4, #25
 8006870:	e7f5      	b.n	800685e <_printf_i+0x22e>
 8006872:	bf00      	nop
 8006874:	08006f59 	.word	0x08006f59
 8006878:	08006f6a 	.word	0x08006f6a

0800687c <_sbrk_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4d06      	ldr	r5, [pc, #24]	; (8006898 <_sbrk_r+0x1c>)
 8006880:	2300      	movs	r3, #0
 8006882:	4604      	mov	r4, r0
 8006884:	4608      	mov	r0, r1
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	f7fa fb4a 	bl	8000f20 <_sbrk>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d102      	bne.n	8006896 <_sbrk_r+0x1a>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	b103      	cbz	r3, 8006896 <_sbrk_r+0x1a>
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	20004b04 	.word	0x20004b04

0800689c <__sread>:
 800689c:	b510      	push	{r4, lr}
 800689e:	460c      	mov	r4, r1
 80068a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a4:	f000 fab4 	bl	8006e10 <_read_r>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	bfab      	itete	ge
 80068ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ae:	89a3      	ldrhlt	r3, [r4, #12]
 80068b0:	181b      	addge	r3, r3, r0
 80068b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068b6:	bfac      	ite	ge
 80068b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ba:	81a3      	strhlt	r3, [r4, #12]
 80068bc:	bd10      	pop	{r4, pc}

080068be <__swrite>:
 80068be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	461f      	mov	r7, r3
 80068c4:	898b      	ldrh	r3, [r1, #12]
 80068c6:	05db      	lsls	r3, r3, #23
 80068c8:	4605      	mov	r5, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	4616      	mov	r6, r2
 80068ce:	d505      	bpl.n	80068dc <__swrite+0x1e>
 80068d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d4:	2302      	movs	r3, #2
 80068d6:	2200      	movs	r2, #0
 80068d8:	f000 f9c8 	bl	8006c6c <_lseek_r>
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	4632      	mov	r2, r6
 80068ea:	463b      	mov	r3, r7
 80068ec:	4628      	mov	r0, r5
 80068ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f2:	f000 b869 	b.w	80069c8 <_write_r>

080068f6 <__sseek>:
 80068f6:	b510      	push	{r4, lr}
 80068f8:	460c      	mov	r4, r1
 80068fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fe:	f000 f9b5 	bl	8006c6c <_lseek_r>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	bf15      	itete	ne
 8006908:	6560      	strne	r0, [r4, #84]	; 0x54
 800690a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800690e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006912:	81a3      	strheq	r3, [r4, #12]
 8006914:	bf18      	it	ne
 8006916:	81a3      	strhne	r3, [r4, #12]
 8006918:	bd10      	pop	{r4, pc}

0800691a <__sclose>:
 800691a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691e:	f000 b8d3 	b.w	8006ac8 <_close_r>
	...

08006924 <__swbuf_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	460e      	mov	r6, r1
 8006928:	4614      	mov	r4, r2
 800692a:	4605      	mov	r5, r0
 800692c:	b118      	cbz	r0, 8006936 <__swbuf_r+0x12>
 800692e:	6983      	ldr	r3, [r0, #24]
 8006930:	b90b      	cbnz	r3, 8006936 <__swbuf_r+0x12>
 8006932:	f7ff fbbb 	bl	80060ac <__sinit>
 8006936:	4b21      	ldr	r3, [pc, #132]	; (80069bc <__swbuf_r+0x98>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d12b      	bne.n	8006994 <__swbuf_r+0x70>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	69a3      	ldr	r3, [r4, #24]
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	071a      	lsls	r2, r3, #28
 8006946:	d52f      	bpl.n	80069a8 <__swbuf_r+0x84>
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	b36b      	cbz	r3, 80069a8 <__swbuf_r+0x84>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	1ac0      	subs	r0, r0, r3
 8006952:	6963      	ldr	r3, [r4, #20]
 8006954:	b2f6      	uxtb	r6, r6
 8006956:	4283      	cmp	r3, r0
 8006958:	4637      	mov	r7, r6
 800695a:	dc04      	bgt.n	8006966 <__swbuf_r+0x42>
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f948 	bl	8006bf4 <_fflush_r>
 8006964:	bb30      	cbnz	r0, 80069b4 <__swbuf_r+0x90>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	3b01      	subs	r3, #1
 800696a:	60a3      	str	r3, [r4, #8]
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	701e      	strb	r6, [r3, #0]
 8006974:	6963      	ldr	r3, [r4, #20]
 8006976:	3001      	adds	r0, #1
 8006978:	4283      	cmp	r3, r0
 800697a:	d004      	beq.n	8006986 <__swbuf_r+0x62>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	07db      	lsls	r3, r3, #31
 8006980:	d506      	bpl.n	8006990 <__swbuf_r+0x6c>
 8006982:	2e0a      	cmp	r6, #10
 8006984:	d104      	bne.n	8006990 <__swbuf_r+0x6c>
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f933 	bl	8006bf4 <_fflush_r>
 800698e:	b988      	cbnz	r0, 80069b4 <__swbuf_r+0x90>
 8006990:	4638      	mov	r0, r7
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <__swbuf_r+0x9c>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d101      	bne.n	800699e <__swbuf_r+0x7a>
 800699a:	68ac      	ldr	r4, [r5, #8]
 800699c:	e7cf      	b.n	800693e <__swbuf_r+0x1a>
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <__swbuf_r+0xa0>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	bf08      	it	eq
 80069a4:	68ec      	ldreq	r4, [r5, #12]
 80069a6:	e7ca      	b.n	800693e <__swbuf_r+0x1a>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f81e 	bl	80069ec <__swsetup_r>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d0cb      	beq.n	800694c <__swbuf_r+0x28>
 80069b4:	f04f 37ff 	mov.w	r7, #4294967295
 80069b8:	e7ea      	b.n	8006990 <__swbuf_r+0x6c>
 80069ba:	bf00      	nop
 80069bc:	08006f08 	.word	0x08006f08
 80069c0:	08006f28 	.word	0x08006f28
 80069c4:	08006ee8 	.word	0x08006ee8

080069c8 <_write_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	; (80069e8 <_write_r+0x20>)
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fa fa51 	bl	8000e7e <_write>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_write_r+0x1e>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_write_r+0x1e>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20004b04 	.word	0x20004b04

080069ec <__swsetup_r>:
 80069ec:	4b32      	ldr	r3, [pc, #200]	; (8006ab8 <__swsetup_r+0xcc>)
 80069ee:	b570      	push	{r4, r5, r6, lr}
 80069f0:	681d      	ldr	r5, [r3, #0]
 80069f2:	4606      	mov	r6, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	b125      	cbz	r5, 8006a02 <__swsetup_r+0x16>
 80069f8:	69ab      	ldr	r3, [r5, #24]
 80069fa:	b913      	cbnz	r3, 8006a02 <__swsetup_r+0x16>
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7ff fb55 	bl	80060ac <__sinit>
 8006a02:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <__swsetup_r+0xd0>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d10f      	bne.n	8006a28 <__swsetup_r+0x3c>
 8006a08:	686c      	ldr	r4, [r5, #4]
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a10:	0719      	lsls	r1, r3, #28
 8006a12:	d42c      	bmi.n	8006a6e <__swsetup_r+0x82>
 8006a14:	06dd      	lsls	r5, r3, #27
 8006a16:	d411      	bmi.n	8006a3c <__swsetup_r+0x50>
 8006a18:	2309      	movs	r3, #9
 8006a1a:	6033      	str	r3, [r6, #0]
 8006a1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	e03e      	b.n	8006aa6 <__swsetup_r+0xba>
 8006a28:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <__swsetup_r+0xd4>)
 8006a2a:	429c      	cmp	r4, r3
 8006a2c:	d101      	bne.n	8006a32 <__swsetup_r+0x46>
 8006a2e:	68ac      	ldr	r4, [r5, #8]
 8006a30:	e7eb      	b.n	8006a0a <__swsetup_r+0x1e>
 8006a32:	4b24      	ldr	r3, [pc, #144]	; (8006ac4 <__swsetup_r+0xd8>)
 8006a34:	429c      	cmp	r4, r3
 8006a36:	bf08      	it	eq
 8006a38:	68ec      	ldreq	r4, [r5, #12]
 8006a3a:	e7e6      	b.n	8006a0a <__swsetup_r+0x1e>
 8006a3c:	0758      	lsls	r0, r3, #29
 8006a3e:	d512      	bpl.n	8006a66 <__swsetup_r+0x7a>
 8006a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a42:	b141      	cbz	r1, 8006a56 <__swsetup_r+0x6a>
 8006a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a48:	4299      	cmp	r1, r3
 8006a4a:	d002      	beq.n	8006a52 <__swsetup_r+0x66>
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 f98f 	bl	8006d70 <_free_r>
 8006a52:	2300      	movs	r3, #0
 8006a54:	6363      	str	r3, [r4, #52]	; 0x34
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f043 0308 	orr.w	r3, r3, #8
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	b94b      	cbnz	r3, 8006a86 <__swsetup_r+0x9a>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7c:	d003      	beq.n	8006a86 <__swsetup_r+0x9a>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4630      	mov	r0, r6
 8006a82:	f000 f929 	bl	8006cd8 <__smakebuf_r>
 8006a86:	89a0      	ldrh	r0, [r4, #12]
 8006a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a8c:	f010 0301 	ands.w	r3, r0, #1
 8006a90:	d00a      	beq.n	8006aa8 <__swsetup_r+0xbc>
 8006a92:	2300      	movs	r3, #0
 8006a94:	60a3      	str	r3, [r4, #8]
 8006a96:	6963      	ldr	r3, [r4, #20]
 8006a98:	425b      	negs	r3, r3
 8006a9a:	61a3      	str	r3, [r4, #24]
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	b943      	cbnz	r3, 8006ab2 <__swsetup_r+0xc6>
 8006aa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aa4:	d1ba      	bne.n	8006a1c <__swsetup_r+0x30>
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	0781      	lsls	r1, r0, #30
 8006aaa:	bf58      	it	pl
 8006aac:	6963      	ldrpl	r3, [r4, #20]
 8006aae:	60a3      	str	r3, [r4, #8]
 8006ab0:	e7f4      	b.n	8006a9c <__swsetup_r+0xb0>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e7f7      	b.n	8006aa6 <__swsetup_r+0xba>
 8006ab6:	bf00      	nop
 8006ab8:	2000002c 	.word	0x2000002c
 8006abc:	08006f08 	.word	0x08006f08
 8006ac0:	08006f28 	.word	0x08006f28
 8006ac4:	08006ee8 	.word	0x08006ee8

08006ac8 <_close_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d06      	ldr	r5, [pc, #24]	; (8006ae4 <_close_r+0x1c>)
 8006acc:	2300      	movs	r3, #0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f7fa f9ef 	bl	8000eb6 <_close>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_close_r+0x1a>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_close_r+0x1a>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20004b04 	.word	0x20004b04

08006ae8 <__sflush_r>:
 8006ae8:	898a      	ldrh	r2, [r1, #12]
 8006aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	0710      	lsls	r0, r2, #28
 8006af2:	460c      	mov	r4, r1
 8006af4:	d458      	bmi.n	8006ba8 <__sflush_r+0xc0>
 8006af6:	684b      	ldr	r3, [r1, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dc05      	bgt.n	8006b08 <__sflush_r+0x20>
 8006afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dc02      	bgt.n	8006b08 <__sflush_r+0x20>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d0f9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b14:	682f      	ldr	r7, [r5, #0]
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	d032      	beq.n	8006b80 <__sflush_r+0x98>
 8006b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	075a      	lsls	r2, r3, #29
 8006b20:	d505      	bpl.n	8006b2e <__sflush_r+0x46>
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	1ac0      	subs	r0, r0, r3
 8006b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b28:	b10b      	cbz	r3, 8006b2e <__sflush_r+0x46>
 8006b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b2c:	1ac0      	subs	r0, r0, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4602      	mov	r2, r0
 8006b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b34:	6a21      	ldr	r1, [r4, #32]
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b0      	blx	r6
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	d106      	bne.n	8006b4e <__sflush_r+0x66>
 8006b40:	6829      	ldr	r1, [r5, #0]
 8006b42:	291d      	cmp	r1, #29
 8006b44:	d82c      	bhi.n	8006ba0 <__sflush_r+0xb8>
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <__sflush_r+0x108>)
 8006b48:	40ca      	lsrs	r2, r1
 8006b4a:	07d6      	lsls	r6, r2, #31
 8006b4c:	d528      	bpl.n	8006ba0 <__sflush_r+0xb8>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6062      	str	r2, [r4, #4]
 8006b52:	04d9      	lsls	r1, r3, #19
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	d504      	bpl.n	8006b64 <__sflush_r+0x7c>
 8006b5a:	1c42      	adds	r2, r0, #1
 8006b5c:	d101      	bne.n	8006b62 <__sflush_r+0x7a>
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	b903      	cbnz	r3, 8006b64 <__sflush_r+0x7c>
 8006b62:	6560      	str	r0, [r4, #84]	; 0x54
 8006b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b66:	602f      	str	r7, [r5, #0]
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d0ca      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <__sflush_r+0x92>
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f8fb 	bl	8006d70 <_free_r>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b7e:	e7c1      	b.n	8006b04 <__sflush_r+0x1c>
 8006b80:	6a21      	ldr	r1, [r4, #32]
 8006b82:	2301      	movs	r3, #1
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	1c41      	adds	r1, r0, #1
 8006b8a:	d1c7      	bne.n	8006b1c <__sflush_r+0x34>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0c4      	beq.n	8006b1c <__sflush_r+0x34>
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d001      	beq.n	8006b9a <__sflush_r+0xb2>
 8006b96:	2b16      	cmp	r3, #22
 8006b98:	d101      	bne.n	8006b9e <__sflush_r+0xb6>
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	e7b1      	b.n	8006b02 <__sflush_r+0x1a>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	e7ad      	b.n	8006b04 <__sflush_r+0x1c>
 8006ba8:	690f      	ldr	r7, [r1, #16]
 8006baa:	2f00      	cmp	r7, #0
 8006bac:	d0a9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006bae:	0793      	lsls	r3, r2, #30
 8006bb0:	680e      	ldr	r6, [r1, #0]
 8006bb2:	bf08      	it	eq
 8006bb4:	694b      	ldreq	r3, [r1, #20]
 8006bb6:	600f      	str	r7, [r1, #0]
 8006bb8:	bf18      	it	ne
 8006bba:	2300      	movne	r3, #0
 8006bbc:	eba6 0807 	sub.w	r8, r6, r7
 8006bc0:	608b      	str	r3, [r1, #8]
 8006bc2:	f1b8 0f00 	cmp.w	r8, #0
 8006bc6:	dd9c      	ble.n	8006b02 <__sflush_r+0x1a>
 8006bc8:	6a21      	ldr	r1, [r4, #32]
 8006bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bcc:	4643      	mov	r3, r8
 8006bce:	463a      	mov	r2, r7
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	dc06      	bgt.n	8006be6 <__sflush_r+0xfe>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e78e      	b.n	8006b04 <__sflush_r+0x1c>
 8006be6:	4407      	add	r7, r0
 8006be8:	eba8 0800 	sub.w	r8, r8, r0
 8006bec:	e7e9      	b.n	8006bc2 <__sflush_r+0xda>
 8006bee:	bf00      	nop
 8006bf0:	20400001 	.word	0x20400001

08006bf4 <_fflush_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	690b      	ldr	r3, [r1, #16]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b913      	cbnz	r3, 8006c04 <_fflush_r+0x10>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	4628      	mov	r0, r5
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	b118      	cbz	r0, 8006c0e <_fflush_r+0x1a>
 8006c06:	6983      	ldr	r3, [r0, #24]
 8006c08:	b90b      	cbnz	r3, 8006c0e <_fflush_r+0x1a>
 8006c0a:	f7ff fa4f 	bl	80060ac <__sinit>
 8006c0e:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <_fflush_r+0x6c>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d11b      	bne.n	8006c4c <_fflush_r+0x58>
 8006c14:	686c      	ldr	r4, [r5, #4]
 8006c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0ef      	beq.n	8006bfe <_fflush_r+0xa>
 8006c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c20:	07d0      	lsls	r0, r2, #31
 8006c22:	d404      	bmi.n	8006c2e <_fflush_r+0x3a>
 8006c24:	0599      	lsls	r1, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_fflush_r+0x3a>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f7ff fadd 	bl	80061e8 <__retarget_lock_acquire_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	4621      	mov	r1, r4
 8006c32:	f7ff ff59 	bl	8006ae8 <__sflush_r>
 8006c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c38:	07da      	lsls	r2, r3, #31
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	d4e0      	bmi.n	8006c00 <_fflush_r+0xc>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	059b      	lsls	r3, r3, #22
 8006c42:	d4dd      	bmi.n	8006c00 <_fflush_r+0xc>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f7ff fad0 	bl	80061ea <__retarget_lock_release_recursive>
 8006c4a:	e7d9      	b.n	8006c00 <_fflush_r+0xc>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <_fflush_r+0x70>)
 8006c4e:	429c      	cmp	r4, r3
 8006c50:	d101      	bne.n	8006c56 <_fflush_r+0x62>
 8006c52:	68ac      	ldr	r4, [r5, #8]
 8006c54:	e7df      	b.n	8006c16 <_fflush_r+0x22>
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <_fflush_r+0x74>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	bf08      	it	eq
 8006c5c:	68ec      	ldreq	r4, [r5, #12]
 8006c5e:	e7da      	b.n	8006c16 <_fflush_r+0x22>
 8006c60:	08006f08 	.word	0x08006f08
 8006c64:	08006f28 	.word	0x08006f28
 8006c68:	08006ee8 	.word	0x08006ee8

08006c6c <_lseek_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d07      	ldr	r5, [pc, #28]	; (8006c8c <_lseek_r+0x20>)
 8006c70:	4604      	mov	r4, r0
 8006c72:	4608      	mov	r0, r1
 8006c74:	4611      	mov	r1, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7fa f942 	bl	8000f04 <_lseek>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_lseek_r+0x1e>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_lseek_r+0x1e>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20004b04 	.word	0x20004b04

08006c90 <__swhatbuf_r>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	460e      	mov	r6, r1
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	b096      	sub	sp, #88	; 0x58
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	da07      	bge.n	8006cb2 <__swhatbuf_r+0x22>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	89b3      	ldrh	r3, [r6, #12]
 8006ca8:	061a      	lsls	r2, r3, #24
 8006caa:	d410      	bmi.n	8006cce <__swhatbuf_r+0x3e>
 8006cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cb0:	e00e      	b.n	8006cd0 <__swhatbuf_r+0x40>
 8006cb2:	466a      	mov	r2, sp
 8006cb4:	f000 f8be 	bl	8006e34 <_fstat_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	dbf2      	blt.n	8006ca2 <__swhatbuf_r+0x12>
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cc6:	425a      	negs	r2, r3
 8006cc8:	415a      	adcs	r2, r3
 8006cca:	602a      	str	r2, [r5, #0]
 8006ccc:	e7ee      	b.n	8006cac <__swhatbuf_r+0x1c>
 8006cce:	2340      	movs	r3, #64	; 0x40
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	b016      	add	sp, #88	; 0x58
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}

08006cd8 <__smakebuf_r>:
 8006cd8:	898b      	ldrh	r3, [r1, #12]
 8006cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cdc:	079d      	lsls	r5, r3, #30
 8006cde:	4606      	mov	r6, r0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	d507      	bpl.n	8006cf4 <__smakebuf_r+0x1c>
 8006ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	2301      	movs	r3, #1
 8006cee:	6163      	str	r3, [r4, #20]
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	ab01      	add	r3, sp, #4
 8006cf6:	466a      	mov	r2, sp
 8006cf8:	f7ff ffca 	bl	8006c90 <__swhatbuf_r>
 8006cfc:	9900      	ldr	r1, [sp, #0]
 8006cfe:	4605      	mov	r5, r0
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff fa73 	bl	80061ec <_malloc_r>
 8006d06:	b948      	cbnz	r0, 8006d1c <__smakebuf_r+0x44>
 8006d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0c:	059a      	lsls	r2, r3, #22
 8006d0e:	d4ef      	bmi.n	8006cf0 <__smakebuf_r+0x18>
 8006d10:	f023 0303 	bic.w	r3, r3, #3
 8006d14:	f043 0302 	orr.w	r3, r3, #2
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e7e3      	b.n	8006ce4 <__smakebuf_r+0xc>
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <__smakebuf_r+0x7c>)
 8006d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	9b00      	ldr	r3, [sp, #0]
 8006d2c:	6163      	str	r3, [r4, #20]
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	6120      	str	r0, [r4, #16]
 8006d32:	b15b      	cbz	r3, 8006d4c <__smakebuf_r+0x74>
 8006d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 f88d 	bl	8006e58 <_isatty_r>
 8006d3e:	b128      	cbz	r0, 8006d4c <__smakebuf_r+0x74>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	89a0      	ldrh	r0, [r4, #12]
 8006d4e:	4305      	orrs	r5, r0
 8006d50:	81a5      	strh	r5, [r4, #12]
 8006d52:	e7cd      	b.n	8006cf0 <__smakebuf_r+0x18>
 8006d54:	08006045 	.word	0x08006045

08006d58 <__malloc_lock>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__malloc_lock+0x8>)
 8006d5a:	f7ff ba45 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	20004afc 	.word	0x20004afc

08006d64 <__malloc_unlock>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__malloc_unlock+0x8>)
 8006d66:	f7ff ba40 	b.w	80061ea <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20004afc 	.word	0x20004afc

08006d70 <_free_r>:
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d048      	beq.n	8006e08 <_free_r+0x98>
 8006d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7a:	9001      	str	r0, [sp, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d82:	bfb8      	it	lt
 8006d84:	18e4      	addlt	r4, r4, r3
 8006d86:	f7ff ffe7 	bl	8006d58 <__malloc_lock>
 8006d8a:	4a20      	ldr	r2, [pc, #128]	; (8006e0c <_free_r+0x9c>)
 8006d8c:	9801      	ldr	r0, [sp, #4]
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	4615      	mov	r5, r2
 8006d92:	b933      	cbnz	r3, 8006da2 <_free_r+0x32>
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6014      	str	r4, [r2, #0]
 8006d98:	b003      	add	sp, #12
 8006d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9e:	f7ff bfe1 	b.w	8006d64 <__malloc_unlock>
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	d90b      	bls.n	8006dbe <_free_r+0x4e>
 8006da6:	6821      	ldr	r1, [r4, #0]
 8006da8:	1862      	adds	r2, r4, r1
 8006daa:	4293      	cmp	r3, r2
 8006dac:	bf04      	itt	eq
 8006dae:	681a      	ldreq	r2, [r3, #0]
 8006db0:	685b      	ldreq	r3, [r3, #4]
 8006db2:	6063      	str	r3, [r4, #4]
 8006db4:	bf04      	itt	eq
 8006db6:	1852      	addeq	r2, r2, r1
 8006db8:	6022      	streq	r2, [r4, #0]
 8006dba:	602c      	str	r4, [r5, #0]
 8006dbc:	e7ec      	b.n	8006d98 <_free_r+0x28>
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	b10b      	cbz	r3, 8006dc8 <_free_r+0x58>
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d9fa      	bls.n	8006dbe <_free_r+0x4e>
 8006dc8:	6811      	ldr	r1, [r2, #0]
 8006dca:	1855      	adds	r5, r2, r1
 8006dcc:	42a5      	cmp	r5, r4
 8006dce:	d10b      	bne.n	8006de8 <_free_r+0x78>
 8006dd0:	6824      	ldr	r4, [r4, #0]
 8006dd2:	4421      	add	r1, r4
 8006dd4:	1854      	adds	r4, r2, r1
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	d1dd      	bne.n	8006d98 <_free_r+0x28>
 8006ddc:	681c      	ldr	r4, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	6053      	str	r3, [r2, #4]
 8006de2:	4421      	add	r1, r4
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	e7d7      	b.n	8006d98 <_free_r+0x28>
 8006de8:	d902      	bls.n	8006df0 <_free_r+0x80>
 8006dea:	230c      	movs	r3, #12
 8006dec:	6003      	str	r3, [r0, #0]
 8006dee:	e7d3      	b.n	8006d98 <_free_r+0x28>
 8006df0:	6825      	ldr	r5, [r4, #0]
 8006df2:	1961      	adds	r1, r4, r5
 8006df4:	428b      	cmp	r3, r1
 8006df6:	bf04      	itt	eq
 8006df8:	6819      	ldreq	r1, [r3, #0]
 8006dfa:	685b      	ldreq	r3, [r3, #4]
 8006dfc:	6063      	str	r3, [r4, #4]
 8006dfe:	bf04      	itt	eq
 8006e00:	1949      	addeq	r1, r1, r5
 8006e02:	6021      	streq	r1, [r4, #0]
 8006e04:	6054      	str	r4, [r2, #4]
 8006e06:	e7c7      	b.n	8006d98 <_free_r+0x28>
 8006e08:	b003      	add	sp, #12
 8006e0a:	bd30      	pop	{r4, r5, pc}
 8006e0c:	200049c0 	.word	0x200049c0

08006e10 <_read_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d07      	ldr	r5, [pc, #28]	; (8006e30 <_read_r+0x20>)
 8006e14:	4604      	mov	r4, r0
 8006e16:	4608      	mov	r0, r1
 8006e18:	4611      	mov	r1, r2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	602a      	str	r2, [r5, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f7fa f810 	bl	8000e44 <_read>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_read_r+0x1e>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_read_r+0x1e>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	20004b04 	.word	0x20004b04

08006e34 <_fstat_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d07      	ldr	r5, [pc, #28]	; (8006e54 <_fstat_r+0x20>)
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	602b      	str	r3, [r5, #0]
 8006e42:	f7fa f844 	bl	8000ece <_fstat>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d102      	bne.n	8006e50 <_fstat_r+0x1c>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	b103      	cbz	r3, 8006e50 <_fstat_r+0x1c>
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	bd38      	pop	{r3, r4, r5, pc}
 8006e52:	bf00      	nop
 8006e54:	20004b04 	.word	0x20004b04

08006e58 <_isatty_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d06      	ldr	r5, [pc, #24]	; (8006e74 <_isatty_r+0x1c>)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	602b      	str	r3, [r5, #0]
 8006e64:	f7fa f843 	bl	8000eee <_isatty>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d102      	bne.n	8006e72 <_isatty_r+0x1a>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	b103      	cbz	r3, 8006e72 <_isatty_r+0x1a>
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	20004b04 	.word	0x20004b04

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
