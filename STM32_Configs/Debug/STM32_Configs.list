
STM32_Configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070bc  080070bc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c4  080070c4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080070cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a7c  20000090  0800715c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b0c  0800715c  00024b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3c9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3a  00000000  00000000  0003e489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00041ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000435c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ddd  00000000  00000000  00044b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188a2  00000000  00000000  0004995d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b04c  00000000  00000000  000621ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000690c  00000000  00000000  000fd2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fb8 	.word	0x08006fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006fb8 	.word	0x08006fb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
uint16_t delay_time = 500;
uint16_t greenScore = 0, yellowScore = 0;
bool startPhase = false;

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8

  HAL_Init();
 800057e:	f000 fd67 	bl	8001050 <HAL_Init>
  SystemClock_Config();
 8000582:	f000 f9dd 	bl	8000940 <SystemClock_Config>
  MX_GPIO_Init();
 8000586:	f000 fab1 	bl	8000aec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 fa85 	bl	8000a98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800058e:	f000 fa43 	bl	8000a18 <MX_SPI1_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		//writing CS pin to default as high
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x64>)
 8000598:	f001 f860 	bl	800165c <HAL_GPIO_WritePin>

  //CREATING RTOS TASKS
  //start button
  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800059c:	bf00      	nop
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x68>)
 80005a4:	f001 f842 	bl	800162c <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f7      	bne.n	800059e <main+0x26>

  xTaskCreate(data_transfer, "Data Transfer", 100, NULL, 1, NULL);		  //task for SPI data communication
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	490a      	ldr	r1, [pc, #40]	; (80005e4 <main+0x6c>)
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x70>)
 80005be:	f003 fec4 	bl	800434a <xTaskCreate>
  xTaskCreate(led_pattern, "LED Pattern", 100, NULL, 1, &led_handle);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x74>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <main+0x78>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x7c>)
 80005d2:	f003 feba 	bl	800434a <xTaskCreate>



  //start the scheduler
  vTaskStartScheduler();
 80005d6:	f004 f8a7 	bl	8004728 <vTaskStartScheduler>

  while (1);
 80005da:	e7fe      	b.n	80005da <main+0x62>
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020800 	.word	0x40020800
 80005e4:	08006fd0 	.word	0x08006fd0
 80005e8:	080005f9 	.word	0x080005f9
 80005ec:	200049d0 	.word	0x200049d0
 80005f0:	08006fe0 	.word	0x08006fe0
 80005f4:	08000659 	.word	0x08000659

080005f8 <data_transfer>:

  return 0;
}

void data_transfer(void *pvParameters)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while (1)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <data_transfer+0x4c>)
 8000606:	f001 f829 	bl	800165c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&MasterSend, 1, 10);
 800060a:	230a      	movs	r3, #10
 800060c:	2201      	movs	r2, #1
 800060e:	490e      	ldr	r1, [pc, #56]	; (8000648 <data_transfer+0x50>)
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <data_transfer+0x54>)
 8000612:	f001 fd86 	bl	8002122 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t*)&MasterReceive, 1, 10);
 8000616:	230a      	movs	r3, #10
 8000618:	2201      	movs	r2, #1
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <data_transfer+0x58>)
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <data_transfer+0x54>)
 800061e:	f001 febc 	bl	800239a <HAL_SPI_Receive>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f003 ffd5 	bl	80045d4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <data_transfer+0x4c>)
 8000630:	f001 f814 	bl	800165c <HAL_GPIO_WritePin>

		printf("%d\n\r", MasterReceive);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <data_transfer+0x58>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <data_transfer+0x5c>)
 800063c:	f005 fd66 	bl	800610c <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000640:	e7de      	b.n	8000600 <data_transfer+0x8>
 8000642:	bf00      	nop
 8000644:	40020000 	.word	0x40020000
 8000648:	200000ac 	.word	0x200000ac
 800064c:	200049d4 	.word	0x200049d4
 8000650:	200049cc 	.word	0x200049cc
 8000654:	08006fec 	.word	0x08006fec

08000658 <led_pattern>:
	}
}

void led_pattern(void *pvParameters)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	  //led loop
	while (1)
	{
		for (uint8_t i = 0; i < 13; ++i)
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e040      	b.n	80006e8 <led_pattern+0x90>
		{
			HAL_GPIO_TogglePin(GPIOB, led_arr[i]);
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4a53      	ldr	r2, [pc, #332]	; (80007b8 <led_pattern+0x160>)
 800066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066e:	4619      	mov	r1, r3
 8000670:	4852      	ldr	r0, [pc, #328]	; (80007bc <led_pattern+0x164>)
 8000672:	f001 f80c 	bl	800168e <HAL_GPIO_TogglePin>

			if (i > 0)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <led_pattern+0x36>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i - 1]);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <led_pattern+0x160>)
 8000682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000686:	4619      	mov	r1, r3
 8000688:	484c      	ldr	r0, [pc, #304]	; (80007bc <led_pattern+0x164>)
 800068a:	f001 f800 	bl	800168e <HAL_GPIO_TogglePin>

			if (i == 12)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b0c      	cmp	r3, #12
 8000692:	d118      	bne.n	80006c6 <led_pattern+0x6e>
			{
				green_press();
 8000694:	f000 f89a 	bl	80007cc <green_press>
				checkConditions();
 8000698:	f000 f8f0 	bl	800087c <checkConditions>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i]);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a46      	ldr	r2, [pc, #280]	; (80007b8 <led_pattern+0x160>)
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4845      	ldr	r0, [pc, #276]	; (80007bc <led_pattern+0x164>)
 80006a8:	f000 fff1 	bl	800168e <HAL_GPIO_TogglePin>

				if (!startPhase)
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <led_pattern+0x168>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <led_pattern+0x6e>
				{
					delay_time -= 30;
 80006ba:	4b42      	ldr	r3, [pc, #264]	; (80007c4 <led_pattern+0x16c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3b1e      	subs	r3, #30
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <led_pattern+0x16c>)
 80006c4:	801a      	strh	r2, [r3, #0]
				}
			}

			vTaskDelay(pdMS_TO_TICKS(delay_time));
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <led_pattern+0x16c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	fb03 f302 	mul.w	r3, r3, r2
 80006d4:	4a3c      	ldr	r2, [pc, #240]	; (80007c8 <led_pattern+0x170>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	099b      	lsrs	r3, r3, #6
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ff79 	bl	80045d4 <vTaskDelay>
		for (uint8_t i = 0; i < 13; ++i)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3301      	adds	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2b0c      	cmp	r3, #12
 80006ec:	d9bb      	bls.n	8000666 <led_pattern+0xe>

		}

		if (startPhase)
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <led_pattern+0x168>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <led_pattern+0xae>
		{
			startPhase = false;
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <led_pattern+0x168>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
			delay_time = 500;
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <led_pattern+0x16c>)
 80006fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000702:	801a      	strh	r2, [r3, #0]
			break;
 8000704:	e053      	b.n	80007ae <led_pattern+0x156>
		}

		for (uint8_t i = 13; i > 0; --i)
 8000706:	230d      	movs	r3, #13
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e041      	b.n	8000790 <led_pattern+0x138>
		{
			HAL_GPIO_TogglePin(GPIOB, led_arr[i-1]);
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <led_pattern+0x160>)
 8000712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000716:	4619      	mov	r1, r3
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <led_pattern+0x164>)
 800071a:	f000 ffb8 	bl	800168e <HAL_GPIO_TogglePin>

			if ((i -1) != 12)
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	2b0d      	cmp	r3, #13
 8000722:	d007      	beq.n	8000734 <led_pattern+0xdc>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i]);
 8000724:	7bbb      	ldrb	r3, [r7, #14]
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <led_pattern+0x160>)
 8000728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072c:	4619      	mov	r1, r3
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <led_pattern+0x164>)
 8000730:	f000 ffad 	bl	800168e <HAL_GPIO_TogglePin>

			if ((i - 1) == 0)
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d119      	bne.n	800076e <led_pattern+0x116>
			{
				yellow_press();
 800073a:	f000 f873 	bl	8000824 <yellow_press>
				checkConditions();
 800073e:	f000 f89d 	bl	800087c <checkConditions>
				HAL_GPIO_TogglePin(GPIOB, led_arr[i - 1]);
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <led_pattern+0x160>)
 8000748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074c:	4619      	mov	r1, r3
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <led_pattern+0x164>)
 8000750:	f000 ff9d 	bl	800168e <HAL_GPIO_TogglePin>

				if (!startPhase)
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <led_pattern+0x168>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d005      	beq.n	800076e <led_pattern+0x116>
				{
					delay_time -= 30;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <led_pattern+0x16c>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	3b1e      	subs	r3, #30
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <led_pattern+0x16c>)
 800076c:	801a      	strh	r2, [r3, #0]
				}
			}

			vTaskDelay(pdMS_TO_TICKS(delay_time));
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <led_pattern+0x16c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	fb03 f302 	mul.w	r3, r3, r2
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <led_pattern+0x170>)
 800077e:	fba2 2303 	umull	r2, r3, r2, r3
 8000782:	099b      	lsrs	r3, r3, #6
 8000784:	4618      	mov	r0, r3
 8000786:	f003 ff25 	bl	80045d4 <vTaskDelay>
		for (uint8_t i = 13; i > 0; --i)
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	3b01      	subs	r3, #1
 800078e:	73bb      	strb	r3, [r7, #14]
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ba      	bne.n	800070c <led_pattern+0xb4>
		}

		if (startPhase)
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <led_pattern+0x168>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f43f af60 	beq.w	8000660 <led_pattern+0x8>
		{
			startPhase = false;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <led_pattern+0x168>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
			delay_time = 500;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <led_pattern+0x16c>)
 80007a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007ac:	801a      	strh	r2, [r3, #0]
			break;
		}
	  }
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	40020400 	.word	0x40020400
 80007c0:	200000b2 	.word	0x200000b2
 80007c4:	2000001a 	.word	0x2000001a
 80007c8:	10624dd3 	.word	0x10624dd3

080007cc <green_press>:

void green_press(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 80007d2:	f000 fc73 	bl	80010bc <HAL_GetTick>
 80007d6:	6078      	str	r0, [r7, #4]
	uint32_t currentTime = HAL_GetTick();
 80007d8:	f000 fc70 	bl	80010bc <HAL_GetTick>
 80007dc:	6038      	str	r0, [r7, #0]

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != 0)
 80007de:	e00d      	b.n	80007fc <green_press+0x30>
	{
		currentTime = HAL_GetTick();
 80007e0:	f000 fc6c 	bl	80010bc <HAL_GetTick>
 80007e4:	6038      	str	r0, [r7, #0]
		if (currentTime - startTime == delay_time)
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <green_press+0x4c>)
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d103      	bne.n	80007fc <green_press+0x30>
		{
			MasterSend = 3;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <green_press+0x50>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	701a      	strb	r2, [r3, #0]
			return;
 80007fa:	e009      	b.n	8000810 <green_press+0x44>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != 0)
 80007fc:	2104      	movs	r1, #4
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <green_press+0x54>)
 8000800:	f000 ff14 	bl	800162c <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ea      	bne.n	80007e0 <green_press+0x14>
		}
	}

	MasterSend = 1;
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <green_press+0x50>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000001a 	.word	0x2000001a
 800081c:	200000ac 	.word	0x200000ac
 8000820:	40020800 	.word	0x40020800

08000824 <yellow_press>:

void yellow_press(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 800082a:	f000 fc47 	bl	80010bc <HAL_GetTick>
 800082e:	6078      	str	r0, [r7, #4]
	uint32_t currentTime = HAL_GetTick();
 8000830:	f000 fc44 	bl	80010bc <HAL_GetTick>
 8000834:	6038      	str	r0, [r7, #0]

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) != 0)
 8000836:	e00d      	b.n	8000854 <yellow_press+0x30>
	{
		currentTime = HAL_GetTick();
 8000838:	f000 fc40 	bl	80010bc <HAL_GetTick>
 800083c:	6038      	str	r0, [r7, #0]
		if (currentTime - startTime == delay_time)
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <yellow_press+0x4c>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4293      	cmp	r3, r2
 800084a:	d103      	bne.n	8000854 <yellow_press+0x30>
		{
			MasterSend = 4;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <yellow_press+0x50>)
 800084e:	2204      	movs	r2, #4
 8000850:	701a      	strb	r2, [r3, #0]
			return;
 8000852:	e009      	b.n	8000868 <yellow_press+0x44>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) != 0)
 8000854:	2108      	movs	r1, #8
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <yellow_press+0x54>)
 8000858:	f000 fee8 	bl	800162c <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1ea      	bne.n	8000838 <yellow_press+0x14>
		}
	}

	MasterSend = 2;
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <yellow_press+0x50>)
 8000864:	2202      	movs	r2, #2
 8000866:	701a      	strb	r2, [r3, #0]
}
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000001a 	.word	0x2000001a
 8000874:	200000ac 	.word	0x200000ac
 8000878:	40020800 	.word	0x40020800

0800087c <checkConditions>:

void checkConditions(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	if (MasterSend == 3 || MasterSend == 4)
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <checkConditions+0x68>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d003      	beq.n	8000890 <checkConditions+0x14>
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <checkConditions+0x68>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b04      	cmp	r3, #4
 800088e:	d127      	bne.n	80008e0 <checkConditions+0x64>
	{
		startPhase = true;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <checkConditions+0x6c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]

		if (MasterSend == 3)
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <checkConditions+0x68>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d106      	bne.n	80008ac <checkConditions+0x30>
			yellowScore++;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <checkConditions+0x70>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <checkConditions+0x70>)
 80008a8:	801a      	strh	r2, [r3, #0]
 80008aa:	e005      	b.n	80008b8 <checkConditions+0x3c>
		else
			greenScore++;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <checkConditions+0x74>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <checkConditions+0x74>)
 80008b6:	801a      	strh	r2, [r3, #0]

		if (yellowScore == 10 || greenScore == 10)
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <checkConditions+0x70>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	2b0a      	cmp	r3, #10
 80008be:	d003      	beq.n	80008c8 <checkConditions+0x4c>
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <checkConditions+0x74>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d107      	bne.n	80008d8 <checkConditions+0x5c>
		{
			vTaskSuspend(led_handle);		//suspend led task if game is won by a player
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <checkConditions+0x78>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 feb5 	bl	800463c <vTaskSuspend>
			MasterSend = 5;
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <checkConditions+0x68>)
 80008d4:	2205      	movs	r2, #5
 80008d6:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f000 fbfa 	bl	80010d4 <HAL_Delay>

	}
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000ac 	.word	0x200000ac
 80008e8:	200000b2 	.word	0x200000b2
 80008ec:	200000b0 	.word	0x200000b0
 80008f0:	200000ae 	.word	0x200000ae
 80008f4:	200049d0 	.word	0x200049d0

080008f8 <uart2_write>:

//rerouting printf more efficiently
int uart2_write(int ch)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 8000900:	bf00      	nop
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <uart2_write+0x2c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f9      	beq.n	8000902 <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <uart2_write+0x2c>)
 8000912:	b2db      	uxtb	r3, r3
 8000914:	6053      	str	r3, [r2, #4]

	return ch;
 8000916:	687b      	ldr	r3, [r7, #4]
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40004400 	.word	0x40004400

08000928 <__io_putchar>:

//outputs to serial monitor
int __io_putchar(int ch)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ffe1 	bl	80008f8 <uart2_write>
	return ch;
 8000936:	687b      	ldr	r3, [r7, #4]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fbd4 	bl	80060fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemClock_Config+0xd0>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <SystemClock_Config+0xd0>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <SystemClock_Config+0xd0>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xd4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xd4>)
 800098e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xd4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fe7a 	bl	80016c4 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009d6:	f000 f921 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f8dc 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a02:	f000 f90b 	bl	8000c1c <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_SPI1_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a4c:	2228      	movs	r2, #40	; 0x28
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a6a:	f001 fad1 	bl	8002010 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a74:	f000 f8d2 	bl	8000c1c <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200049d4 	.word	0x200049d4
 8000a80:	40013000 	.word	0x40013000

08000a84 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <SPI1_IRQHandler+0x10>)
 8000a8a:	f001 ff39 	bl	8002900 <HAL_SPI_IRQHandler>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200049d4 	.word	0x200049d4

08000a98 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f002 fbe4 	bl	800329c <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f89f 	bl	8000c1c <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20004a2c 	.word	0x20004a2c
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a30      	ldr	r2, [pc, #192]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_GPIO_Init+0xfc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2110      	movs	r1, #16
 8000b76:	481d      	ldr	r0, [pc, #116]	; (8000bec <MX_GPIO_Init+0x100>)
 8000b78:	f000 fd70 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f247 71f7 	movw	r1, #30711	; 0x77f7
 8000b82:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <MX_GPIO_Init+0x104>)
 8000b84:	f000 fd6a 	bl	800165c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin, Green Button, yellow Button */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8000b88:	f242 030c 	movw	r3, #8204	; 0x200c
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000ba0:	f000 fbc0 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <MX_GPIO_Init+0x100>)
 8000bbc:	f000 fbb2 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000bc0:	f247 73f7 	movw	r3, #30711	; 0x77f7
 8000bc4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_GPIO_Init+0x104>)
 8000bda:	f000 fba3 	bl	8001324 <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0a:	f000 fa43 	bl	8001094 <HAL_IncTick>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010000 	.word	0x40010000

08000c1c <Error_Handler>:

void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  __disable_irq();
  while (1);
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_MspInit+0x54>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <HAL_MspInit+0x54>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x54>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_MspInit+0x54>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_MspInit+0x54>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_MspInit+0x54>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	f06f 0001 	mvn.w	r0, #1
 8000c6e:	f000 fb0d 	bl	800128c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_SPI_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12b      	bne.n	8000cfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cda:	23e0      	movs	r3, #224	; 0xe0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cf6:	f000 fb15 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x8c>)
 8000d86:	f000 facd 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	2019      	movs	r0, #25
 8000db6:	f000 fa69 	bl	800128c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dba:	2019      	movs	r0, #25
 8000dbc:	f000 fa82 	bl	80012c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_InitTick+0xa0>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ddc:	f107 0210 	add.w	r2, r7, #16
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 f8e0 	bl	8001fac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dec:	f001 f8ca 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8000df0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_InitTick+0xa4>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_InitTick+0xac>)
 8000e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e22:	f001 ffbb 	bl	8002d9c <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d104      	bne.n	8000e36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_InitTick+0xa8>)
 8000e2e:	f002 f80f 	bl	8002e50 <HAL_TIM_Base_Start_IT>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3730      	adds	r7, #48	; 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	431bde83 	.word	0x431bde83
 8000e48:	20004a70 	.word	0x20004a70
 8000e4c:	40010000 	.word	0x40010000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e82:	f002 f847 	bl	8002f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20004a70 	.word	0x20004a70

08000e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
	}

return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd1f 	bl	8000928 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
	}
	return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f005 f876 	bl	800608c <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20018000 	.word	0x20018000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200000b4 	.word	0x200000b4
 8000fd4:	20004b10 	.word	0x20004b10

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f005 f835 	bl	8006098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff faa3 	bl	8000578 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001040:	080070cc 	.word	0x080070cc
  ldr r2, =_sbss
 8001044:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001048:	20004b0c 	.word	0x20004b0c

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f8fc 	bl	8001276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f7ff fe8e 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fdd0 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000024 	.word	0x20000024
 80010b8:	20004ab8 	.word	0x20004ab8

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20004ab8 	.word	0x20004ab8

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000024 	.word	0x20000024

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff4c 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129e:	f7ff ff61 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	6978      	ldr	r0, [r7, #20]
 80012aa:	f7ff ffb1 	bl	8001210 <NVIC_EncodePriority>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff80 	bl	80011bc <__NVIC_SetPriority>
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff54 	bl	8001180 <__NVIC_EnableIRQ>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d004      	beq.n	80012fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00c      	b.n	8001318 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2205      	movs	r2, #5
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0201 	bic.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e159      	b.n	80015f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8148 	bne.w	80015ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	2b02      	cmp	r3, #2
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a2 	beq.w	80015ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b54      	ldr	r3, [pc, #336]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x202>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1fe>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2f8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1fa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1f6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x300>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1f2>
 8001512:	2304      	movs	r3, #4
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001516:	2307      	movs	r3, #7
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x304>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f aea2 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	400b      	ands	r3, r1
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e264      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	4ba3      	ldr	r3, [pc, #652]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4ba0      	ldr	r3, [pc, #640]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b9d      	ldr	r3, [pc, #628]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b99      	ldr	r3, [pc, #612]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e23f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b91      	ldr	r3, [pc, #580]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a90      	ldr	r2, [pc, #576]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a8a      	ldr	r2, [pc, #552]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a83      	ldr	r2, [pc, #524]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fc9e 	bl	80010bc <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc9a 	bl	80010bc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e204      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc8a 	bl	80010bc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc86 	bl	80010bc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1f0      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b62      	ldr	r3, [pc, #392]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c4      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4952      	ldr	r1, [pc, #328]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <HAL_RCC_OscConfig+0x2b0>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fc3f 	bl	80010bc <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fc3b 	bl	80010bc <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4940      	ldr	r1, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_OscConfig+0x2b0>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fc1e 	bl	80010bc <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fc1a 	bl	80010bc <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e184      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d030      	beq.n	8001910 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x2b4>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fbfe 	bl	80010bc <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fbfa 	bl	80010bc <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e164      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e015      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x2b4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fbe7 	bl	80010bc <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fbe3 	bl	80010bc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e14d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a0 	beq.w	8001a5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x2b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d121      	bne.n	800199e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_RCC_OscConfig+0x2b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_RCC_OscConfig+0x2b8>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff fba9 	bl	80010bc <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e011      	b.n	8001992 <HAL_RCC_OscConfig+0x2ce>
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	42470000 	.word	0x42470000
 8001978:	42470e80 	.word	0x42470e80
 800197c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff fb9c 	bl	80010bc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e106      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <HAL_RCC_OscConfig+0x4e4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
 80019a6:	4b81      	ldr	r3, [pc, #516]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a80      	ldr	r2, [pc, #512]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x32a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x312>
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x32a>
 80019d6:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a74      	ldr	r2, [pc, #464]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a71      	ldr	r2, [pc, #452]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb61 	bl	80010bc <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fb5d 	bl	80010bc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0c5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b65      	ldr	r3, [pc, #404]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x33a>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fb4b 	bl	80010bc <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fb47 	bl	80010bc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0af      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b56      	ldr	r3, [pc, #344]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a55      	ldr	r2, [pc, #340]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 809b 	beq.w	8001b9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a68:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d05c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d141      	bne.n	8001b00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fb1b 	bl	80010bc <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff fb17 	bl	80010bc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e081      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	019b      	lsls	r3, r3, #6
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff faf0 	bl	80010bc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff faec 	bl	80010bc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e056      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x41c>
 8001afe:	e04e      	b.n	8001b9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff fad9 	bl	80010bc <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff fad5 	bl	80010bc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e03f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x44a>
 8001b2c:	e037      	b.n	8001b9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e032      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d028      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d11a      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d111      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	42470060 	.word	0x42470060

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff fa0a 	bl	80010bc <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff fa06 	bl	80010bc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f820 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	0800700c 	.word	0x0800700c
 8001d78:	2000001c 	.word	0x2000001c
 8001d7c:	20000020 	.word	0x20000020

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d98:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d00d      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f200 80bd 	bhi.w	8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x3a>
 8001db2:	e0b7      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001db6:	60bb      	str	r3, [r7, #8]
       break;
 8001db8:	e0b7      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dbc:	60bb      	str	r3, [r7, #8]
      break;
 8001dbe:	e0b4      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04d      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b58      	ldr	r3, [pc, #352]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	ea02 0800 	and.w	r8, r2, r0
 8001dee:	ea03 0901 	and.w	r9, r3, r1
 8001df2:	4640      	mov	r0, r8
 8001df4:	4649      	mov	r1, r9
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	014b      	lsls	r3, r1, #5
 8001e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e04:	0142      	lsls	r2, r0, #5
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	ebb0 0008 	subs.w	r0, r0, r8
 8001e0e:	eb61 0109 	sbc.w	r1, r1, r9
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	018b      	lsls	r3, r1, #6
 8001e1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e20:	0182      	lsls	r2, r0, #6
 8001e22:	1a12      	subs	r2, r2, r0
 8001e24:	eb63 0301 	sbc.w	r3, r3, r1
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	00d9      	lsls	r1, r3, #3
 8001e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e36:	00d0      	lsls	r0, r2, #3
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	eb12 0208 	adds.w	r2, r2, r8
 8001e40:	eb43 0309 	adc.w	r3, r3, r9
 8001e44:	f04f 0000 	mov.w	r0, #0
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	0259      	lsls	r1, r3, #9
 8001e4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e52:	0250      	lsls	r0, r2, #9
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f7fe fa0c 	bl	8000280 <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e04a      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	ea02 0400 	and.w	r4, r2, r0
 8001e8a:	ea03 0501 	and.w	r5, r3, r1
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	014b      	lsls	r3, r1, #5
 8001e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea0:	0142      	lsls	r2, r0, #5
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	1b00      	subs	r0, r0, r4
 8001ea8:	eb61 0105 	sbc.w	r1, r1, r5
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	018b      	lsls	r3, r1, #6
 8001eb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eba:	0182      	lsls	r2, r0, #6
 8001ebc:	1a12      	subs	r2, r2, r0
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	f04f 0000 	mov.w	r0, #0
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	00d9      	lsls	r1, r3, #3
 8001ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed0:	00d0      	lsls	r0, r2, #3
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	1912      	adds	r2, r2, r4
 8001ed8:	eb45 0303 	adc.w	r3, r5, r3
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	0299      	lsls	r1, r3, #10
 8001ee6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eea:	0290      	lsls	r0, r2, #10
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f7fe f9c0 	bl	8000280 <__aeabi_uldivmod>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4613      	mov	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	60bb      	str	r3, [r7, #8]
      break;
 8001f22:	e002      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f26:	60bb      	str	r3, [r7, #8]
      break;
 8001f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	00f42400 	.word	0x00f42400
 8001f40:	007a1200 	.word	0x007a1200

08001f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	2000001c 	.word	0x2000001c

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0a9b      	lsrs	r3, r3, #10
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	0800701c 	.word	0x0800701c

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f88:	f7ff ffdc 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0b5b      	lsrs	r3, r3, #13
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	0800701c 	.word	0x0800701c

08001fac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	220f      	movs	r2, #15
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCC_GetClockConfig+0x60>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07b      	b.n	800211a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002032:	d009      	beq.n	8002048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
 800203a:	e005      	b.n	8002048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fe0c 	bl	8000c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	ea42 0103 	orr.w	r1, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0104 	and.w	r1, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f003 0210 	and.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b088      	sub	sp, #32
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_SPI_Transmit+0x22>
 8002140:	2302      	movs	r3, #2
 8002142:	e126      	b.n	8002392 <HAL_SPI_Transmit+0x270>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800214c:	f7fe ffb6 	bl	80010bc <HAL_GetTick>
 8002150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d002      	beq.n	8002168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002166:	e10b      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_SPI_Transmit+0x52>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002178:	e102      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	d10f      	bne.n	80021e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d007      	beq.n	8002200 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002208:	d14b      	bne.n	80022a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_SPI_Transmit+0xf6>
 8002212:	8afb      	ldrh	r3, [r7, #22]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d13e      	bne.n	8002296 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	881a      	ldrh	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	1c9a      	adds	r2, r3, #2
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800223c:	e02b      	b.n	8002296 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d112      	bne.n	8002272 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002270:	e011      	b.n	8002296 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002272:	f7fe ff23 	bl	80010bc <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d803      	bhi.n	800228a <HAL_SPI_Transmit+0x168>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d102      	bne.n	8002290 <HAL_SPI_Transmit+0x16e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002294:	e074      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ce      	bne.n	800223e <HAL_SPI_Transmit+0x11c>
 80022a0:	e04c      	b.n	800233c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_SPI_Transmit+0x18e>
 80022aa:	8afb      	ldrh	r3, [r7, #22]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d140      	bne.n	8002332 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022d6:	e02c      	b.n	8002332 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d113      	bne.n	800230e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	86da      	strh	r2, [r3, #54]	; 0x36
 800230c:	e011      	b.n	8002332 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800230e:	f7fe fed5 	bl	80010bc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d803      	bhi.n	8002326 <HAL_SPI_Transmit+0x204>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d102      	bne.n	800232c <HAL_SPI_Transmit+0x20a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002330:	e026      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1cd      	bne.n	80022d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	6839      	ldr	r1, [r7, #0]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fce9 	bl	8002d18 <SPI_EndRxTxTransaction>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	e000      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
  }

error:
 800237e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b088      	sub	sp, #32
 800239e:	af02      	add	r7, sp, #8
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b6:	d112      	bne.n	80023de <HAL_SPI_Receive+0x44>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10e      	bne.n	80023de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023c8:	88fa      	ldrh	r2, [r7, #6]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f8f1 	bl	80025bc <HAL_SPI_TransmitReceive>
 80023da:	4603      	mov	r3, r0
 80023dc:	e0ea      	b.n	80025b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_SPI_Receive+0x52>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0e3      	b.n	80025b4 <HAL_SPI_Receive+0x21a>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023f4:	f7fe fe62 	bl	80010bc <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	75fb      	strb	r3, [r7, #23]
    goto error;
 800240a:	e0ca      	b.n	80025a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_SPI_Receive+0x7e>
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800241c:	e0c1      	b.n	80025a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2204      	movs	r2, #4
 8002422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	d10f      	bne.n	8002486 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d007      	beq.n	80024a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d162      	bne.n	8002572 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024ac:	e02e      	b.n	800250c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d115      	bne.n	80024e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f103 020c 	add.w	r2, r3, #12
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024e6:	e011      	b.n	800250c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e8:	f7fe fde8 	bl	80010bc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d803      	bhi.n	8002500 <HAL_SPI_Receive+0x166>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_Receive+0x16c>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	75fb      	strb	r3, [r7, #23]
          goto error;
 800250a:	e04a      	b.n	80025a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1cb      	bne.n	80024ae <HAL_SPI_Receive+0x114>
 8002516:	e031      	b.n	800257c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d113      	bne.n	800254e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	b292      	uxth	r2, r2
 8002532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	1c9a      	adds	r2, r3, #2
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800254c:	e011      	b.n	8002572 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800254e:	f7fe fdb5 	bl	80010bc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d803      	bhi.n	8002566 <HAL_SPI_Receive+0x1cc>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d102      	bne.n	800256c <HAL_SPI_Receive+0x1d2>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002570:	e017      	b.n	80025a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1cd      	bne.n	8002518 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fb63 	bl	8002c4c <SPI_EndRxTransaction>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
 800259e:	e000      	b.n	80025a2 <HAL_SPI_Receive+0x208>
  }

error :
 80025a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025ca:	2301      	movs	r3, #1
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x26>
 80025de:	2302      	movs	r3, #2
 80025e0:	e18a      	b.n	80028f8 <HAL_SPI_TransmitReceive+0x33c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ea:	f7fe fd67 	bl	80010bc <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002608:	2b01      	cmp	r3, #1
 800260a:	d00f      	beq.n	800262c <HAL_SPI_TransmitReceive+0x70>
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002612:	d107      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x68>
 800261c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002620:	2b04      	cmp	r3, #4
 8002622:	d003      	beq.n	800262c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800262a:	e15b      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_SPI_TransmitReceive+0x82>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_SPI_TransmitReceive+0x82>
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002644:	e14e      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b04      	cmp	r3, #4
 8002650:	d003      	beq.n	800265a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2205      	movs	r2, #5
 8002656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	887a      	ldrh	r2, [r7, #2]
 8002682:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d007      	beq.n	80026ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b6:	d178      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x10a>
 80026c0:	8b7b      	ldrh	r3, [r7, #26]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d166      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	1c9a      	adds	r2, r3, #2
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ea:	e053      	b.n	8002794 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d11b      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x176>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x176>
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d113      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	881a      	ldrh	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	1c9a      	adds	r2, r3, #2
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d119      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x1b8>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	b292      	uxth	r2, r2
 8002756:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002774:	f7fe fca2 	bl	80010bc <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002780:	429a      	cmp	r2, r3
 8002782:	d807      	bhi.n	8002794 <HAL_SPI_TransmitReceive+0x1d8>
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d003      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002792:	e0a7      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1a6      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x130>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1a1      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x130>
 80027a8:	e07c      	b.n	80028a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x1fc>
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d16b      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	7812      	ldrb	r2, [r2, #0]
 80027c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027de:	e057      	b.n	8002890 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d11c      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x26c>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d017      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x26c>
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d114      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d119      	bne.n	800286a <HAL_SPI_TransmitReceive+0x2ae>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d014      	beq.n	800286a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002866:	2301      	movs	r3, #1
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800286a:	f7fe fc27 	bl	80010bc <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002876:	429a      	cmp	r2, r3
 8002878:	d803      	bhi.n	8002882 <HAL_SPI_TransmitReceive+0x2c6>
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d102      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x2cc>
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800288e:	e029      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1a2      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x224>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d19d      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fa35 	bl	8002d18 <SPI_EndRxTxTransaction>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028c0:	e010      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	e000      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3730      	adds	r7, #48	; 0x30
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10f      	bne.n	8002944 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    return;
 8002942:	e0d7      	b.n	8002af4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_SPI_IRQHandler+0x66>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	09db      	lsrs	r3, r3, #7
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
    return;
 8002964:	e0c6      	b.n	8002af4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_SPI_IRQHandler+0x8c>
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b4 	beq.w	8002af4 <HAL_SPI_IRQHandler+0x1f4>
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80ad 	beq.w	8002af4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d023      	beq.n	80029ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d011      	beq.n	80029d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	e00b      	b.n	80029ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
        return;
 80029ec:	e082      	b.n	8002af4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d014      	beq.n	8002a24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0208 	orr.w	r2, r3, #8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d04f      	beq.n	8002af2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_SPI_IRQHandler+0x17e>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d034      	beq.n	8002ae8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0203 	bic.w	r2, r2, #3
 8002a8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d011      	beq.n	8002aba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_SPI_IRQHandler+0x1fc>)
 8002a9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fc1c 	bl	80012e0 <HAL_DMA_Abort_IT>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_SPI_IRQHandler+0x1fc>)
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fc06 	bl	80012e0 <HAL_DMA_Abort_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ae6:	e003      	b.n	8002af0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f809 	bl	8002b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002aee:	e000      	b.n	8002af2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002af0:	bf00      	nop
    return;
 8002af2:	bf00      	nop
  }
}
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08002b15 	.word	0x08002b15

08002b00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ffe6 	bl	8002b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b4c:	f7fe fab6 	bl	80010bc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b5c:	f7fe faae 	bl	80010bc <HAL_GetTick>
 8002b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	0d1b      	lsrs	r3, r3, #20
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	e054      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d050      	beq.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b7c:	f7fe fa9e 	bl	80010bc <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d902      	bls.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13d      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d111      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d004      	beq.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d107      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d10f      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e017      	b.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d19b      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000001c 	.word	0x2000001c

08002c4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c60:	d111      	bne.n	8002c86 <SPI_EndRxTransaction+0x3a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6a:	d004      	beq.n	8002c76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c74:	d107      	bne.n	8002c86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8e:	d12a      	bne.n	8002ce6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d012      	beq.n	8002cc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff ff49 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02d      	beq.n	8002d0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e026      	b.n	8002d0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2101      	movs	r1, #1
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff ff36 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e013      	b.n	8002d0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2101      	movs	r1, #1
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff ff23 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <SPI_EndRxTxTransaction+0x7c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <SPI_EndRxTxTransaction+0x80>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0d5b      	lsrs	r3, r3, #21
 8002d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d42:	d112      	bne.n	8002d6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff fef4 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e00f      	b.n	8002d8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b80      	cmp	r3, #128	; 0x80
 8002d82:	d0f2      	beq.n	8002d6a <SPI_EndRxTxTransaction+0x52>
 8002d84:	e000      	b.n	8002d88 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d86:	bf00      	nop
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000001c 	.word	0x2000001c
 8002d98:	165e9f81 	.word	0x165e9f81

08002d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e041      	b.n	8002e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f839 	bl	8002e3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f000 f9ca 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e044      	b.n	8002ef2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d013      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_TIM_Base_Start_IT+0xbc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <HAL_TIM_Base_Start_IT+0xc0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d010      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	e007      	b.n	8002ef0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000

08002f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0202 	mvn.w	r2, #2
 8002f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8ee 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8e0 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f8f1 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d122      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0204 	mvn.w	r2, #4
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f8c4 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8b6 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f8c7 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d122      	bne.n	8003018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d11b      	bne.n	8003018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0208 	mvn.w	r2, #8
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2204      	movs	r2, #4
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f89a 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f88c 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f89d 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b10      	cmp	r3, #16
 8003024:	d122      	bne.n	800306c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b10      	cmp	r3, #16
 8003032:	d11b      	bne.n	800306c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0210 	mvn.w	r2, #16
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2208      	movs	r2, #8
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f870 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f862 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f873 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d10e      	bne.n	8003098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0201 	mvn.w	r2, #1
 8003090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fdb0 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8e2 	bl	8003288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f838 	bl	8003160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b20      	cmp	r3, #32
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0220 	mvn.w	r2, #32
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8ac 	bl	8003274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a34      	ldr	r2, [pc, #208]	; (8003258 <TIM_Base_SetConfig+0xe4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00f      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d00b      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <TIM_Base_SetConfig+0xe8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a30      	ldr	r2, [pc, #192]	; (8003260 <TIM_Base_SetConfig+0xec>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <TIM_Base_SetConfig+0xf0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d108      	bne.n	80031be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <TIM_Base_SetConfig+0xe4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01b      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031cc:	d017      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a22      	ldr	r2, [pc, #136]	; (800325c <TIM_Base_SetConfig+0xe8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a21      	ldr	r2, [pc, #132]	; (8003260 <TIM_Base_SetConfig+0xec>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a20      	ldr	r2, [pc, #128]	; (8003264 <TIM_Base_SetConfig+0xf0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <TIM_Base_SetConfig+0xf4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <TIM_Base_SetConfig+0xf8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <TIM_Base_SetConfig+0xfc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <TIM_Base_SetConfig+0xe4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40014000 	.word	0x40014000
 800326c:	40014400 	.word	0x40014400
 8003270:	40014800 	.word	0x40014800

08003274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e03f      	b.n	800332e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fd24 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f829 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	b09f      	sub	sp, #124	; 0x7c
 800333e:	af00      	add	r7, sp, #0
 8003340:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	68d9      	ldr	r1, [r3, #12]
 8003350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	ea40 0301 	orr.w	r3, r0, r1
 8003358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	431a      	orrs	r2, r3
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	431a      	orrs	r2, r3
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4313      	orrs	r3, r2
 8003370:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800337c:	f021 010c 	bic.w	r1, r1, #12
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003386:	430b      	orrs	r3, r1
 8003388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	6999      	ldr	r1, [r3, #24]
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	ea40 0301 	orr.w	r3, r0, r1
 80033a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4bc5      	ldr	r3, [pc, #788]	; (80036bc <UART_SetConfig+0x384>)
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d004      	beq.n	80033b6 <UART_SetConfig+0x7e>
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4bc3      	ldr	r3, [pc, #780]	; (80036c0 <UART_SetConfig+0x388>)
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d103      	bne.n	80033be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033b6:	f7fe fde5 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 80033ba:	6778      	str	r0, [r7, #116]	; 0x74
 80033bc:	e002      	b.n	80033c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033be:	f7fe fdcd 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 80033c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033cc:	f040 80b6 	bne.w	800353c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d2:	461c      	mov	r4, r3
 80033d4:	f04f 0500 	mov.w	r5, #0
 80033d8:	4622      	mov	r2, r4
 80033da:	462b      	mov	r3, r5
 80033dc:	1891      	adds	r1, r2, r2
 80033de:	6439      	str	r1, [r7, #64]	; 0x40
 80033e0:	415b      	adcs	r3, r3
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033e8:	1912      	adds	r2, r2, r4
 80033ea:	eb45 0303 	adc.w	r3, r5, r3
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033fc:	00d0      	lsls	r0, r2, #3
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	1911      	adds	r1, r2, r4
 8003404:	6639      	str	r1, [r7, #96]	; 0x60
 8003406:	416b      	adcs	r3, r5
 8003408:	667b      	str	r3, [r7, #100]	; 0x64
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	1891      	adds	r1, r2, r2
 8003416:	63b9      	str	r1, [r7, #56]	; 0x38
 8003418:	415b      	adcs	r3, r3
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003424:	f7fc ff2c 	bl	8000280 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4ba5      	ldr	r3, [pc, #660]	; (80036c4 <UART_SetConfig+0x38c>)
 800342e:	fba3 2302 	umull	r2, r3, r3, r2
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	011e      	lsls	r6, r3, #4
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	461c      	mov	r4, r3
 800343a:	f04f 0500 	mov.w	r5, #0
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	1891      	adds	r1, r2, r2
 8003444:	6339      	str	r1, [r7, #48]	; 0x30
 8003446:	415b      	adcs	r3, r3
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
 800344a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800344e:	1912      	adds	r2, r2, r4
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	00d9      	lsls	r1, r3, #3
 800345e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003462:	00d0      	lsls	r0, r2, #3
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	1911      	adds	r1, r2, r4
 800346a:	65b9      	str	r1, [r7, #88]	; 0x58
 800346c:	416b      	adcs	r3, r5
 800346e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	1891      	adds	r1, r2, r2
 800347c:	62b9      	str	r1, [r7, #40]	; 0x28
 800347e:	415b      	adcs	r3, r3
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003486:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800348a:	f7fc fef9 	bl	8000280 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4b8c      	ldr	r3, [pc, #560]	; (80036c4 <UART_SetConfig+0x38c>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <UART_SetConfig+0x38c>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b4:	441e      	add	r6, r3
 80034b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b8:	4618      	mov	r0, r3
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	1894      	adds	r4, r2, r2
 80034c4:	623c      	str	r4, [r7, #32]
 80034c6:	415b      	adcs	r3, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ce:	1812      	adds	r2, r2, r0
 80034d0:	eb41 0303 	adc.w	r3, r1, r3
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	f04f 0500 	mov.w	r5, #0
 80034dc:	00dd      	lsls	r5, r3, #3
 80034de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034e2:	00d4      	lsls	r4, r2, #3
 80034e4:	4622      	mov	r2, r4
 80034e6:	462b      	mov	r3, r5
 80034e8:	1814      	adds	r4, r2, r0
 80034ea:	653c      	str	r4, [r7, #80]	; 0x50
 80034ec:	414b      	adcs	r3, r1
 80034ee:	657b      	str	r3, [r7, #84]	; 0x54
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	61b9      	str	r1, [r7, #24]
 80034fe:	415b      	adcs	r3, r3
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800350a:	f7fc feb9 	bl	8000280 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <UART_SetConfig+0x38c>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <UART_SetConfig+0x38c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4432      	add	r2, r6
 8003538:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353a:	e0b9      	b.n	80036b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	461c      	mov	r4, r3
 8003540:	f04f 0500 	mov.w	r5, #0
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	1891      	adds	r1, r2, r2
 800354a:	6139      	str	r1, [r7, #16]
 800354c:	415b      	adcs	r3, r3
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003554:	1912      	adds	r2, r2, r4
 8003556:	eb45 0303 	adc.w	r3, r5, r3
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	eb12 0804 	adds.w	r8, r2, r4
 8003572:	eb43 0905 	adc.w	r9, r3, r5
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	008b      	lsls	r3, r1, #2
 800358a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800358e:	0082      	lsls	r2, r0, #2
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	f7fc fe74 	bl	8000280 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <UART_SetConfig+0x38c>)
 800359e:	fba3 2302 	umull	r2, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	011e      	lsls	r6, r3, #4
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	4618      	mov	r0, r3
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	1894      	adds	r4, r2, r2
 80035b4:	60bc      	str	r4, [r7, #8]
 80035b6:	415b      	adcs	r3, r3
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035be:	1812      	adds	r2, r2, r0
 80035c0:	eb41 0303 	adc.w	r3, r1, r3
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	f04f 0500 	mov.w	r5, #0
 80035cc:	00dd      	lsls	r5, r3, #3
 80035ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035d2:	00d4      	lsls	r4, r2, #3
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
 80035d8:	1814      	adds	r4, r2, r0
 80035da:	64bc      	str	r4, [r7, #72]	; 0x48
 80035dc:	414b      	adcs	r3, r1
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	008b      	lsls	r3, r1, #2
 80035f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035f8:	0082      	lsls	r2, r0, #2
 80035fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035fe:	f7fc fe3f 	bl	8000280 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <UART_SetConfig+0x38c>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2164      	movs	r1, #100	; 0x64
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <UART_SetConfig+0x38c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	441e      	add	r6, r3
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	4618      	mov	r0, r3
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	1894      	adds	r4, r2, r2
 8003636:	603c      	str	r4, [r7, #0]
 8003638:	415b      	adcs	r3, r3
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003640:	1812      	adds	r2, r2, r0
 8003642:	eb41 0303 	adc.w	r3, r1, r3
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	f04f 0500 	mov.w	r5, #0
 800364e:	00dd      	lsls	r5, r3, #3
 8003650:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003654:	00d4      	lsls	r4, r2, #3
 8003656:	4622      	mov	r2, r4
 8003658:	462b      	mov	r3, r5
 800365a:	eb12 0a00 	adds.w	sl, r2, r0
 800365e:	eb43 0b01 	adc.w	fp, r3, r1
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	008b      	lsls	r3, r1, #2
 8003676:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800367a:	0082      	lsls	r2, r0, #2
 800367c:	4650      	mov	r0, sl
 800367e:	4659      	mov	r1, fp
 8003680:	f7fc fdfe 	bl	8000280 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <UART_SetConfig+0x38c>)
 800368a:	fba3 1302 	umull	r1, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2164      	movs	r1, #100	; 0x64
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <UART_SetConfig+0x38c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4432      	add	r2, r6
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	377c      	adds	r7, #124	; 0x7c
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40011400 	.word	0x40011400
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SysTick_Handler+0x1c>)
 80036ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80036d0:	f001 fc72 	bl	8004fb8 <xTaskGetSchedulerState>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80036da:	f002 fa5d 	bl	8005b98 <xPortSysTickHandler>
  }
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000e010 	.word	0xe000e010

080036e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <vApplicationGetIdleTaskMemory+0x2c>)
 80036f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a06      	ldr	r2, [pc, #24]	; (8003718 <vApplicationGetIdleTaskMemory+0x30>)
 80036fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	200000b8 	.word	0x200000b8
 8003718:	20000114 	.word	0x20000114

0800371c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a07      	ldr	r2, [pc, #28]	; (8003748 <vApplicationGetTimerTaskMemory+0x2c>)
 800372c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a06      	ldr	r2, [pc, #24]	; (800374c <vApplicationGetTimerTaskMemory+0x30>)
 8003732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000314 	.word	0x20000314
 800374c:	20000370 	.word	0x20000370

08003750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f103 0208 	add.w	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0208 	add.w	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f103 0208 	add.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d103      	bne.n	8003812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00c      	b.n	800382c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3308      	adds	r3, #8
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e002      	b.n	8003820 <vListInsert+0x2e>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d2f6      	bcs.n	800381a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6852      	ldr	r2, [r2, #4]
 8003884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d103      	bne.n	8003898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038e2:	f002 f8c7 	bl	8005a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	441a      	add	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	3b01      	subs	r3, #1
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	441a      	add	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22ff      	movs	r2, #255	; 0xff
 800392e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01a      	beq.n	8003976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3310      	adds	r3, #16
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f979 	bl	8004c3c <xTaskRemoveFromEventList>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <xQueueGenericReset+0xcc>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	e009      	b.n	8003976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3310      	adds	r3, #16
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fef2 	bl	8003750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff feed 	bl	8003750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003976:	f002 f8ad 	bl	8005ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800397a:	2301      	movs	r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <xQueueGenericCreateStatic+0x52>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <xQueueGenericCreateStatic+0x56>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <xQueueGenericCreateStatic+0x58>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	623b      	str	r3, [r7, #32]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <xQueueGenericCreateStatic+0x7e>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <xQueueGenericCreateStatic+0x82>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <xQueueGenericCreateStatic+0x84>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	61fb      	str	r3, [r7, #28]
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a26:	2350      	movs	r3, #80	; 0x50
 8003a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b50      	cmp	r3, #80	; 0x50
 8003a2e:	d00a      	beq.n	8003a46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	61bb      	str	r3, [r7, #24]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f805 	bl	8003a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3730      	adds	r7, #48	; 0x30
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	69b8      	ldr	r0, [r7, #24]
 8003aaa:	f7ff ff05 	bl	80038b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericSend+0x32>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <xQueueGenericSend+0x40>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <xQueueGenericSend+0x44>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <xQueueGenericSend+0x46>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <xQueueGenericSend+0x60>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b1c:	bf00      	nop
 8003b1e:	e7fe      	b.n	8003b1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d103      	bne.n	8003b2e <xQueueGenericSend+0x6e>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <xQueueGenericSend+0x72>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <xQueueGenericSend+0x74>
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <xQueueGenericSend+0x8e>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	623b      	str	r3, [r7, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b4e:	f001 fa33 	bl	8004fb8 <xTaskGetSchedulerState>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <xQueueGenericSend+0x9e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <xQueueGenericSend+0xa2>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <xQueueGenericSend+0xa4>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	61fb      	str	r3, [r7, #28]
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b7e:	f001 ff79 	bl	8005a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <xQueueGenericSend+0xd4>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d129      	bne.n	8003be8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9a:	f000 fa0b 	bl	8003fb4 <prvCopyDataToQueue>
 8003b9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	3324      	adds	r3, #36	; 0x24
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f845 	bl	8004c3c <xTaskRemoveFromEventList>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <xQueueGenericSend+0x1f8>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	e00a      	b.n	8003be0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <xQueueGenericSend+0x1f8>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003be0:	f001 ff78 	bl	8005ad4 <vPortExitCritical>
				return pdPASS;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e063      	b.n	8003cb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bee:	f001 ff71 	bl	8005ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e05c      	b.n	8003cb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 f87f 	bl	8004d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c06:	2301      	movs	r3, #1
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c0a:	f001 ff63 	bl	8005ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c0e:	f000 fdf1 	bl	80047f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c12:	f001 ff2f 	bl	8005a74 <vPortEnterCritical>
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c1c:	b25b      	sxtb	r3, r3
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d103      	bne.n	8003c2c <xQueueGenericSend+0x16c>
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d103      	bne.n	8003c42 <xQueueGenericSend+0x182>
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c42:	f001 ff47 	bl	8005ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c46:	1d3a      	adds	r2, r7, #4
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 f86e 	bl	8004d30 <xTaskCheckForTimeOut>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d124      	bne.n	8003ca4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5c:	f000 faa2 	bl	80041a4 <prvIsQueueFull>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	3310      	adds	r3, #16
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 ff94 	bl	8004b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c76:	f000 fa2d 	bl	80040d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c7a:	f000 fdc9 	bl	8004810 <xTaskResumeAll>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f47f af7c 	bne.w	8003b7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <xQueueGenericSend+0x1f8>)
 8003c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	e772      	b.n	8003b7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c9a:	f000 fa1b 	bl	80040d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c9e:	f000 fdb7 	bl	8004810 <xTaskResumeAll>
 8003ca2:	e76c      	b.n	8003b7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ca6:	f000 fa15 	bl	80040d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003caa:	f000 fdb1 	bl	8004810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3738      	adds	r7, #56	; 0x38
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b090      	sub	sp, #64	; 0x40
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <xQueueGenericSendFromISR+0x3c>
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <xQueueGenericSendFromISR+0x40>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <xQueueGenericSendFromISR+0x42>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d103      	bne.n	8003d26 <xQueueGenericSendFromISR+0x6a>
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <xQueueGenericSendFromISR+0x6e>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <xQueueGenericSendFromISR+0x70>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	623b      	str	r3, [r7, #32]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d46:	f001 ff77 	bl	8005c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	61fa      	str	r2, [r7, #28]
 8003d60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <xQueueGenericSendFromISR+0xbc>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d12f      	bne.n	8003dd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d8e:	f000 f911 	bl	8003fb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d112      	bne.n	8003dc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d016      	beq.n	8003dd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	3324      	adds	r3, #36	; 0x24
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ff47 	bl	8004c3c <xTaskRemoveFromEventList>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e007      	b.n	8003dd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	b25a      	sxtb	r2, r3
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003dd6:	e001      	b.n	8003ddc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003de6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3740      	adds	r7, #64	; 0x40
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <xQueueReceive+0x30>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	623b      	str	r3, [r7, #32]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <xQueueReceive+0x3e>
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <xQueueReceive+0x42>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueReceive+0x44>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <xQueueReceive+0x5e>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e52:	f001 f8b1 	bl	8004fb8 <xTaskGetSchedulerState>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <xQueueReceive+0x6e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <xQueueReceive+0x72>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <xQueueReceive+0x74>
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xQueueReceive+0x8e>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	61bb      	str	r3, [r7, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e82:	f001 fdf7 	bl	8005a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01f      	beq.n	8003ed2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e96:	f000 f8f7 	bl	8004088 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00f      	beq.n	8003eca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	3310      	adds	r3, #16
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fec4 	bl	8004c3c <xTaskRemoveFromEventList>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <xQueueReceive+0x1bc>)
 8003ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eca:	f001 fe03 	bl	8005ad4 <vPortExitCritical>
				return pdPASS;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e069      	b.n	8003fa6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ed8:	f001 fdfc 	bl	8005ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e062      	b.n	8003fa6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ee6:	f107 0310 	add.w	r3, r7, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 ff0a 	bl	8004d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ef4:	f001 fdee 	bl	8005ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ef8:	f000 fc7c 	bl	80047f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003efc:	f001 fdba 	bl	8005a74 <vPortEnterCritical>
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d103      	bne.n	8003f16 <xQueueReceive+0x122>
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d103      	bne.n	8003f2c <xQueueReceive+0x138>
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f2c:	f001 fdd2 	bl	8005ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f30:	1d3a      	adds	r2, r7, #4
 8003f32:	f107 0310 	add.w	r3, r7, #16
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fef9 	bl	8004d30 <xTaskCheckForTimeOut>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d123      	bne.n	8003f8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f46:	f000 f917 	bl	8004178 <prvIsQueueEmpty>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	3324      	adds	r3, #36	; 0x24
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fe1f 	bl	8004b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f60:	f000 f8b8 	bl	80040d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f64:	f000 fc54 	bl	8004810 <xTaskResumeAll>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d189      	bne.n	8003e82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <xQueueReceive+0x1bc>)
 8003f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	e780      	b.n	8003e82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f82:	f000 f8a7 	bl	80040d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f86:	f000 fc43 	bl	8004810 <xTaskResumeAll>
 8003f8a:	e77a      	b.n	8003e82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f8e:	f000 f8a1 	bl	80040d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f92:	f000 fc3d 	bl	8004810 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f98:	f000 f8ee 	bl	8004178 <prvIsQueueEmpty>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f43f af6f 	beq.w	8003e82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3730      	adds	r7, #48	; 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d14d      	bne.n	8004076 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 f808 	bl	8004ff4 <xTaskPriorityDisinherit>
 8003fe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	e043      	b.n	8004076 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d119      	bne.n	8004028 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6858      	ldr	r0, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	f002 f86e 	bl	80060e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	441a      	add	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d32b      	bcc.n	8004076 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	e026      	b.n	8004076 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68d8      	ldr	r0, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	461a      	mov	r2, r3
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	f002 f854 	bl	80060e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	425b      	negs	r3, r3
 8004042:	441a      	add	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d207      	bcs.n	8004064 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	425b      	negs	r3, r3
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d105      	bne.n	8004076 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3b01      	subs	r3, #1
 8004074:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800407e:	697b      	ldr	r3, [r7, #20]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d018      	beq.n	80040cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d303      	bcc.n	80040bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	461a      	mov	r2, r3
 80040c6:	6838      	ldr	r0, [r7, #0]
 80040c8:	f002 f80a 	bl	80060e0 <memcpy>
	}
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040dc:	f001 fcca 	bl	8005a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e8:	e011      	b.n	800410e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fda0 	bl	8004c3c <xTaskRemoveFromEventList>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004102:	f000 fe77 	bl	8004df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	3b01      	subs	r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	dce9      	bgt.n	80040ea <prvUnlockQueue+0x16>
 8004116:	e000      	b.n	800411a <prvUnlockQueue+0x46>
					break;
 8004118:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004122:	f001 fcd7 	bl	8005ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004126:	f001 fca5 	bl	8005a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004130:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004132:	e011      	b.n	8004158 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3310      	adds	r3, #16
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fd7b 	bl	8004c3c <xTaskRemoveFromEventList>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800414c:	f000 fe52 	bl	8004df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	3b01      	subs	r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800415c:	2b00      	cmp	r3, #0
 800415e:	dce9      	bgt.n	8004134 <prvUnlockQueue+0x60>
 8004160:	e000      	b.n	8004164 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004162:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	22ff      	movs	r2, #255	; 0xff
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800416c:	f001 fcb2 	bl	8005ad4 <vPortExitCritical>
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004180:	f001 fc78 	bl	8005a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e001      	b.n	8004196 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004196:	f001 fc9d 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041ac:	f001 fc62 	bl	8005a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d102      	bne.n	80041c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e001      	b.n	80041c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041c6:	f001 fc85 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 80041ca:	68fb      	ldr	r3, [r7, #12]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e014      	b.n	800420e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <vQueueAddToRegistry+0x50>)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <vQueueAddToRegistry+0x50>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <vQueueAddToRegistry+0x50>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004206:	e006      	b.n	8004216 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b07      	cmp	r3, #7
 8004212:	d9e7      	bls.n	80041e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20004abc 	.word	0x20004abc

08004228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004238:	f001 fc1c 	bl	8005a74 <vPortEnterCritical>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004242:	b25b      	sxtb	r3, r3
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d103      	bne.n	8004252 <vQueueWaitForMessageRestricted+0x2a>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004258:	b25b      	sxtb	r3, r3
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d103      	bne.n	8004268 <vQueueWaitForMessageRestricted+0x40>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004268:	f001 fc34 	bl	8005ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fcb1 	bl	8004be4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff ff26 	bl	80040d4 <prvUnlockQueue>
	}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	623b      	str	r3, [r7, #32]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	61fb      	str	r3, [r7, #28]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042d6:	235c      	movs	r3, #92	; 0x5c
 80042d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b5c      	cmp	r3, #92	; 0x5c
 80042de:	d00a      	beq.n	80042f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61bb      	str	r3, [r7, #24]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01e      	beq.n	800433c <xTaskCreateStatic+0xac>
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004316:	2300      	movs	r3, #0
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	9302      	str	r3, [sp, #8]
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f850 	bl	80043d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004336:	f000 f8dd 	bl	80044f4 <prvAddNewTaskToReadyList>
 800433a:	e001      	b.n	8004340 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3728      	adds	r7, #40	; 0x28
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800434a:	b580      	push	{r7, lr}
 800434c:	b08c      	sub	sp, #48	; 0x30
 800434e:	af04      	add	r7, sp, #16
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fcaa 	bl	8005cb8 <pvPortMalloc>
 8004364:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800436c:	205c      	movs	r0, #92	; 0x5c
 800436e:	f001 fca3 	bl	8005cb8 <pvPortMalloc>
 8004372:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
 8004380:	e005      	b.n	800438e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f001 fd64 	bl	8005e50 <vPortFree>
 8004388:	e001      	b.n	800438e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	2300      	movs	r3, #0
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	9302      	str	r3, [sp, #8]
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f80e 	bl	80043d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043b8:	69f8      	ldr	r0, [r7, #28]
 80043ba:	f000 f89b 	bl	80044f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e002      	b.n	80043ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ca:	69bb      	ldr	r3, [r7, #24]
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	21a5      	movs	r1, #165	; 0xa5
 80043ee:	f001 fe85 	bl	80060fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	3b01      	subs	r3, #1
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	617b      	str	r3, [r7, #20]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01f      	beq.n	8004472 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e012      	b.n	800445e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	7819      	ldrb	r1, [r3, #0]
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	3334      	adds	r3, #52	; 0x34
 8004448:	460a      	mov	r2, r1
 800444a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d9e9      	bls.n	8004438 <prvInitialiseNewTask+0x64>
 8004464:	e000      	b.n	8004468 <prvInitialiseNewTask+0x94>
			{
				break;
 8004466:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004470:	e003      	b.n	800447a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b37      	cmp	r3, #55	; 0x37
 800447e:	d901      	bls.n	8004484 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004480:	2337      	movs	r3, #55	; 0x37
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f978 	bl	8003790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	3318      	adds	r3, #24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff f973 	bl	8003790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	69b8      	ldr	r0, [r7, #24]
 80044d4:	f001 f99e 	bl	8005814 <pxPortInitialiseStack>
 80044d8:	4602      	mov	r2, r0
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ea:	bf00      	nop
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044fc:	f001 faba 	bl	8005a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 8004508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800450a:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004512:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d110      	bne.n	8004542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004520:	f000 fc8c 	bl	8004e3c <prvInitialiseTaskLists>
 8004524:	e00d      	b.n	8004542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <prvAddNewTaskToReadyList+0xcc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	429a      	cmp	r2, r3
 800453a:	d802      	bhi.n	8004542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 800454a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <prvAddNewTaskToReadyList+0xd4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d903      	bls.n	8004568 <prvAddNewTaskToReadyList+0x74>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <prvAddNewTaskToReadyList+0xd4>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <prvAddNewTaskToReadyList+0xd8>)
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7ff f913 	bl	80037aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004584:	f001 faa6 	bl	8005ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <prvAddNewTaskToReadyList+0xcc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	429a      	cmp	r2, r3
 800459c:	d207      	bcs.n	80045ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <prvAddNewTaskToReadyList+0xdc>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000c44 	.word	0x20000c44
 80045bc:	20000770 	.word	0x20000770
 80045c0:	20000c50 	.word	0x20000c50
 80045c4:	20000c60 	.word	0x20000c60
 80045c8:	20000c4c 	.word	0x20000c4c
 80045cc:	20000774 	.word	0x20000774
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d017      	beq.n	8004616 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <vTaskDelay+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <vTaskDelay+0x30>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60bb      	str	r3, [r7, #8]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004604:	f000 f8f6 	bl	80047f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004608:	2100      	movs	r1, #0
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fd60 	bl	80050d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004610:	f000 f8fe 	bl	8004810 <xTaskResumeAll>
 8004614:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <vTaskDelay+0x64>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000c6c 	.word	0x20000c6c
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004644:	f001 fa16 	bl	8005a74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <vTaskSuspend+0x18>
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <vTaskSuspend+0xd4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	e000      	b.n	8004656 <vTaskSuspend+0x1a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3304      	adds	r3, #4
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff f901 	bl	8003864 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3318      	adds	r3, #24
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff f8f8 	bl	8003864 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4826      	ldr	r0, [pc, #152]	; (8004714 <vTaskSuspend+0xd8>)
 800467c:	f7ff f895 	bl	80037aa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d103      	bne.n	8004694 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004694:	f001 fa1e 	bl	8005ad4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <vTaskSuspend+0xdc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80046a0:	f001 f9e8 	bl	8005a74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80046a4:	f000 fc68 	bl	8004f78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80046a8:	f001 fa14 	bl	8005ad4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80046ac:	4b18      	ldr	r3, [pc, #96]	; (8004710 <vTaskSuspend+0xd4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d127      	bne.n	8004706 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80046b6:	4b18      	ldr	r3, [pc, #96]	; (8004718 <vTaskSuspend+0xdc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80046be:	4b17      	ldr	r3, [pc, #92]	; (800471c <vTaskSuspend+0xe0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <vTaskSuspend+0xa0>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	60bb      	str	r3, [r7, #8]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <vTaskSuspend+0xe4>)
 80046de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ec:	e00b      	b.n	8004706 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <vTaskSuspend+0xd8>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <vTaskSuspend+0xe8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d103      	bne.n	8004702 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <vTaskSuspend+0xd4>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
	}
 8004700:	e001      	b.n	8004706 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8004702:	f000 f9ed 	bl	8004ae0 <vTaskSwitchContext>
	}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000770 	.word	0x20000770
 8004714:	20000c30 	.word	0x20000c30
 8004718:	20000c50 	.word	0x20000c50
 800471c:	20000c6c 	.word	0x20000c6c
 8004720:	e000ed04 	.word	0xe000ed04
 8004724:	20000c44 	.word	0x20000c44

08004728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004736:	463a      	mov	r2, r7
 8004738:	1d39      	adds	r1, r7, #4
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe ffd2 	bl	80036e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	9202      	str	r2, [sp, #8]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	2300      	movs	r3, #0
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	460a      	mov	r2, r1
 8004756:	4921      	ldr	r1, [pc, #132]	; (80047dc <vTaskStartScheduler+0xb4>)
 8004758:	4821      	ldr	r0, [pc, #132]	; (80047e0 <vTaskStartScheduler+0xb8>)
 800475a:	f7ff fd99 	bl	8004290 <xTaskCreateStatic>
 800475e:	4603      	mov	r3, r0
 8004760:	4a20      	ldr	r2, [pc, #128]	; (80047e4 <vTaskStartScheduler+0xbc>)
 8004762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <vTaskStartScheduler+0xbc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800476c:	2301      	movs	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e001      	b.n	8004776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d102      	bne.n	8004782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800477c:	f000 fcfc 	bl	8005178 <xTimerCreateTimerTask>
 8004780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d116      	bne.n	80047b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	613b      	str	r3, [r7, #16]
}
 800479a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <vTaskStartScheduler+0xc0>)
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <vTaskStartScheduler+0xc4>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <vTaskStartScheduler+0xc8>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047b0:	f001 f8be 	bl	8005930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047b4:	e00e      	b.n	80047d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d10a      	bne.n	80047d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60fb      	str	r3, [r7, #12]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <vTaskStartScheduler+0xaa>
}
 80047d4:	bf00      	nop
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08006ff4 	.word	0x08006ff4
 80047e0:	08004e0d 	.word	0x08004e0d
 80047e4:	20000c68 	.word	0x20000c68
 80047e8:	20000c64 	.word	0x20000c64
 80047ec:	20000c50 	.word	0x20000c50
 80047f0:	20000c48 	.word	0x20000c48

080047f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <vTaskSuspendAll+0x18>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a03      	ldr	r2, [pc, #12]	; (800480c <vTaskSuspendAll+0x18>)
 8004800:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	20000c6c 	.word	0x20000c6c

08004810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800481e:	4b42      	ldr	r3, [pc, #264]	; (8004928 <xTaskResumeAll+0x118>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <xTaskResumeAll+0x2c>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	603b      	str	r3, [r7, #0]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800483c:	f001 f91a 	bl	8005a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004840:	4b39      	ldr	r3, [pc, #228]	; (8004928 <xTaskResumeAll+0x118>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3b01      	subs	r3, #1
 8004846:	4a38      	ldr	r2, [pc, #224]	; (8004928 <xTaskResumeAll+0x118>)
 8004848:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <xTaskResumeAll+0x118>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d162      	bne.n	8004918 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <xTaskResumeAll+0x11c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d05e      	beq.n	8004918 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800485a:	e02f      	b.n	80048bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485c:	4b34      	ldr	r3, [pc, #208]	; (8004930 <xTaskResumeAll+0x120>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3318      	adds	r3, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe fffb 	bl	8003864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fff6 	bl	8003864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <xTaskResumeAll+0x124>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <xTaskResumeAll+0x7c>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <xTaskResumeAll+0x124>)
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <xTaskResumeAll+0x128>)
 800489a:	441a      	add	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7fe ff81 	bl	80037aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4b23      	ldr	r3, [pc, #140]	; (800493c <xTaskResumeAll+0x12c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <xTaskResumeAll+0x130>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <xTaskResumeAll+0x120>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1cb      	bne.n	800485c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048ca:	f000 fb55 	bl	8004f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ce:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <xTaskResumeAll+0x134>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048da:	f000 f847 	bl	800496c <xTaskIncrementTick>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048e4:	4b16      	ldr	r3, [pc, #88]	; (8004940 <xTaskResumeAll+0x130>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f1      	bne.n	80048da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <xTaskResumeAll+0x134>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <xTaskResumeAll+0x130>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <xTaskResumeAll+0x138>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004918:	f001 f8dc 	bl	8005ad4 <vPortExitCritical>

	return xAlreadyYielded;
 800491c:	68bb      	ldr	r3, [r7, #8]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000c6c 	.word	0x20000c6c
 800492c:	20000c44 	.word	0x20000c44
 8004930:	20000c04 	.word	0x20000c04
 8004934:	20000c4c 	.word	0x20000c4c
 8004938:	20000774 	.word	0x20000774
 800493c:	20000770 	.word	0x20000770
 8004940:	20000c58 	.word	0x20000c58
 8004944:	20000c54 	.word	0x20000c54
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <xTaskGetTickCount+0x1c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004958:	687b      	ldr	r3, [r7, #4]
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000c48 	.word	0x20000c48

0800496c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004976:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <xTaskIncrementTick+0x148>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f040 808f 	bne.w	8004a9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004980:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <xTaskIncrementTick+0x14c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004988:	4a4b      	ldr	r2, [pc, #300]	; (8004ab8 <xTaskIncrementTick+0x14c>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d120      	bne.n	80049d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004994:	4b49      	ldr	r3, [pc, #292]	; (8004abc <xTaskIncrementTick+0x150>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	603b      	str	r3, [r7, #0]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <xTaskIncrementTick+0x46>
 80049b4:	4b41      	ldr	r3, [pc, #260]	; (8004abc <xTaskIncrementTick+0x150>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <xTaskIncrementTick+0x154>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <xTaskIncrementTick+0x150>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4a3f      	ldr	r2, [pc, #252]	; (8004ac0 <xTaskIncrementTick+0x154>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <xTaskIncrementTick+0x158>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	4a3d      	ldr	r2, [pc, #244]	; (8004ac4 <xTaskIncrementTick+0x158>)
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	f000 fad1 	bl	8004f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049d6:	4b3c      	ldr	r3, [pc, #240]	; (8004ac8 <xTaskIncrementTick+0x15c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d349      	bcc.n	8004a74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e0:	4b36      	ldr	r3, [pc, #216]	; (8004abc <xTaskIncrementTick+0x150>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <xTaskIncrementTick+0x15c>)
 80049ec:	f04f 32ff 	mov.w	r2, #4294967295
 80049f0:	601a      	str	r2, [r3, #0]
					break;
 80049f2:	e03f      	b.n	8004a74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f4:	4b31      	ldr	r3, [pc, #196]	; (8004abc <xTaskIncrementTick+0x150>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d203      	bcs.n	8004a14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <xTaskIncrementTick+0x15c>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a12:	e02f      	b.n	8004a74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe ff23 	bl	8003864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3318      	adds	r3, #24
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe ff1a 	bl	8003864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <xTaskIncrementTick+0x160>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d903      	bls.n	8004a44 <xTaskIncrementTick+0xd8>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <xTaskIncrementTick+0x160>)
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <xTaskIncrementTick+0x164>)
 8004a52:	441a      	add	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f7fe fea5 	bl	80037aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <xTaskIncrementTick+0x168>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d3b8      	bcc.n	80049e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a72:	e7b5      	b.n	80049e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <xTaskIncrementTick+0x168>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	4915      	ldr	r1, [pc, #84]	; (8004ad0 <xTaskIncrementTick+0x164>)
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d901      	bls.n	8004a90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <xTaskIncrementTick+0x16c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e004      	b.n	8004aa8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <xTaskIncrementTick+0x170>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <xTaskIncrementTick+0x170>)
 8004aa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aa8:	697b      	ldr	r3, [r7, #20]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000c6c 	.word	0x20000c6c
 8004ab8:	20000c48 	.word	0x20000c48
 8004abc:	20000bfc 	.word	0x20000bfc
 8004ac0:	20000c00 	.word	0x20000c00
 8004ac4:	20000c5c 	.word	0x20000c5c
 8004ac8:	20000c64 	.word	0x20000c64
 8004acc:	20000c4c 	.word	0x20000c4c
 8004ad0:	20000774 	.word	0x20000774
 8004ad4:	20000770 	.word	0x20000770
 8004ad8:	20000c58 	.word	0x20000c58
 8004adc:	20000c54 	.word	0x20000c54

08004ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ae6:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <vTaskSwitchContext+0xa8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <vTaskSwitchContext+0xac>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004af4:	e041      	b.n	8004b7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004af6:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <vTaskSwitchContext+0xac>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <vTaskSwitchContext+0xb0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e010      	b.n	8004b26 <vTaskSwitchContext+0x46>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vTaskSwitchContext+0x3e>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	491b      	ldr	r1, [pc, #108]	; (8004b94 <vTaskSwitchContext+0xb4>)
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0e4      	beq.n	8004b04 <vTaskSwitchContext+0x24>
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <vTaskSwitchContext+0xb4>)
 8004b46:	4413      	add	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d104      	bne.n	8004b6a <vTaskSwitchContext+0x8a>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <vTaskSwitchContext+0xb8>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <vTaskSwitchContext+0xb0>)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6013      	str	r3, [r2, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000c6c 	.word	0x20000c6c
 8004b8c:	20000c58 	.word	0x20000c58
 8004b90:	20000c4c 	.word	0x20000c4c
 8004b94:	20000774 	.word	0x20000774
 8004b98:	20000770 	.word	0x20000770

08004b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <vTaskPlaceOnEventList+0x44>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3318      	adds	r3, #24
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe fe11 	bl	80037f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	6838      	ldr	r0, [r7, #0]
 8004bd4:	f000 fa7c 	bl	80050d0 <prvAddCurrentTaskToDelayedList>
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000770 	.word	0x20000770

08004be4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	617b      	str	r3, [r7, #20]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3318      	adds	r3, #24
 8004c12:	4619      	mov	r1, r3
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7fe fdc8 	bl	80037aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f000 fa51 	bl	80050d0 <prvAddCurrentTaskToDelayedList>
	}
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000770 	.word	0x20000770

08004c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fdf9 	bl	8003864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <xTaskRemoveFromEventList+0xb0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11d      	bne.n	8004cb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fdf0 	bl	8003864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <xTaskRemoveFromEventList+0xb4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d903      	bls.n	8004c98 <xTaskRemoveFromEventList+0x5c>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <xTaskRemoveFromEventList+0xb4>)
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <xTaskRemoveFromEventList+0xb8>)
 8004ca6:	441a      	add	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f7fe fd7b 	bl	80037aa <vListInsertEnd>
 8004cb4:	e005      	b.n	8004cc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	3318      	adds	r3, #24
 8004cba:	4619      	mov	r1, r3
 8004cbc:	480e      	ldr	r0, [pc, #56]	; (8004cf8 <xTaskRemoveFromEventList+0xbc>)
 8004cbe:	f7fe fd74 	bl	80037aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <xTaskRemoveFromEventList+0xc0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d905      	bls.n	8004cdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <xTaskRemoveFromEventList+0xc4>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e001      	b.n	8004ce0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000c6c 	.word	0x20000c6c
 8004cf0:	20000c4c 	.word	0x20000c4c
 8004cf4:	20000774 	.word	0x20000774
 8004cf8:	20000c04 	.word	0x20000c04
 8004cfc:	20000770 	.word	0x20000770
 8004d00:	20000c58 	.word	0x20000c58

08004d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <vTaskInternalSetTimeOutState+0x24>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <vTaskInternalSetTimeOutState+0x28>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	605a      	str	r2, [r3, #4]
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000c5c 	.word	0x20000c5c
 8004d2c:	20000c48 	.word	0x20000c48

08004d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	613b      	str	r3, [r7, #16]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60fb      	str	r3, [r7, #12]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d72:	f000 fe7f 	bl	8005a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <xTaskCheckForTimeOut+0xbc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d102      	bne.n	8004d96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e023      	b.n	8004dde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <xTaskCheckForTimeOut+0xc0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d007      	beq.n	8004db2 <xTaskCheckForTimeOut+0x82>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d302      	bcc.n	8004db2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e015      	b.n	8004dde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d20b      	bcs.n	8004dd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad2      	subs	r2, r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ff9b 	bl	8004d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	e004      	b.n	8004dde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dde:	f000 fe79 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 8004de2:	69fb      	ldr	r3, [r7, #28]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000c48 	.word	0x20000c48
 8004df0:	20000c5c 	.word	0x20000c5c

08004df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <vTaskMissedYield+0x14>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000c58 	.word	0x20000c58

08004e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e14:	f000 f852 	bl	8004ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <prvIdleTask+0x28>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d9f9      	bls.n	8004e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <prvIdleTask+0x2c>)
 8004e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e30:	e7f0      	b.n	8004e14 <prvIdleTask+0x8>
 8004e32:	bf00      	nop
 8004e34:	20000774 	.word	0x20000774
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e00c      	b.n	8004e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <prvInitialiseTaskLists+0x60>)
 8004e54:	4413      	add	r3, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fc7a 	bl	8003750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b37      	cmp	r3, #55	; 0x37
 8004e66:	d9ef      	bls.n	8004e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e68:	480d      	ldr	r0, [pc, #52]	; (8004ea0 <prvInitialiseTaskLists+0x64>)
 8004e6a:	f7fe fc71 	bl	8003750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e6e:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <prvInitialiseTaskLists+0x68>)
 8004e70:	f7fe fc6e 	bl	8003750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e74:	480c      	ldr	r0, [pc, #48]	; (8004ea8 <prvInitialiseTaskLists+0x6c>)
 8004e76:	f7fe fc6b 	bl	8003750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e7a:	480c      	ldr	r0, [pc, #48]	; (8004eac <prvInitialiseTaskLists+0x70>)
 8004e7c:	f7fe fc68 	bl	8003750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e80:	480b      	ldr	r0, [pc, #44]	; (8004eb0 <prvInitialiseTaskLists+0x74>)
 8004e82:	f7fe fc65 	bl	8003750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <prvInitialiseTaskLists+0x78>)
 8004e88:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <prvInitialiseTaskLists+0x64>)
 8004e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <prvInitialiseTaskLists+0x7c>)
 8004e8e:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <prvInitialiseTaskLists+0x68>)
 8004e90:	601a      	str	r2, [r3, #0]
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000774 	.word	0x20000774
 8004ea0:	20000bd4 	.word	0x20000bd4
 8004ea4:	20000be8 	.word	0x20000be8
 8004ea8:	20000c04 	.word	0x20000c04
 8004eac:	20000c18 	.word	0x20000c18
 8004eb0:	20000c30 	.word	0x20000c30
 8004eb4:	20000bfc 	.word	0x20000bfc
 8004eb8:	20000c00 	.word	0x20000c00

08004ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec2:	e019      	b.n	8004ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ec4:	f000 fdd6 	bl	8005a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec8:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <prvCheckTasksWaitingTermination+0x50>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe fcc5 	bl	8003864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <prvCheckTasksWaitingTermination+0x54>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4a0b      	ldr	r2, [pc, #44]	; (8004f10 <prvCheckTasksWaitingTermination+0x54>)
 8004ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <prvCheckTasksWaitingTermination+0x58>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4a0a      	ldr	r2, [pc, #40]	; (8004f14 <prvCheckTasksWaitingTermination+0x58>)
 8004eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eee:	f000 fdf1 	bl	8005ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f810 	bl	8004f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <prvCheckTasksWaitingTermination+0x58>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e1      	bne.n	8004ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000c18 	.word	0x20000c18
 8004f10:	20000c44 	.word	0x20000c44
 8004f14:	20000c2c 	.word	0x20000c2c

08004f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 ff8e 	bl	8005e50 <vPortFree>
				vPortFree( pxTCB );
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 ff8b 	bl	8005e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f3a:	e018      	b.n	8004f6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d103      	bne.n	8004f4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 ff82 	bl	8005e50 <vPortFree>
	}
 8004f4c:	e00f      	b.n	8004f6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d00a      	beq.n	8004f6e <prvDeleteTCB+0x56>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <prvDeleteTCB+0x54>
	}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <prvResetNextTaskUnblockTime+0x38>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f90:	e008      	b.n	8004fa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <prvResetNextTaskUnblockTime+0x38>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fa2:	6013      	str	r3, [r2, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	20000bfc 	.word	0x20000bfc
 8004fb4:	20000c64 	.word	0x20000c64

08004fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <xTaskGetSchedulerState+0x34>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	e008      	b.n	8004fde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <xTaskGetSchedulerState+0x38>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e001      	b.n	8004fde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fde:	687b      	ldr	r3, [r7, #4]
	}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000c50 	.word	0x20000c50
 8004ff0:	20000c6c 	.word	0x20000c6c

08004ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d056      	beq.n	80050b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800500a:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <xTaskPriorityDisinherit+0xd0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d00a      	beq.n	800502a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	60fb      	str	r3, [r7, #12]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60bb      	str	r3, [r7, #8]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	429a      	cmp	r2, r3
 800505c:	d02c      	beq.n	80050b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	2b00      	cmp	r3, #0
 8005064:	d128      	bne.n	80050b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fbfa 	bl	8003864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <xTaskPriorityDisinherit+0xd4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d903      	bls.n	8005098 <xTaskPriorityDisinherit+0xa4>
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <xTaskPriorityDisinherit+0xd4>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a09      	ldr	r2, [pc, #36]	; (80050cc <xTaskPriorityDisinherit+0xd8>)
 80050a6:	441a      	add	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe fb7b 	bl	80037aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050b8:	697b      	ldr	r3, [r7, #20]
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000770 	.word	0x20000770
 80050c8:	20000c4c 	.word	0x20000c4c
 80050cc:	20000774 	.word	0x20000774

080050d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050da:	4b21      	ldr	r3, [pc, #132]	; (8005160 <prvAddCurrentTaskToDelayedList+0x90>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fbbc 	bl	8003864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d10a      	bne.n	800510a <prvAddCurrentTaskToDelayedList+0x3a>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fa:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <prvAddCurrentTaskToDelayedList+0x94>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4819      	ldr	r0, [pc, #100]	; (8005168 <prvAddCurrentTaskToDelayedList+0x98>)
 8005104:	f7fe fb51 	bl	80037aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005108:	e026      	b.n	8005158 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4413      	add	r3, r2
 8005110:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <prvAddCurrentTaskToDelayedList+0x94>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	429a      	cmp	r2, r3
 8005120:	d209      	bcs.n	8005136 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005122:	4b12      	ldr	r3, [pc, #72]	; (800516c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <prvAddCurrentTaskToDelayedList+0x94>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7fe fb5f 	bl	80037f2 <vListInsert>
}
 8005134:	e010      	b.n	8005158 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <prvAddCurrentTaskToDelayedList+0x94>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f7fe fb55 	bl	80037f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <prvAddCurrentTaskToDelayedList+0xa4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d202      	bcs.n	8005158 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005152:	4a08      	ldr	r2, [pc, #32]	; (8005174 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000c48 	.word	0x20000c48
 8005164:	20000770 	.word	0x20000770
 8005168:	20000c30 	.word	0x20000c30
 800516c:	20000c00 	.word	0x20000c00
 8005170:	20000bfc 	.word	0x20000bfc
 8005174:	20000c64 	.word	0x20000c64

08005178 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005182:	f000 fb07 	bl	8005794 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <xTimerCreateTimerTask+0x80>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d021      	beq.n	80051d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005196:	1d3a      	adds	r2, r7, #4
 8005198:	f107 0108 	add.w	r1, r7, #8
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fe fabb 	bl	800371c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	9202      	str	r2, [sp, #8]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	2302      	movs	r3, #2
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	460a      	mov	r2, r1
 80051b8:	4910      	ldr	r1, [pc, #64]	; (80051fc <xTimerCreateTimerTask+0x84>)
 80051ba:	4811      	ldr	r0, [pc, #68]	; (8005200 <xTimerCreateTimerTask+0x88>)
 80051bc:	f7ff f868 	bl	8004290 <xTaskCreateStatic>
 80051c0:	4603      	mov	r3, r0
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <xTimerCreateTimerTask+0x8c>)
 80051c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <xTimerCreateTimerTask+0x8c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	613b      	str	r3, [r7, #16]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051ee:	697b      	ldr	r3, [r7, #20]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000ca0 	.word	0x20000ca0
 80051fc:	08006ffc 	.word	0x08006ffc
 8005200:	0800533d 	.word	0x0800533d
 8005204:	20000ca4 	.word	0x20000ca4

08005208 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <xTimerGenericCommand+0x98>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d02a      	beq.n	8005294 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b05      	cmp	r3, #5
 800524e:	dc18      	bgt.n	8005282 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005250:	f7ff feb2 	bl	8004fb8 <xTaskGetSchedulerState>
 8005254:	4603      	mov	r3, r0
 8005256:	2b02      	cmp	r3, #2
 8005258:	d109      	bne.n	800526e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <xTimerGenericCommand+0x98>)
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	f107 0110 	add.w	r1, r7, #16
 8005262:	2300      	movs	r3, #0
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	f7fe fc2b 	bl	8003ac0 <xQueueGenericSend>
 800526a:	6278      	str	r0, [r7, #36]	; 0x24
 800526c:	e012      	b.n	8005294 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <xTimerGenericCommand+0x98>)
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	f107 0110 	add.w	r1, r7, #16
 8005276:	2300      	movs	r3, #0
 8005278:	2200      	movs	r2, #0
 800527a:	f7fe fc21 	bl	8003ac0 <xQueueGenericSend>
 800527e:	6278      	str	r0, [r7, #36]	; 0x24
 8005280:	e008      	b.n	8005294 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <xTimerGenericCommand+0x98>)
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	f107 0110 	add.w	r1, r7, #16
 800528a:	2300      	movs	r3, #0
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	f7fe fd15 	bl	8003cbc <xQueueGenericSendFromISR>
 8005292:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005296:	4618      	mov	r0, r3
 8005298:	3728      	adds	r7, #40	; 0x28
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000ca0 	.word	0x20000ca0

080052a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <prvProcessExpiredTimer+0x94>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fad1 	bl	8003864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d022      	beq.n	8005316 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	18d1      	adds	r1, r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f000 f8d1 	bl	8005484 <prvInsertTimerInActiveList>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01f      	beq.n	8005328 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052e8:	2300      	movs	r3, #0
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	2100      	movs	r1, #0
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff ff88 	bl	8005208 <xTimerGenericCommand>
 80052f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	60fb      	str	r3, [r7, #12]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	b2da      	uxtb	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	6978      	ldr	r0, [r7, #20]
 800532e:	4798      	blx	r3
}
 8005330:	bf00      	nop
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000c98 	.word	0x20000c98

0800533c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005344:	f107 0308 	add.w	r3, r7, #8
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f857 	bl	80053fc <prvGetNextExpireTime>
 800534e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4619      	mov	r1, r3
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f803 	bl	8005360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800535a:	f000 f8d5 	bl	8005508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800535e:	e7f1      	b.n	8005344 <prvTimerTask+0x8>

08005360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800536a:	f7ff fa43 	bl	80047f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f866 	bl	8005444 <prvSampleTimeNow>
 8005378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d130      	bne.n	80053e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <prvProcessTimerOrBlockTask+0x3c>
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	429a      	cmp	r2, r3
 800538c:	d806      	bhi.n	800539c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800538e:	f7ff fa3f 	bl	8004810 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff85 	bl	80052a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800539a:	e024      	b.n	80053e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053a2:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <prvProcessTimerOrBlockTask+0x90>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <prvProcessTimerOrBlockTask+0x50>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <prvProcessTimerOrBlockTask+0x52>
 80053b0:	2300      	movs	r3, #0
 80053b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <prvProcessTimerOrBlockTask+0x94>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	4619      	mov	r1, r3
 80053c2:	f7fe ff31 	bl	8004228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053c6:	f7ff fa23 	bl	8004810 <xTaskResumeAll>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <prvProcessTimerOrBlockTask+0x98>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
}
 80053e0:	e001      	b.n	80053e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053e2:	f7ff fa15 	bl	8004810 <xTaskResumeAll>
}
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000c9c 	.word	0x20000c9c
 80053f4:	20000ca0 	.word	0x20000ca0
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <prvGetNextExpireTime+0x44>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <prvGetNextExpireTime+0x16>
 800540e:	2201      	movs	r2, #1
 8005410:	e000      	b.n	8005414 <prvGetNextExpireTime+0x18>
 8005412:	2200      	movs	r2, #0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <prvGetNextExpireTime+0x44>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e001      	b.n	8005430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005430:	68fb      	ldr	r3, [r7, #12]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000c98 	.word	0x20000c98

08005444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800544c:	f7ff fa7e 	bl	800494c <xTaskGetTickCount>
 8005450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <prvSampleTimeNow+0x3c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d205      	bcs.n	8005468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800545c:	f000 f936 	bl	80056cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e002      	b.n	800546e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <prvSampleTimeNow+0x3c>)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005474:	68fb      	ldr	r3, [r7, #12]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000ca8 	.word	0x20000ca8

08005484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d812      	bhi.n	80054d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054b8:	2301      	movs	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e01b      	b.n	80054f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054be:	4b10      	ldr	r3, [pc, #64]	; (8005500 <prvInsertTimerInActiveList+0x7c>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7fe f992 	bl	80037f2 <vListInsert>
 80054ce:	e012      	b.n	80054f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d206      	bcs.n	80054e6 <prvInsertTimerInActiveList+0x62>
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d302      	bcc.n	80054e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e007      	b.n	80054f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <prvInsertTimerInActiveList+0x80>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7fe f97e 	bl	80037f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000c9c 	.word	0x20000c9c
 8005504:	20000c98 	.word	0x20000c98

08005508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	; 0x38
 800550c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800550e:	e0ca      	b.n	80056a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	da18      	bge.n	8005548 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	3304      	adds	r3, #4
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	61fb      	str	r3, [r7, #28]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553e:	6850      	ldr	r0, [r2, #4]
 8005540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005542:	6892      	ldr	r2, [r2, #8]
 8005544:	4611      	mov	r1, r2
 8005546:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f2c0 80aa 	blt.w	80056a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	3304      	adds	r3, #4
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe f97f 	bl	8003864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005566:	463b      	mov	r3, r7
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ff6b 	bl	8005444 <prvSampleTimeNow>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b09      	cmp	r3, #9
 8005574:	f200 8097 	bhi.w	80056a6 <prvProcessReceivedCommands+0x19e>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <prvProcessReceivedCommands+0x78>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055a9 	.word	0x080055a9
 800558c:	0800561d 	.word	0x0800561d
 8005590:	08005631 	.word	0x08005631
 8005594:	0800567b 	.word	0x0800567b
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055a9 	.word	0x080055a9
 80055a0:	0800561d 	.word	0x0800561d
 80055a4:	08005631 	.word	0x08005631
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	18d1      	adds	r1, r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c8:	f7ff ff5c 	bl	8005484 <prvInsertTimerInActiveList>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d069      	beq.n	80056a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d05e      	beq.n	80056a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	441a      	add	r2, r3
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	2100      	movs	r1, #0
 80055f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fa:	f7ff fe05 	bl	8005208 <xTimerGenericCommand>
 80055fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d14f      	bne.n	80056a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	61bb      	str	r3, [r7, #24]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800562e:	e03a      	b.n	80056a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	b2da      	uxtb	r2, r3
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	617b      	str	r3, [r7, #20]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	18d1      	adds	r1, r2, r3
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005674:	f7ff ff06 	bl	8005484 <prvInsertTimerInActiveList>
					break;
 8005678:	e015      	b.n	80056a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568a:	f000 fbe1 	bl	8005e50 <vPortFree>
 800568e:	e00a      	b.n	80056a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056a2:	e000      	b.n	80056a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <prvProcessReceivedCommands+0x1c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	1d39      	adds	r1, r7, #4
 80056ac:	2200      	movs	r2, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fba0 	bl	8003df4 <xQueueReceive>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f47f af2a 	bne.w	8005510 <prvProcessReceivedCommands+0x8>
	}
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000ca0 	.word	0x20000ca0

080056cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056d2:	e048      	b.n	8005766 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056d4:	4b2d      	ldr	r3, [pc, #180]	; (800578c <prvSwitchTimerLists+0xc0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056de:	4b2b      	ldr	r3, [pc, #172]	; (800578c <prvSwitchTimerLists+0xc0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe f8b9 	bl	8003864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02e      	beq.n	8005766 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d90e      	bls.n	8005738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <prvSwitchTimerLists+0xc0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3304      	adds	r3, #4
 800572e:	4619      	mov	r1, r3
 8005730:	4610      	mov	r0, r2
 8005732:	f7fe f85e 	bl	80037f2 <vListInsert>
 8005736:	e016      	b.n	8005766 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005738:	2300      	movs	r3, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2300      	movs	r3, #0
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	2100      	movs	r1, #0
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fd60 	bl	8005208 <xTimerGenericCommand>
 8005748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	603b      	str	r3, [r7, #0]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <prvSwitchTimerLists+0xc0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1b1      	bne.n	80056d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <prvSwitchTimerLists+0xc0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <prvSwitchTimerLists+0xc4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <prvSwitchTimerLists+0xc0>)
 800577c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800577e:	4a04      	ldr	r2, [pc, #16]	; (8005790 <prvSwitchTimerLists+0xc4>)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6013      	str	r3, [r2, #0]
}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000c98 	.word	0x20000c98
 8005790:	20000c9c 	.word	0x20000c9c

08005794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800579a:	f000 f96b 	bl	8005a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <prvCheckForValidListAndQueue+0x60>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d120      	bne.n	80057e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057a6:	4814      	ldr	r0, [pc, #80]	; (80057f8 <prvCheckForValidListAndQueue+0x64>)
 80057a8:	f7fd ffd2 	bl	8003750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057ac:	4813      	ldr	r0, [pc, #76]	; (80057fc <prvCheckForValidListAndQueue+0x68>)
 80057ae:	f7fd ffcf 	bl	8003750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057b2:	4b13      	ldr	r3, [pc, #76]	; (8005800 <prvCheckForValidListAndQueue+0x6c>)
 80057b4:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <prvCheckForValidListAndQueue+0x64>)
 80057b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057b8:	4b12      	ldr	r3, [pc, #72]	; (8005804 <prvCheckForValidListAndQueue+0x70>)
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <prvCheckForValidListAndQueue+0x68>)
 80057bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057be:	2300      	movs	r3, #0
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <prvCheckForValidListAndQueue+0x74>)
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <prvCheckForValidListAndQueue+0x78>)
 80057c6:	2110      	movs	r1, #16
 80057c8:	200a      	movs	r0, #10
 80057ca:	f7fe f8dd 	bl	8003988 <xQueueGenericCreateStatic>
 80057ce:	4603      	mov	r3, r0
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <prvCheckForValidListAndQueue+0x60>)
 80057d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <prvCheckForValidListAndQueue+0x60>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <prvCheckForValidListAndQueue+0x60>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <prvCheckForValidListAndQueue+0x7c>)
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fcf6 	bl	80041d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057e8:	f000 f974 	bl	8005ad4 <vPortExitCritical>
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000ca0 	.word	0x20000ca0
 80057f8:	20000c70 	.word	0x20000c70
 80057fc:	20000c84 	.word	0x20000c84
 8005800:	20000c98 	.word	0x20000c98
 8005804:	20000c9c 	.word	0x20000c9c
 8005808:	20000d4c 	.word	0x20000d4c
 800580c:	20000cac 	.word	0x20000cac
 8005810:	08007004 	.word	0x08007004

08005814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b04      	subs	r3, #4
 8005824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800582c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b04      	subs	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0201 	bic.w	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3b04      	subs	r3, #4
 8005842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <pxPortInitialiseStack+0x64>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b14      	subs	r3, #20
 800584e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b04      	subs	r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f06f 0202 	mvn.w	r2, #2
 8005862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3b20      	subs	r3, #32
 8005868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	0800587d 	.word	0x0800587d

0800587c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <prvTaskExitError+0x54>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d00a      	beq.n	80058a6 <prvTaskExitError+0x2a>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <prvTaskExitError+0x28>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60bb      	str	r3, [r7, #8]
}
 80058b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058ba:	bf00      	nop
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0fc      	beq.n	80058bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000028 	.word	0x20000028
	...

080058e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <pxCurrentTCBConst2>)
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	f380 8809 	msr	PSP, r0
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8811 	msr	BASEPRI, r0
 80058fa:	4770      	bx	lr
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst2>:
 8005900:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005908:	4808      	ldr	r0, [pc, #32]	; (800592c <prvPortStartFirstTask+0x24>)
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f380 8808 	msr	MSP, r0
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8814 	msr	CONTROL, r0
 800591a:	b662      	cpsie	i
 800591c:	b661      	cpsie	f
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	df00      	svc	0
 8005928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800592a:	bf00      	nop
 800592c:	e000ed08 	.word	0xe000ed08

08005930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <xPortStartScheduler+0x120>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a46      	ldr	r2, [pc, #280]	; (8005a54 <xPortStartScheduler+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10a      	bne.n	8005956 <xPortStartScheduler+0x26>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005956:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <xPortStartScheduler+0x120>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3f      	ldr	r2, [pc, #252]	; (8005a58 <xPortStartScheduler+0x128>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10a      	bne.n	8005976 <xPortStartScheduler+0x46>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60fb      	str	r3, [r7, #12]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <xPortStartScheduler+0x12c>)
 8005978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005998:	b2da      	uxtb	r2, r3
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <xPortStartScheduler+0x130>)
 800599c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <xPortStartScheduler+0x134>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059a4:	e009      	b.n	80059ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <xPortStartScheduler+0x134>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <xPortStartScheduler+0x134>)
 80059ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b80      	cmp	r3, #128	; 0x80
 80059c4:	d0ef      	beq.n	80059a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <xPortStartScheduler+0x134>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f1c3 0307 	rsb	r3, r3, #7
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d00a      	beq.n	80059e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60bb      	str	r3, [r7, #8]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <xPortStartScheduler+0x134>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <xPortStartScheduler+0x134>)
 80059f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <xPortStartScheduler+0x134>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fa:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <xPortStartScheduler+0x134>)
 80059fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a1e:	f000 f8dd 	bl	8005bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <xPortStartScheduler+0x13c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a28:	f000 f8fc 	bl	8005c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <xPortStartScheduler+0x140>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0f      	ldr	r2, [pc, #60]	; (8005a70 <xPortStartScheduler+0x140>)
 8005a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a38:	f7ff ff66 	bl	8005908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a3c:	f7ff f850 	bl	8004ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8005a40:	f7ff ff1c 	bl	800587c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	e000ed00 	.word	0xe000ed00
 8005a54:	410fc271 	.word	0x410fc271
 8005a58:	410fc270 	.word	0x410fc270
 8005a5c:	e000e400 	.word	0xe000e400
 8005a60:	20000d9c 	.word	0x20000d9c
 8005a64:	20000da0 	.word	0x20000da0
 8005a68:	e000ed20 	.word	0xe000ed20
 8005a6c:	20000028 	.word	0x20000028
 8005a70:	e000ef34 	.word	0xe000ef34

08005a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <vPortEnterCritical+0x58>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <vPortEnterCritical+0x58>)
 8005a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <vPortEnterCritical+0x58>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10f      	bne.n	8005ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortEnterCritical+0x5c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	603b      	str	r3, [r7, #0]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <vPortEnterCritical+0x4a>
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000028 	.word	0x20000028
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <vPortExitCritical+0x50>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <vPortExitCritical+0x24>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	607b      	str	r3, [r7, #4]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <vPortExitCritical+0x50>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <vPortExitCritical+0x50>)
 8005b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <vPortExitCritical+0x42>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f383 8811 	msr	BASEPRI, r3
}
 8005b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000028 	.word	0x20000028
	...

08005b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b30:	f3ef 8009 	mrs	r0, PSP
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <pxCurrentTCBConst>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f01e 0f10 	tst.w	lr, #16
 8005b40:	bf08      	it	eq
 8005b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b54:	f380 8811 	msr	BASEPRI, r0
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f7fe ffbe 	bl	8004ae0 <vTaskSwitchContext>
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f380 8811 	msr	BASEPRI, r0
 8005b6c:	bc09      	pop	{r0, r3}
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	6808      	ldr	r0, [r1, #0]
 8005b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b76:	f01e 0f10 	tst.w	lr, #16
 8005b7a:	bf08      	it	eq
 8005b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b80:	f380 8809 	msr	PSP, r0
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst>:
 8005b90:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
}
 8005bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bb2:	f7fe fedb 	bl	800496c <xTaskIncrementTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <xPortSysTickHandler+0x40>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <vPortSetupTimerInterrupt+0x38>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <vPortSetupTimerInterrupt+0x3c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <vPortSetupTimerInterrupt+0x40>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <vPortSetupTimerInterrupt+0x44>)
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010
 8005c14:	e000e018 	.word	0xe000e018
 8005c18:	2000001c 	.word	0x2000001c
 8005c1c:	10624dd3 	.word	0x10624dd3
 8005c20:	e000e014 	.word	0xe000e014

08005c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c34 <vPortEnableVFP+0x10>
 8005c28:	6801      	ldr	r1, [r0, #0]
 8005c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c2e:	6001      	str	r1, [r0, #0]
 8005c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c32:	bf00      	nop
 8005c34:	e000ed88 	.word	0xe000ed88

08005c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c3e:	f3ef 8305 	mrs	r3, IPSR
 8005c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d914      	bls.n	8005c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <vPortValidateInterruptPriority+0x70>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <vPortValidateInterruptPriority+0x74>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	7afa      	ldrb	r2, [r7, #11]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20a      	bcs.n	8005c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <vPortValidateInterruptPriority+0x78>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <vPortValidateInterruptPriority+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d90a      	bls.n	8005c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	603b      	str	r3, [r7, #0]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <vPortValidateInterruptPriority+0x60>
	}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	e000e3f0 	.word	0xe000e3f0
 8005cac:	20000d9c 	.word	0x20000d9c
 8005cb0:	e000ed0c 	.word	0xe000ed0c
 8005cb4:	20000da0 	.word	0x20000da0

08005cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cc4:	f7fe fd96 	bl	80047f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <pvPortMalloc+0x180>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cd0:	f000 f920 	bl	8005f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cd4:	4b59      	ldr	r3, [pc, #356]	; (8005e3c <pvPortMalloc+0x184>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 8093 	bne.w	8005e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01d      	beq.n	8005d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ce8:	2208      	movs	r2, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f023 0307 	bic.w	r3, r3, #7
 8005d00:	3308      	adds	r3, #8
 8005d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <pvPortMalloc+0x6c>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	617b      	str	r3, [r7, #20]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d06e      	beq.n	8005e08 <pvPortMalloc+0x150>
 8005d2a:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <pvPortMalloc+0x188>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d869      	bhi.n	8005e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d34:	4b43      	ldr	r3, [pc, #268]	; (8005e44 <pvPortMalloc+0x18c>)
 8005d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d38:	4b42      	ldr	r3, [pc, #264]	; (8005e44 <pvPortMalloc+0x18c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d3e:	e004      	b.n	8005d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <pvPortMalloc+0xa4>
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f1      	bne.n	8005d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d5c:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <pvPortMalloc+0x180>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d050      	beq.n	8005e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	2308      	movs	r3, #8
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d91f      	bls.n	8005dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <pvPortMalloc+0xf8>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	613b      	str	r3, [r7, #16]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dc2:	69b8      	ldr	r0, [r7, #24]
 8005dc4:	f000 f908 	bl	8005fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <pvPortMalloc+0x188>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <pvPortMalloc+0x188>)
 8005dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	; (8005e40 <pvPortMalloc+0x188>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <pvPortMalloc+0x190>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d203      	bcs.n	8005dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <pvPortMalloc+0x188>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <pvPortMalloc+0x190>)
 8005de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <pvPortMalloc+0x184>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dfe:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <pvPortMalloc+0x194>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <pvPortMalloc+0x194>)
 8005e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e08:	f7fe fd02 	bl	8004810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <pvPortMalloc+0x174>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <pvPortMalloc+0x172>
	return pvReturn;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3728      	adds	r7, #40	; 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200049ac 	.word	0x200049ac
 8005e3c:	200049c0 	.word	0x200049c0
 8005e40:	200049b0 	.word	0x200049b0
 8005e44:	200049a4 	.word	0x200049a4
 8005e48:	200049b4 	.word	0x200049b4
 8005e4c:	200049b8 	.word	0x200049b8

08005e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d04d      	beq.n	8005efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e62:	2308      	movs	r3, #8
 8005e64:	425b      	negs	r3, r3
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <vPortFree+0xb8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <vPortFree+0x44>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60fb      	str	r3, [r7, #12]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <vPortFree+0x62>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60bb      	str	r3, [r7, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <vPortFree+0xb8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11a      	bne.n	8005efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <vPortFree+0xb8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ed8:	f7fe fc8c 	bl	80047f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <vPortFree+0xbc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <vPortFree+0xbc>)
 8005ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eea:	6938      	ldr	r0, [r7, #16]
 8005eec:	f000 f874 	bl	8005fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <vPortFree+0xc0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	4a06      	ldr	r2, [pc, #24]	; (8005f10 <vPortFree+0xc0>)
 8005ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005efa:	f7fe fc89 	bl	8004810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005efe:	bf00      	nop
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200049c0 	.word	0x200049c0
 8005f0c:	200049b0 	.word	0x200049b0
 8005f10:	200049bc 	.word	0x200049bc

08005f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f20:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <prvHeapInit+0xac>)
 8005f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <prvHeapInit+0xac>)
 8005f44:	4413      	add	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <prvHeapInit+0xb0>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <prvHeapInit+0xb0>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f60:	2208      	movs	r2, #8
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0307 	bic.w	r3, r3, #7
 8005f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <prvHeapInit+0xb4>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <prvHeapInit+0xb8>)
 8005fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <prvHeapInit+0xbc>)
 8005faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <prvHeapInit+0xc0>)
 8005fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	20000da4 	.word	0x20000da4
 8005fc4:	200049a4 	.word	0x200049a4
 8005fc8:	200049ac 	.word	0x200049ac
 8005fcc:	200049b4 	.word	0x200049b4
 8005fd0:	200049b0 	.word	0x200049b0
 8005fd4:	200049c0 	.word	0x200049c0

08005fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fe0:	4b28      	ldr	r3, [pc, #160]	; (8006084 <prvInsertBlockIntoFreeList+0xac>)
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e002      	b.n	8005fec <prvInsertBlockIntoFreeList+0x14>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d8f7      	bhi.n	8005fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d108      	bne.n	800601a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d118      	bne.n	8006060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <prvInsertBlockIntoFreeList+0xb0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d00d      	beq.n	8006056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e008      	b.n	8006068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <prvInsertBlockIntoFreeList+0xb0>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	e003      	b.n	8006068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d002      	beq.n	8006076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	200049a4 	.word	0x200049a4
 8006088:	200049ac 	.word	0x200049ac

0800608c <__errno>:
 800608c:	4b01      	ldr	r3, [pc, #4]	; (8006094 <__errno+0x8>)
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	2000002c 	.word	0x2000002c

08006098 <__libc_init_array>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4d0d      	ldr	r5, [pc, #52]	; (80060d0 <__libc_init_array+0x38>)
 800609c:	4c0d      	ldr	r4, [pc, #52]	; (80060d4 <__libc_init_array+0x3c>)
 800609e:	1b64      	subs	r4, r4, r5
 80060a0:	10a4      	asrs	r4, r4, #2
 80060a2:	2600      	movs	r6, #0
 80060a4:	42a6      	cmp	r6, r4
 80060a6:	d109      	bne.n	80060bc <__libc_init_array+0x24>
 80060a8:	4d0b      	ldr	r5, [pc, #44]	; (80060d8 <__libc_init_array+0x40>)
 80060aa:	4c0c      	ldr	r4, [pc, #48]	; (80060dc <__libc_init_array+0x44>)
 80060ac:	f000 ff84 	bl	8006fb8 <_init>
 80060b0:	1b64      	subs	r4, r4, r5
 80060b2:	10a4      	asrs	r4, r4, #2
 80060b4:	2600      	movs	r6, #0
 80060b6:	42a6      	cmp	r6, r4
 80060b8:	d105      	bne.n	80060c6 <__libc_init_array+0x2e>
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
 80060bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c0:	4798      	blx	r3
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7ee      	b.n	80060a4 <__libc_init_array+0xc>
 80060c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ca:	4798      	blx	r3
 80060cc:	3601      	adds	r6, #1
 80060ce:	e7f2      	b.n	80060b6 <__libc_init_array+0x1e>
 80060d0:	080070c4 	.word	0x080070c4
 80060d4:	080070c4 	.word	0x080070c4
 80060d8:	080070c4 	.word	0x080070c4
 80060dc:	080070c8 	.word	0x080070c8

080060e0 <memcpy>:
 80060e0:	440a      	add	r2, r1
 80060e2:	4291      	cmp	r1, r2
 80060e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e8:	d100      	bne.n	80060ec <memcpy+0xc>
 80060ea:	4770      	bx	lr
 80060ec:	b510      	push	{r4, lr}
 80060ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f6:	4291      	cmp	r1, r2
 80060f8:	d1f9      	bne.n	80060ee <memcpy+0xe>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <memset>:
 80060fc:	4402      	add	r2, r0
 80060fe:	4603      	mov	r3, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <iprintf>:
 800610c:	b40f      	push	{r0, r1, r2, r3}
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <iprintf+0x2c>)
 8006110:	b513      	push	{r0, r1, r4, lr}
 8006112:	681c      	ldr	r4, [r3, #0]
 8006114:	b124      	cbz	r4, 8006120 <iprintf+0x14>
 8006116:	69a3      	ldr	r3, [r4, #24]
 8006118:	b913      	cbnz	r3, 8006120 <iprintf+0x14>
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f866 	bl	80061ec <__sinit>
 8006120:	ab05      	add	r3, sp, #20
 8006122:	9a04      	ldr	r2, [sp, #16]
 8006124:	68a1      	ldr	r1, [r4, #8]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f983 	bl	8006434 <_vfiprintf_r>
 800612e:	b002      	add	sp, #8
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	b004      	add	sp, #16
 8006136:	4770      	bx	lr
 8006138:	2000002c 	.word	0x2000002c

0800613c <std>:
 800613c:	2300      	movs	r3, #0
 800613e:	b510      	push	{r4, lr}
 8006140:	4604      	mov	r4, r0
 8006142:	e9c0 3300 	strd	r3, r3, [r0]
 8006146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800614a:	6083      	str	r3, [r0, #8]
 800614c:	8181      	strh	r1, [r0, #12]
 800614e:	6643      	str	r3, [r0, #100]	; 0x64
 8006150:	81c2      	strh	r2, [r0, #14]
 8006152:	6183      	str	r3, [r0, #24]
 8006154:	4619      	mov	r1, r3
 8006156:	2208      	movs	r2, #8
 8006158:	305c      	adds	r0, #92	; 0x5c
 800615a:	f7ff ffcf 	bl	80060fc <memset>
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x38>)
 8006160:	6263      	str	r3, [r4, #36]	; 0x24
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x3c>)
 8006164:	62a3      	str	r3, [r4, #40]	; 0x28
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <std+0x40>)
 8006168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <std+0x44>)
 800616c:	6224      	str	r4, [r4, #32]
 800616e:	6323      	str	r3, [r4, #48]	; 0x30
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	080069dd 	.word	0x080069dd
 8006178:	080069ff 	.word	0x080069ff
 800617c:	08006a37 	.word	0x08006a37
 8006180:	08006a5b 	.word	0x08006a5b

08006184 <_cleanup_r>:
 8006184:	4901      	ldr	r1, [pc, #4]	; (800618c <_cleanup_r+0x8>)
 8006186:	f000 b8af 	b.w	80062e8 <_fwalk_reent>
 800618a:	bf00      	nop
 800618c:	08006d35 	.word	0x08006d35

08006190 <__sfmoreglue>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	1e4a      	subs	r2, r1, #1
 8006194:	2568      	movs	r5, #104	; 0x68
 8006196:	4355      	muls	r5, r2
 8006198:	460e      	mov	r6, r1
 800619a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800619e:	f000 f8c5 	bl	800632c <_malloc_r>
 80061a2:	4604      	mov	r4, r0
 80061a4:	b140      	cbz	r0, 80061b8 <__sfmoreglue+0x28>
 80061a6:	2100      	movs	r1, #0
 80061a8:	e9c0 1600 	strd	r1, r6, [r0]
 80061ac:	300c      	adds	r0, #12
 80061ae:	60a0      	str	r0, [r4, #8]
 80061b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b4:	f7ff ffa2 	bl	80060fc <memset>
 80061b8:	4620      	mov	r0, r4
 80061ba:	bd70      	pop	{r4, r5, r6, pc}

080061bc <__sfp_lock_acquire>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__sfp_lock_acquire+0x8>)
 80061be:	f000 b8b3 	b.w	8006328 <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	20004b04 	.word	0x20004b04

080061c8 <__sfp_lock_release>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__sfp_lock_release+0x8>)
 80061ca:	f000 b8ae 	b.w	800632a <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	20004b04 	.word	0x20004b04

080061d4 <__sinit_lock_acquire>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__sinit_lock_acquire+0x8>)
 80061d6:	f000 b8a7 	b.w	8006328 <__retarget_lock_acquire_recursive>
 80061da:	bf00      	nop
 80061dc:	20004aff 	.word	0x20004aff

080061e0 <__sinit_lock_release>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__sinit_lock_release+0x8>)
 80061e2:	f000 b8a2 	b.w	800632a <__retarget_lock_release_recursive>
 80061e6:	bf00      	nop
 80061e8:	20004aff 	.word	0x20004aff

080061ec <__sinit>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4604      	mov	r4, r0
 80061f0:	f7ff fff0 	bl	80061d4 <__sinit_lock_acquire>
 80061f4:	69a3      	ldr	r3, [r4, #24]
 80061f6:	b11b      	cbz	r3, 8006200 <__sinit+0x14>
 80061f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fc:	f7ff bff0 	b.w	80061e0 <__sinit_lock_release>
 8006200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006204:	6523      	str	r3, [r4, #80]	; 0x50
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <__sinit+0x68>)
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <__sinit+0x6c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	62a2      	str	r2, [r4, #40]	; 0x28
 800620e:	42a3      	cmp	r3, r4
 8006210:	bf04      	itt	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	61a3      	streq	r3, [r4, #24]
 8006216:	4620      	mov	r0, r4
 8006218:	f000 f820 	bl	800625c <__sfp>
 800621c:	6060      	str	r0, [r4, #4]
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f81c 	bl	800625c <__sfp>
 8006224:	60a0      	str	r0, [r4, #8]
 8006226:	4620      	mov	r0, r4
 8006228:	f000 f818 	bl	800625c <__sfp>
 800622c:	2200      	movs	r2, #0
 800622e:	60e0      	str	r0, [r4, #12]
 8006230:	2104      	movs	r1, #4
 8006232:	6860      	ldr	r0, [r4, #4]
 8006234:	f7ff ff82 	bl	800613c <std>
 8006238:	68a0      	ldr	r0, [r4, #8]
 800623a:	2201      	movs	r2, #1
 800623c:	2109      	movs	r1, #9
 800623e:	f7ff ff7d 	bl	800613c <std>
 8006242:	68e0      	ldr	r0, [r4, #12]
 8006244:	2202      	movs	r2, #2
 8006246:	2112      	movs	r1, #18
 8006248:	f7ff ff78 	bl	800613c <std>
 800624c:	2301      	movs	r3, #1
 800624e:	61a3      	str	r3, [r4, #24]
 8006250:	e7d2      	b.n	80061f8 <__sinit+0xc>
 8006252:	bf00      	nop
 8006254:	08007024 	.word	0x08007024
 8006258:	08006185 	.word	0x08006185

0800625c <__sfp>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	4607      	mov	r7, r0
 8006260:	f7ff ffac 	bl	80061bc <__sfp_lock_acquire>
 8006264:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <__sfp+0x84>)
 8006266:	681e      	ldr	r6, [r3, #0]
 8006268:	69b3      	ldr	r3, [r6, #24]
 800626a:	b913      	cbnz	r3, 8006272 <__sfp+0x16>
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff ffbd 	bl	80061ec <__sinit>
 8006272:	3648      	adds	r6, #72	; 0x48
 8006274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006278:	3b01      	subs	r3, #1
 800627a:	d503      	bpl.n	8006284 <__sfp+0x28>
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	b30b      	cbz	r3, 80062c4 <__sfp+0x68>
 8006280:	6836      	ldr	r6, [r6, #0]
 8006282:	e7f7      	b.n	8006274 <__sfp+0x18>
 8006284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006288:	b9d5      	cbnz	r5, 80062c0 <__sfp+0x64>
 800628a:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <__sfp+0x88>)
 800628c:	60e3      	str	r3, [r4, #12]
 800628e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006292:	6665      	str	r5, [r4, #100]	; 0x64
 8006294:	f000 f847 	bl	8006326 <__retarget_lock_init_recursive>
 8006298:	f7ff ff96 	bl	80061c8 <__sfp_lock_release>
 800629c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062a4:	6025      	str	r5, [r4, #0]
 80062a6:	61a5      	str	r5, [r4, #24]
 80062a8:	2208      	movs	r2, #8
 80062aa:	4629      	mov	r1, r5
 80062ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062b0:	f7ff ff24 	bl	80060fc <memset>
 80062b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062bc:	4620      	mov	r0, r4
 80062be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c0:	3468      	adds	r4, #104	; 0x68
 80062c2:	e7d9      	b.n	8006278 <__sfp+0x1c>
 80062c4:	2104      	movs	r1, #4
 80062c6:	4638      	mov	r0, r7
 80062c8:	f7ff ff62 	bl	8006190 <__sfmoreglue>
 80062cc:	4604      	mov	r4, r0
 80062ce:	6030      	str	r0, [r6, #0]
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d1d5      	bne.n	8006280 <__sfp+0x24>
 80062d4:	f7ff ff78 	bl	80061c8 <__sfp_lock_release>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	e7ee      	b.n	80062bc <__sfp+0x60>
 80062de:	bf00      	nop
 80062e0:	08007024 	.word	0x08007024
 80062e4:	ffff0001 	.word	0xffff0001

080062e8 <_fwalk_reent>:
 80062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	4606      	mov	r6, r0
 80062ee:	4688      	mov	r8, r1
 80062f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062f4:	2700      	movs	r7, #0
 80062f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062fa:	f1b9 0901 	subs.w	r9, r9, #1
 80062fe:	d505      	bpl.n	800630c <_fwalk_reent+0x24>
 8006300:	6824      	ldr	r4, [r4, #0]
 8006302:	2c00      	cmp	r4, #0
 8006304:	d1f7      	bne.n	80062f6 <_fwalk_reent+0xe>
 8006306:	4638      	mov	r0, r7
 8006308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630c:	89ab      	ldrh	r3, [r5, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d907      	bls.n	8006322 <_fwalk_reent+0x3a>
 8006312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006316:	3301      	adds	r3, #1
 8006318:	d003      	beq.n	8006322 <_fwalk_reent+0x3a>
 800631a:	4629      	mov	r1, r5
 800631c:	4630      	mov	r0, r6
 800631e:	47c0      	blx	r8
 8006320:	4307      	orrs	r7, r0
 8006322:	3568      	adds	r5, #104	; 0x68
 8006324:	e7e9      	b.n	80062fa <_fwalk_reent+0x12>

08006326 <__retarget_lock_init_recursive>:
 8006326:	4770      	bx	lr

08006328 <__retarget_lock_acquire_recursive>:
 8006328:	4770      	bx	lr

0800632a <__retarget_lock_release_recursive>:
 800632a:	4770      	bx	lr

0800632c <_malloc_r>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	1ccd      	adds	r5, r1, #3
 8006330:	f025 0503 	bic.w	r5, r5, #3
 8006334:	3508      	adds	r5, #8
 8006336:	2d0c      	cmp	r5, #12
 8006338:	bf38      	it	cc
 800633a:	250c      	movcc	r5, #12
 800633c:	2d00      	cmp	r5, #0
 800633e:	4606      	mov	r6, r0
 8006340:	db01      	blt.n	8006346 <_malloc_r+0x1a>
 8006342:	42a9      	cmp	r1, r5
 8006344:	d903      	bls.n	800634e <_malloc_r+0x22>
 8006346:	230c      	movs	r3, #12
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	2000      	movs	r0, #0
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634e:	f000 fda3 	bl	8006e98 <__malloc_lock>
 8006352:	4921      	ldr	r1, [pc, #132]	; (80063d8 <_malloc_r+0xac>)
 8006354:	680a      	ldr	r2, [r1, #0]
 8006356:	4614      	mov	r4, r2
 8006358:	b99c      	cbnz	r4, 8006382 <_malloc_r+0x56>
 800635a:	4f20      	ldr	r7, [pc, #128]	; (80063dc <_malloc_r+0xb0>)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	b923      	cbnz	r3, 800636a <_malloc_r+0x3e>
 8006360:	4621      	mov	r1, r4
 8006362:	4630      	mov	r0, r6
 8006364:	f000 fb2a 	bl	80069bc <_sbrk_r>
 8006368:	6038      	str	r0, [r7, #0]
 800636a:	4629      	mov	r1, r5
 800636c:	4630      	mov	r0, r6
 800636e:	f000 fb25 	bl	80069bc <_sbrk_r>
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d123      	bne.n	80063be <_malloc_r+0x92>
 8006376:	230c      	movs	r3, #12
 8006378:	6033      	str	r3, [r6, #0]
 800637a:	4630      	mov	r0, r6
 800637c:	f000 fd92 	bl	8006ea4 <__malloc_unlock>
 8006380:	e7e3      	b.n	800634a <_malloc_r+0x1e>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	1b5b      	subs	r3, r3, r5
 8006386:	d417      	bmi.n	80063b8 <_malloc_r+0x8c>
 8006388:	2b0b      	cmp	r3, #11
 800638a:	d903      	bls.n	8006394 <_malloc_r+0x68>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	441c      	add	r4, r3
 8006390:	6025      	str	r5, [r4, #0]
 8006392:	e004      	b.n	800639e <_malloc_r+0x72>
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	42a2      	cmp	r2, r4
 8006398:	bf0c      	ite	eq
 800639a:	600b      	streq	r3, [r1, #0]
 800639c:	6053      	strne	r3, [r2, #4]
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 fd80 	bl	8006ea4 <__malloc_unlock>
 80063a4:	f104 000b 	add.w	r0, r4, #11
 80063a8:	1d23      	adds	r3, r4, #4
 80063aa:	f020 0007 	bic.w	r0, r0, #7
 80063ae:	1ac2      	subs	r2, r0, r3
 80063b0:	d0cc      	beq.n	800634c <_malloc_r+0x20>
 80063b2:	1a1b      	subs	r3, r3, r0
 80063b4:	50a3      	str	r3, [r4, r2]
 80063b6:	e7c9      	b.n	800634c <_malloc_r+0x20>
 80063b8:	4622      	mov	r2, r4
 80063ba:	6864      	ldr	r4, [r4, #4]
 80063bc:	e7cc      	b.n	8006358 <_malloc_r+0x2c>
 80063be:	1cc4      	adds	r4, r0, #3
 80063c0:	f024 0403 	bic.w	r4, r4, #3
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	d0e3      	beq.n	8006390 <_malloc_r+0x64>
 80063c8:	1a21      	subs	r1, r4, r0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f000 faf6 	bl	80069bc <_sbrk_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d1dd      	bne.n	8006390 <_malloc_r+0x64>
 80063d4:	e7cf      	b.n	8006376 <_malloc_r+0x4a>
 80063d6:	bf00      	nop
 80063d8:	200049c4 	.word	0x200049c4
 80063dc:	200049c8 	.word	0x200049c8

080063e0 <__sfputc_r>:
 80063e0:	6893      	ldr	r3, [r2, #8]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	b410      	push	{r4}
 80063e8:	6093      	str	r3, [r2, #8]
 80063ea:	da08      	bge.n	80063fe <__sfputc_r+0x1e>
 80063ec:	6994      	ldr	r4, [r2, #24]
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	db01      	blt.n	80063f6 <__sfputc_r+0x16>
 80063f2:	290a      	cmp	r1, #10
 80063f4:	d103      	bne.n	80063fe <__sfputc_r+0x1e>
 80063f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063fa:	f000 bb33 	b.w	8006a64 <__swbuf_r>
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	1c58      	adds	r0, r3, #1
 8006402:	6010      	str	r0, [r2, #0]
 8006404:	7019      	strb	r1, [r3, #0]
 8006406:	4608      	mov	r0, r1
 8006408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640c:	4770      	bx	lr

0800640e <__sfputs_r>:
 800640e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006410:	4606      	mov	r6, r0
 8006412:	460f      	mov	r7, r1
 8006414:	4614      	mov	r4, r2
 8006416:	18d5      	adds	r5, r2, r3
 8006418:	42ac      	cmp	r4, r5
 800641a:	d101      	bne.n	8006420 <__sfputs_r+0x12>
 800641c:	2000      	movs	r0, #0
 800641e:	e007      	b.n	8006430 <__sfputs_r+0x22>
 8006420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006424:	463a      	mov	r2, r7
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffda 	bl	80063e0 <__sfputc_r>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d1f3      	bne.n	8006418 <__sfputs_r+0xa>
 8006430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006434 <_vfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	460d      	mov	r5, r1
 800643a:	b09d      	sub	sp, #116	; 0x74
 800643c:	4614      	mov	r4, r2
 800643e:	4698      	mov	r8, r3
 8006440:	4606      	mov	r6, r0
 8006442:	b118      	cbz	r0, 800644c <_vfiprintf_r+0x18>
 8006444:	6983      	ldr	r3, [r0, #24]
 8006446:	b90b      	cbnz	r3, 800644c <_vfiprintf_r+0x18>
 8006448:	f7ff fed0 	bl	80061ec <__sinit>
 800644c:	4b89      	ldr	r3, [pc, #548]	; (8006674 <_vfiprintf_r+0x240>)
 800644e:	429d      	cmp	r5, r3
 8006450:	d11b      	bne.n	800648a <_vfiprintf_r+0x56>
 8006452:	6875      	ldr	r5, [r6, #4]
 8006454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006456:	07d9      	lsls	r1, r3, #31
 8006458:	d405      	bmi.n	8006466 <_vfiprintf_r+0x32>
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	059a      	lsls	r2, r3, #22
 800645e:	d402      	bmi.n	8006466 <_vfiprintf_r+0x32>
 8006460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006462:	f7ff ff61 	bl	8006328 <__retarget_lock_acquire_recursive>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	071b      	lsls	r3, r3, #28
 800646a:	d501      	bpl.n	8006470 <_vfiprintf_r+0x3c>
 800646c:	692b      	ldr	r3, [r5, #16]
 800646e:	b9eb      	cbnz	r3, 80064ac <_vfiprintf_r+0x78>
 8006470:	4629      	mov	r1, r5
 8006472:	4630      	mov	r0, r6
 8006474:	f000 fb5a 	bl	8006b2c <__swsetup_r>
 8006478:	b1c0      	cbz	r0, 80064ac <_vfiprintf_r+0x78>
 800647a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800647c:	07dc      	lsls	r4, r3, #31
 800647e:	d50e      	bpl.n	800649e <_vfiprintf_r+0x6a>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	b01d      	add	sp, #116	; 0x74
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	4b7b      	ldr	r3, [pc, #492]	; (8006678 <_vfiprintf_r+0x244>)
 800648c:	429d      	cmp	r5, r3
 800648e:	d101      	bne.n	8006494 <_vfiprintf_r+0x60>
 8006490:	68b5      	ldr	r5, [r6, #8]
 8006492:	e7df      	b.n	8006454 <_vfiprintf_r+0x20>
 8006494:	4b79      	ldr	r3, [pc, #484]	; (800667c <_vfiprintf_r+0x248>)
 8006496:	429d      	cmp	r5, r3
 8006498:	bf08      	it	eq
 800649a:	68f5      	ldreq	r5, [r6, #12]
 800649c:	e7da      	b.n	8006454 <_vfiprintf_r+0x20>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	0598      	lsls	r0, r3, #22
 80064a2:	d4ed      	bmi.n	8006480 <_vfiprintf_r+0x4c>
 80064a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064a6:	f7ff ff40 	bl	800632a <__retarget_lock_release_recursive>
 80064aa:	e7e9      	b.n	8006480 <_vfiprintf_r+0x4c>
 80064ac:	2300      	movs	r3, #0
 80064ae:	9309      	str	r3, [sp, #36]	; 0x24
 80064b0:	2320      	movs	r3, #32
 80064b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ba:	2330      	movs	r3, #48	; 0x30
 80064bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006680 <_vfiprintf_r+0x24c>
 80064c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064c4:	f04f 0901 	mov.w	r9, #1
 80064c8:	4623      	mov	r3, r4
 80064ca:	469a      	mov	sl, r3
 80064cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d0:	b10a      	cbz	r2, 80064d6 <_vfiprintf_r+0xa2>
 80064d2:	2a25      	cmp	r2, #37	; 0x25
 80064d4:	d1f9      	bne.n	80064ca <_vfiprintf_r+0x96>
 80064d6:	ebba 0b04 	subs.w	fp, sl, r4
 80064da:	d00b      	beq.n	80064f4 <_vfiprintf_r+0xc0>
 80064dc:	465b      	mov	r3, fp
 80064de:	4622      	mov	r2, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff ff93 	bl	800640e <__sfputs_r>
 80064e8:	3001      	adds	r0, #1
 80064ea:	f000 80aa 	beq.w	8006642 <_vfiprintf_r+0x20e>
 80064ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f0:	445a      	add	r2, fp
 80064f2:	9209      	str	r2, [sp, #36]	; 0x24
 80064f4:	f89a 3000 	ldrb.w	r3, [sl]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80a2 	beq.w	8006642 <_vfiprintf_r+0x20e>
 80064fe:	2300      	movs	r3, #0
 8006500:	f04f 32ff 	mov.w	r2, #4294967295
 8006504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006508:	f10a 0a01 	add.w	sl, sl, #1
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	9307      	str	r3, [sp, #28]
 8006510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006514:	931a      	str	r3, [sp, #104]	; 0x68
 8006516:	4654      	mov	r4, sl
 8006518:	2205      	movs	r2, #5
 800651a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651e:	4858      	ldr	r0, [pc, #352]	; (8006680 <_vfiprintf_r+0x24c>)
 8006520:	f7f9 fe5e 	bl	80001e0 <memchr>
 8006524:	9a04      	ldr	r2, [sp, #16]
 8006526:	b9d8      	cbnz	r0, 8006560 <_vfiprintf_r+0x12c>
 8006528:	06d1      	lsls	r1, r2, #27
 800652a:	bf44      	itt	mi
 800652c:	2320      	movmi	r3, #32
 800652e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006532:	0713      	lsls	r3, r2, #28
 8006534:	bf44      	itt	mi
 8006536:	232b      	movmi	r3, #43	; 0x2b
 8006538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800653c:	f89a 3000 	ldrb.w	r3, [sl]
 8006540:	2b2a      	cmp	r3, #42	; 0x2a
 8006542:	d015      	beq.n	8006570 <_vfiprintf_r+0x13c>
 8006544:	9a07      	ldr	r2, [sp, #28]
 8006546:	4654      	mov	r4, sl
 8006548:	2000      	movs	r0, #0
 800654a:	f04f 0c0a 	mov.w	ip, #10
 800654e:	4621      	mov	r1, r4
 8006550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006554:	3b30      	subs	r3, #48	; 0x30
 8006556:	2b09      	cmp	r3, #9
 8006558:	d94e      	bls.n	80065f8 <_vfiprintf_r+0x1c4>
 800655a:	b1b0      	cbz	r0, 800658a <_vfiprintf_r+0x156>
 800655c:	9207      	str	r2, [sp, #28]
 800655e:	e014      	b.n	800658a <_vfiprintf_r+0x156>
 8006560:	eba0 0308 	sub.w	r3, r0, r8
 8006564:	fa09 f303 	lsl.w	r3, r9, r3
 8006568:	4313      	orrs	r3, r2
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	46a2      	mov	sl, r4
 800656e:	e7d2      	b.n	8006516 <_vfiprintf_r+0xe2>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	1d19      	adds	r1, r3, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	9103      	str	r1, [sp, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	bfbb      	ittet	lt
 800657c:	425b      	neglt	r3, r3
 800657e:	f042 0202 	orrlt.w	r2, r2, #2
 8006582:	9307      	strge	r3, [sp, #28]
 8006584:	9307      	strlt	r3, [sp, #28]
 8006586:	bfb8      	it	lt
 8006588:	9204      	strlt	r2, [sp, #16]
 800658a:	7823      	ldrb	r3, [r4, #0]
 800658c:	2b2e      	cmp	r3, #46	; 0x2e
 800658e:	d10c      	bne.n	80065aa <_vfiprintf_r+0x176>
 8006590:	7863      	ldrb	r3, [r4, #1]
 8006592:	2b2a      	cmp	r3, #42	; 0x2a
 8006594:	d135      	bne.n	8006602 <_vfiprintf_r+0x1ce>
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	1d1a      	adds	r2, r3, #4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	9203      	str	r2, [sp, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80065a6:	3402      	adds	r4, #2
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006690 <_vfiprintf_r+0x25c>
 80065ae:	7821      	ldrb	r1, [r4, #0]
 80065b0:	2203      	movs	r2, #3
 80065b2:	4650      	mov	r0, sl
 80065b4:	f7f9 fe14 	bl	80001e0 <memchr>
 80065b8:	b140      	cbz	r0, 80065cc <_vfiprintf_r+0x198>
 80065ba:	2340      	movs	r3, #64	; 0x40
 80065bc:	eba0 000a 	sub.w	r0, r0, sl
 80065c0:	fa03 f000 	lsl.w	r0, r3, r0
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	4303      	orrs	r3, r0
 80065c8:	3401      	adds	r4, #1
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d0:	482c      	ldr	r0, [pc, #176]	; (8006684 <_vfiprintf_r+0x250>)
 80065d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065d6:	2206      	movs	r2, #6
 80065d8:	f7f9 fe02 	bl	80001e0 <memchr>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d03f      	beq.n	8006660 <_vfiprintf_r+0x22c>
 80065e0:	4b29      	ldr	r3, [pc, #164]	; (8006688 <_vfiprintf_r+0x254>)
 80065e2:	bb1b      	cbnz	r3, 800662c <_vfiprintf_r+0x1f8>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	3307      	adds	r3, #7
 80065e8:	f023 0307 	bic.w	r3, r3, #7
 80065ec:	3308      	adds	r3, #8
 80065ee:	9303      	str	r3, [sp, #12]
 80065f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f2:	443b      	add	r3, r7
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	e767      	b.n	80064c8 <_vfiprintf_r+0x94>
 80065f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80065fc:	460c      	mov	r4, r1
 80065fe:	2001      	movs	r0, #1
 8006600:	e7a5      	b.n	800654e <_vfiprintf_r+0x11a>
 8006602:	2300      	movs	r3, #0
 8006604:	3401      	adds	r4, #1
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	4619      	mov	r1, r3
 800660a:	f04f 0c0a 	mov.w	ip, #10
 800660e:	4620      	mov	r0, r4
 8006610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006614:	3a30      	subs	r2, #48	; 0x30
 8006616:	2a09      	cmp	r2, #9
 8006618:	d903      	bls.n	8006622 <_vfiprintf_r+0x1ee>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0c5      	beq.n	80065aa <_vfiprintf_r+0x176>
 800661e:	9105      	str	r1, [sp, #20]
 8006620:	e7c3      	b.n	80065aa <_vfiprintf_r+0x176>
 8006622:	fb0c 2101 	mla	r1, ip, r1, r2
 8006626:	4604      	mov	r4, r0
 8006628:	2301      	movs	r3, #1
 800662a:	e7f0      	b.n	800660e <_vfiprintf_r+0x1da>
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	462a      	mov	r2, r5
 8006632:	4b16      	ldr	r3, [pc, #88]	; (800668c <_vfiprintf_r+0x258>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4630      	mov	r0, r6
 8006638:	f3af 8000 	nop.w
 800663c:	4607      	mov	r7, r0
 800663e:	1c78      	adds	r0, r7, #1
 8006640:	d1d6      	bne.n	80065f0 <_vfiprintf_r+0x1bc>
 8006642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006644:	07d9      	lsls	r1, r3, #31
 8006646:	d405      	bmi.n	8006654 <_vfiprintf_r+0x220>
 8006648:	89ab      	ldrh	r3, [r5, #12]
 800664a:	059a      	lsls	r2, r3, #22
 800664c:	d402      	bmi.n	8006654 <_vfiprintf_r+0x220>
 800664e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006650:	f7ff fe6b 	bl	800632a <__retarget_lock_release_recursive>
 8006654:	89ab      	ldrh	r3, [r5, #12]
 8006656:	065b      	lsls	r3, r3, #25
 8006658:	f53f af12 	bmi.w	8006480 <_vfiprintf_r+0x4c>
 800665c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665e:	e711      	b.n	8006484 <_vfiprintf_r+0x50>
 8006660:	ab03      	add	r3, sp, #12
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	462a      	mov	r2, r5
 8006666:	4b09      	ldr	r3, [pc, #36]	; (800668c <_vfiprintf_r+0x258>)
 8006668:	a904      	add	r1, sp, #16
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f880 	bl	8006770 <_printf_i>
 8006670:	e7e4      	b.n	800663c <_vfiprintf_r+0x208>
 8006672:	bf00      	nop
 8006674:	08007048 	.word	0x08007048
 8006678:	08007068 	.word	0x08007068
 800667c:	08007028 	.word	0x08007028
 8006680:	08007088 	.word	0x08007088
 8006684:	08007092 	.word	0x08007092
 8006688:	00000000 	.word	0x00000000
 800668c:	0800640f 	.word	0x0800640f
 8006690:	0800708e 	.word	0x0800708e

08006694 <_printf_common>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	4616      	mov	r6, r2
 800669a:	4699      	mov	r9, r3
 800669c:	688a      	ldr	r2, [r1, #8]
 800669e:	690b      	ldr	r3, [r1, #16]
 80066a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bfb8      	it	lt
 80066a8:	4613      	movlt	r3, r2
 80066aa:	6033      	str	r3, [r6, #0]
 80066ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066b0:	4607      	mov	r7, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	b10a      	cbz	r2, 80066ba <_printf_common+0x26>
 80066b6:	3301      	adds	r3, #1
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	0699      	lsls	r1, r3, #26
 80066be:	bf42      	ittt	mi
 80066c0:	6833      	ldrmi	r3, [r6, #0]
 80066c2:	3302      	addmi	r3, #2
 80066c4:	6033      	strmi	r3, [r6, #0]
 80066c6:	6825      	ldr	r5, [r4, #0]
 80066c8:	f015 0506 	ands.w	r5, r5, #6
 80066cc:	d106      	bne.n	80066dc <_printf_common+0x48>
 80066ce:	f104 0a19 	add.w	sl, r4, #25
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	6832      	ldr	r2, [r6, #0]
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dc26      	bgt.n	800672a <_printf_common+0x96>
 80066dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066e0:	1e13      	subs	r3, r2, #0
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	bf18      	it	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	0692      	lsls	r2, r2, #26
 80066ea:	d42b      	bmi.n	8006744 <_printf_common+0xb0>
 80066ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066f0:	4649      	mov	r1, r9
 80066f2:	4638      	mov	r0, r7
 80066f4:	47c0      	blx	r8
 80066f6:	3001      	adds	r0, #1
 80066f8:	d01e      	beq.n	8006738 <_printf_common+0xa4>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	68e5      	ldr	r5, [r4, #12]
 80066fe:	6832      	ldr	r2, [r6, #0]
 8006700:	f003 0306 	and.w	r3, r3, #6
 8006704:	2b04      	cmp	r3, #4
 8006706:	bf08      	it	eq
 8006708:	1aad      	subeq	r5, r5, r2
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	6922      	ldr	r2, [r4, #16]
 800670e:	bf0c      	ite	eq
 8006710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006714:	2500      	movne	r5, #0
 8006716:	4293      	cmp	r3, r2
 8006718:	bfc4      	itt	gt
 800671a:	1a9b      	subgt	r3, r3, r2
 800671c:	18ed      	addgt	r5, r5, r3
 800671e:	2600      	movs	r6, #0
 8006720:	341a      	adds	r4, #26
 8006722:	42b5      	cmp	r5, r6
 8006724:	d11a      	bne.n	800675c <_printf_common+0xc8>
 8006726:	2000      	movs	r0, #0
 8006728:	e008      	b.n	800673c <_printf_common+0xa8>
 800672a:	2301      	movs	r3, #1
 800672c:	4652      	mov	r2, sl
 800672e:	4649      	mov	r1, r9
 8006730:	4638      	mov	r0, r7
 8006732:	47c0      	blx	r8
 8006734:	3001      	adds	r0, #1
 8006736:	d103      	bne.n	8006740 <_printf_common+0xac>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	3501      	adds	r5, #1
 8006742:	e7c6      	b.n	80066d2 <_printf_common+0x3e>
 8006744:	18e1      	adds	r1, r4, r3
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	2030      	movs	r0, #48	; 0x30
 800674a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800674e:	4422      	add	r2, r4
 8006750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006758:	3302      	adds	r3, #2
 800675a:	e7c7      	b.n	80066ec <_printf_common+0x58>
 800675c:	2301      	movs	r3, #1
 800675e:	4622      	mov	r2, r4
 8006760:	4649      	mov	r1, r9
 8006762:	4638      	mov	r0, r7
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d0e6      	beq.n	8006738 <_printf_common+0xa4>
 800676a:	3601      	adds	r6, #1
 800676c:	e7d9      	b.n	8006722 <_printf_common+0x8e>
	...

08006770 <_printf_i>:
 8006770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	460c      	mov	r4, r1
 8006776:	4691      	mov	r9, r2
 8006778:	7e27      	ldrb	r7, [r4, #24]
 800677a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800677c:	2f78      	cmp	r7, #120	; 0x78
 800677e:	4680      	mov	r8, r0
 8006780:	469a      	mov	sl, r3
 8006782:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006786:	d807      	bhi.n	8006798 <_printf_i+0x28>
 8006788:	2f62      	cmp	r7, #98	; 0x62
 800678a:	d80a      	bhi.n	80067a2 <_printf_i+0x32>
 800678c:	2f00      	cmp	r7, #0
 800678e:	f000 80d8 	beq.w	8006942 <_printf_i+0x1d2>
 8006792:	2f58      	cmp	r7, #88	; 0x58
 8006794:	f000 80a3 	beq.w	80068de <_printf_i+0x16e>
 8006798:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800679c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067a0:	e03a      	b.n	8006818 <_printf_i+0xa8>
 80067a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067a6:	2b15      	cmp	r3, #21
 80067a8:	d8f6      	bhi.n	8006798 <_printf_i+0x28>
 80067aa:	a001      	add	r0, pc, #4	; (adr r0, 80067b0 <_printf_i+0x40>)
 80067ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80067b0:	08006809 	.word	0x08006809
 80067b4:	0800681d 	.word	0x0800681d
 80067b8:	08006799 	.word	0x08006799
 80067bc:	08006799 	.word	0x08006799
 80067c0:	08006799 	.word	0x08006799
 80067c4:	08006799 	.word	0x08006799
 80067c8:	0800681d 	.word	0x0800681d
 80067cc:	08006799 	.word	0x08006799
 80067d0:	08006799 	.word	0x08006799
 80067d4:	08006799 	.word	0x08006799
 80067d8:	08006799 	.word	0x08006799
 80067dc:	08006929 	.word	0x08006929
 80067e0:	0800684d 	.word	0x0800684d
 80067e4:	0800690b 	.word	0x0800690b
 80067e8:	08006799 	.word	0x08006799
 80067ec:	08006799 	.word	0x08006799
 80067f0:	0800694b 	.word	0x0800694b
 80067f4:	08006799 	.word	0x08006799
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	08006799 	.word	0x08006799
 8006800:	08006799 	.word	0x08006799
 8006804:	08006913 	.word	0x08006913
 8006808:	680b      	ldr	r3, [r1, #0]
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	600a      	str	r2, [r1, #0]
 8006810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006818:	2301      	movs	r3, #1
 800681a:	e0a3      	b.n	8006964 <_printf_i+0x1f4>
 800681c:	6825      	ldr	r5, [r4, #0]
 800681e:	6808      	ldr	r0, [r1, #0]
 8006820:	062e      	lsls	r6, r5, #24
 8006822:	f100 0304 	add.w	r3, r0, #4
 8006826:	d50a      	bpl.n	800683e <_printf_i+0xce>
 8006828:	6805      	ldr	r5, [r0, #0]
 800682a:	600b      	str	r3, [r1, #0]
 800682c:	2d00      	cmp	r5, #0
 800682e:	da03      	bge.n	8006838 <_printf_i+0xc8>
 8006830:	232d      	movs	r3, #45	; 0x2d
 8006832:	426d      	negs	r5, r5
 8006834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006838:	485e      	ldr	r0, [pc, #376]	; (80069b4 <_printf_i+0x244>)
 800683a:	230a      	movs	r3, #10
 800683c:	e019      	b.n	8006872 <_printf_i+0x102>
 800683e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006842:	6805      	ldr	r5, [r0, #0]
 8006844:	600b      	str	r3, [r1, #0]
 8006846:	bf18      	it	ne
 8006848:	b22d      	sxthne	r5, r5
 800684a:	e7ef      	b.n	800682c <_printf_i+0xbc>
 800684c:	680b      	ldr	r3, [r1, #0]
 800684e:	6825      	ldr	r5, [r4, #0]
 8006850:	1d18      	adds	r0, r3, #4
 8006852:	6008      	str	r0, [r1, #0]
 8006854:	0628      	lsls	r0, r5, #24
 8006856:	d501      	bpl.n	800685c <_printf_i+0xec>
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	e002      	b.n	8006862 <_printf_i+0xf2>
 800685c:	0669      	lsls	r1, r5, #25
 800685e:	d5fb      	bpl.n	8006858 <_printf_i+0xe8>
 8006860:	881d      	ldrh	r5, [r3, #0]
 8006862:	4854      	ldr	r0, [pc, #336]	; (80069b4 <_printf_i+0x244>)
 8006864:	2f6f      	cmp	r7, #111	; 0x6f
 8006866:	bf0c      	ite	eq
 8006868:	2308      	moveq	r3, #8
 800686a:	230a      	movne	r3, #10
 800686c:	2100      	movs	r1, #0
 800686e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006872:	6866      	ldr	r6, [r4, #4]
 8006874:	60a6      	str	r6, [r4, #8]
 8006876:	2e00      	cmp	r6, #0
 8006878:	bfa2      	ittt	ge
 800687a:	6821      	ldrge	r1, [r4, #0]
 800687c:	f021 0104 	bicge.w	r1, r1, #4
 8006880:	6021      	strge	r1, [r4, #0]
 8006882:	b90d      	cbnz	r5, 8006888 <_printf_i+0x118>
 8006884:	2e00      	cmp	r6, #0
 8006886:	d04d      	beq.n	8006924 <_printf_i+0x1b4>
 8006888:	4616      	mov	r6, r2
 800688a:	fbb5 f1f3 	udiv	r1, r5, r3
 800688e:	fb03 5711 	mls	r7, r3, r1, r5
 8006892:	5dc7      	ldrb	r7, [r0, r7]
 8006894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006898:	462f      	mov	r7, r5
 800689a:	42bb      	cmp	r3, r7
 800689c:	460d      	mov	r5, r1
 800689e:	d9f4      	bls.n	800688a <_printf_i+0x11a>
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d10b      	bne.n	80068bc <_printf_i+0x14c>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	07df      	lsls	r7, r3, #31
 80068a8:	d508      	bpl.n	80068bc <_printf_i+0x14c>
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	6861      	ldr	r1, [r4, #4]
 80068ae:	4299      	cmp	r1, r3
 80068b0:	bfde      	ittt	le
 80068b2:	2330      	movle	r3, #48	; 0x30
 80068b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068bc:	1b92      	subs	r2, r2, r6
 80068be:	6122      	str	r2, [r4, #16]
 80068c0:	f8cd a000 	str.w	sl, [sp]
 80068c4:	464b      	mov	r3, r9
 80068c6:	aa03      	add	r2, sp, #12
 80068c8:	4621      	mov	r1, r4
 80068ca:	4640      	mov	r0, r8
 80068cc:	f7ff fee2 	bl	8006694 <_printf_common>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d14c      	bne.n	800696e <_printf_i+0x1fe>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	b004      	add	sp, #16
 80068da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068de:	4835      	ldr	r0, [pc, #212]	; (80069b4 <_printf_i+0x244>)
 80068e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	680e      	ldr	r6, [r1, #0]
 80068e8:	061f      	lsls	r7, r3, #24
 80068ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80068ee:	600e      	str	r6, [r1, #0]
 80068f0:	d514      	bpl.n	800691c <_printf_i+0x1ac>
 80068f2:	07d9      	lsls	r1, r3, #31
 80068f4:	bf44      	itt	mi
 80068f6:	f043 0320 	orrmi.w	r3, r3, #32
 80068fa:	6023      	strmi	r3, [r4, #0]
 80068fc:	b91d      	cbnz	r5, 8006906 <_printf_i+0x196>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	f023 0320 	bic.w	r3, r3, #32
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	2310      	movs	r3, #16
 8006908:	e7b0      	b.n	800686c <_printf_i+0xfc>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	f043 0320 	orr.w	r3, r3, #32
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	2378      	movs	r3, #120	; 0x78
 8006914:	4828      	ldr	r0, [pc, #160]	; (80069b8 <_printf_i+0x248>)
 8006916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800691a:	e7e3      	b.n	80068e4 <_printf_i+0x174>
 800691c:	065e      	lsls	r6, r3, #25
 800691e:	bf48      	it	mi
 8006920:	b2ad      	uxthmi	r5, r5
 8006922:	e7e6      	b.n	80068f2 <_printf_i+0x182>
 8006924:	4616      	mov	r6, r2
 8006926:	e7bb      	b.n	80068a0 <_printf_i+0x130>
 8006928:	680b      	ldr	r3, [r1, #0]
 800692a:	6826      	ldr	r6, [r4, #0]
 800692c:	6960      	ldr	r0, [r4, #20]
 800692e:	1d1d      	adds	r5, r3, #4
 8006930:	600d      	str	r5, [r1, #0]
 8006932:	0635      	lsls	r5, r6, #24
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	d501      	bpl.n	800693c <_printf_i+0x1cc>
 8006938:	6018      	str	r0, [r3, #0]
 800693a:	e002      	b.n	8006942 <_printf_i+0x1d2>
 800693c:	0671      	lsls	r1, r6, #25
 800693e:	d5fb      	bpl.n	8006938 <_printf_i+0x1c8>
 8006940:	8018      	strh	r0, [r3, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	4616      	mov	r6, r2
 8006948:	e7ba      	b.n	80068c0 <_printf_i+0x150>
 800694a:	680b      	ldr	r3, [r1, #0]
 800694c:	1d1a      	adds	r2, r3, #4
 800694e:	600a      	str	r2, [r1, #0]
 8006950:	681e      	ldr	r6, [r3, #0]
 8006952:	6862      	ldr	r2, [r4, #4]
 8006954:	2100      	movs	r1, #0
 8006956:	4630      	mov	r0, r6
 8006958:	f7f9 fc42 	bl	80001e0 <memchr>
 800695c:	b108      	cbz	r0, 8006962 <_printf_i+0x1f2>
 800695e:	1b80      	subs	r0, r0, r6
 8006960:	6060      	str	r0, [r4, #4]
 8006962:	6863      	ldr	r3, [r4, #4]
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	2300      	movs	r3, #0
 8006968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800696c:	e7a8      	b.n	80068c0 <_printf_i+0x150>
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	4632      	mov	r2, r6
 8006972:	4649      	mov	r1, r9
 8006974:	4640      	mov	r0, r8
 8006976:	47d0      	blx	sl
 8006978:	3001      	adds	r0, #1
 800697a:	d0ab      	beq.n	80068d4 <_printf_i+0x164>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	079b      	lsls	r3, r3, #30
 8006980:	d413      	bmi.n	80069aa <_printf_i+0x23a>
 8006982:	68e0      	ldr	r0, [r4, #12]
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	4298      	cmp	r0, r3
 8006988:	bfb8      	it	lt
 800698a:	4618      	movlt	r0, r3
 800698c:	e7a4      	b.n	80068d8 <_printf_i+0x168>
 800698e:	2301      	movs	r3, #1
 8006990:	4632      	mov	r2, r6
 8006992:	4649      	mov	r1, r9
 8006994:	4640      	mov	r0, r8
 8006996:	47d0      	blx	sl
 8006998:	3001      	adds	r0, #1
 800699a:	d09b      	beq.n	80068d4 <_printf_i+0x164>
 800699c:	3501      	adds	r5, #1
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	9903      	ldr	r1, [sp, #12]
 80069a2:	1a5b      	subs	r3, r3, r1
 80069a4:	42ab      	cmp	r3, r5
 80069a6:	dcf2      	bgt.n	800698e <_printf_i+0x21e>
 80069a8:	e7eb      	b.n	8006982 <_printf_i+0x212>
 80069aa:	2500      	movs	r5, #0
 80069ac:	f104 0619 	add.w	r6, r4, #25
 80069b0:	e7f5      	b.n	800699e <_printf_i+0x22e>
 80069b2:	bf00      	nop
 80069b4:	08007099 	.word	0x08007099
 80069b8:	080070aa 	.word	0x080070aa

080069bc <_sbrk_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d06      	ldr	r5, [pc, #24]	; (80069d8 <_sbrk_r+0x1c>)
 80069c0:	2300      	movs	r3, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	f7fa fad0 	bl	8000f6c <_sbrk>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_sbrk_r+0x1a>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_sbrk_r+0x1a>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20004b08 	.word	0x20004b08

080069dc <__sread>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	460c      	mov	r4, r1
 80069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e4:	f000 fab4 	bl	8006f50 <_read_r>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	bfab      	itete	ge
 80069ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069ee:	89a3      	ldrhlt	r3, [r4, #12]
 80069f0:	181b      	addge	r3, r3, r0
 80069f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069f6:	bfac      	ite	ge
 80069f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80069fa:	81a3      	strhlt	r3, [r4, #12]
 80069fc:	bd10      	pop	{r4, pc}

080069fe <__swrite>:
 80069fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	461f      	mov	r7, r3
 8006a04:	898b      	ldrh	r3, [r1, #12]
 8006a06:	05db      	lsls	r3, r3, #23
 8006a08:	4605      	mov	r5, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	d505      	bpl.n	8006a1c <__swrite+0x1e>
 8006a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a14:	2302      	movs	r3, #2
 8006a16:	2200      	movs	r2, #0
 8006a18:	f000 f9c8 	bl	8006dac <_lseek_r>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	4632      	mov	r2, r6
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a32:	f000 b869 	b.w	8006b08 <_write_r>

08006a36 <__sseek>:
 8006a36:	b510      	push	{r4, lr}
 8006a38:	460c      	mov	r4, r1
 8006a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3e:	f000 f9b5 	bl	8006dac <_lseek_r>
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	bf15      	itete	ne
 8006a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a52:	81a3      	strheq	r3, [r4, #12]
 8006a54:	bf18      	it	ne
 8006a56:	81a3      	strhne	r3, [r4, #12]
 8006a58:	bd10      	pop	{r4, pc}

08006a5a <__sclose>:
 8006a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5e:	f000 b8d3 	b.w	8006c08 <_close_r>
	...

08006a64 <__swbuf_r>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	460e      	mov	r6, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	b118      	cbz	r0, 8006a76 <__swbuf_r+0x12>
 8006a6e:	6983      	ldr	r3, [r0, #24]
 8006a70:	b90b      	cbnz	r3, 8006a76 <__swbuf_r+0x12>
 8006a72:	f7ff fbbb 	bl	80061ec <__sinit>
 8006a76:	4b21      	ldr	r3, [pc, #132]	; (8006afc <__swbuf_r+0x98>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	d12b      	bne.n	8006ad4 <__swbuf_r+0x70>
 8006a7c:	686c      	ldr	r4, [r5, #4]
 8006a7e:	69a3      	ldr	r3, [r4, #24]
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	071a      	lsls	r2, r3, #28
 8006a86:	d52f      	bpl.n	8006ae8 <__swbuf_r+0x84>
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	b36b      	cbz	r3, 8006ae8 <__swbuf_r+0x84>
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1ac0      	subs	r0, r0, r3
 8006a92:	6963      	ldr	r3, [r4, #20]
 8006a94:	b2f6      	uxtb	r6, r6
 8006a96:	4283      	cmp	r3, r0
 8006a98:	4637      	mov	r7, r6
 8006a9a:	dc04      	bgt.n	8006aa6 <__swbuf_r+0x42>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f948 	bl	8006d34 <_fflush_r>
 8006aa4:	bb30      	cbnz	r0, 8006af4 <__swbuf_r+0x90>
 8006aa6:	68a3      	ldr	r3, [r4, #8]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	60a3      	str	r3, [r4, #8]
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	701e      	strb	r6, [r3, #0]
 8006ab4:	6963      	ldr	r3, [r4, #20]
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	4283      	cmp	r3, r0
 8006aba:	d004      	beq.n	8006ac6 <__swbuf_r+0x62>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	07db      	lsls	r3, r3, #31
 8006ac0:	d506      	bpl.n	8006ad0 <__swbuf_r+0x6c>
 8006ac2:	2e0a      	cmp	r6, #10
 8006ac4:	d104      	bne.n	8006ad0 <__swbuf_r+0x6c>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f933 	bl	8006d34 <_fflush_r>
 8006ace:	b988      	cbnz	r0, 8006af4 <__swbuf_r+0x90>
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <__swbuf_r+0x9c>)
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	d101      	bne.n	8006ade <__swbuf_r+0x7a>
 8006ada:	68ac      	ldr	r4, [r5, #8]
 8006adc:	e7cf      	b.n	8006a7e <__swbuf_r+0x1a>
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <__swbuf_r+0xa0>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	bf08      	it	eq
 8006ae4:	68ec      	ldreq	r4, [r5, #12]
 8006ae6:	e7ca      	b.n	8006a7e <__swbuf_r+0x1a>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 f81e 	bl	8006b2c <__swsetup_r>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d0cb      	beq.n	8006a8c <__swbuf_r+0x28>
 8006af4:	f04f 37ff 	mov.w	r7, #4294967295
 8006af8:	e7ea      	b.n	8006ad0 <__swbuf_r+0x6c>
 8006afa:	bf00      	nop
 8006afc:	08007048 	.word	0x08007048
 8006b00:	08007068 	.word	0x08007068
 8006b04:	08007028 	.word	0x08007028

08006b08 <_write_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d07      	ldr	r5, [pc, #28]	; (8006b28 <_write_r+0x20>)
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	4608      	mov	r0, r1
 8006b10:	4611      	mov	r1, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	602a      	str	r2, [r5, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7fa f9d7 	bl	8000eca <_write>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_write_r+0x1e>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_write_r+0x1e>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	20004b08 	.word	0x20004b08

08006b2c <__swsetup_r>:
 8006b2c:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <__swsetup_r+0xcc>)
 8006b2e:	b570      	push	{r4, r5, r6, lr}
 8006b30:	681d      	ldr	r5, [r3, #0]
 8006b32:	4606      	mov	r6, r0
 8006b34:	460c      	mov	r4, r1
 8006b36:	b125      	cbz	r5, 8006b42 <__swsetup_r+0x16>
 8006b38:	69ab      	ldr	r3, [r5, #24]
 8006b3a:	b913      	cbnz	r3, 8006b42 <__swsetup_r+0x16>
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f7ff fb55 	bl	80061ec <__sinit>
 8006b42:	4b2e      	ldr	r3, [pc, #184]	; (8006bfc <__swsetup_r+0xd0>)
 8006b44:	429c      	cmp	r4, r3
 8006b46:	d10f      	bne.n	8006b68 <__swsetup_r+0x3c>
 8006b48:	686c      	ldr	r4, [r5, #4]
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b50:	0719      	lsls	r1, r3, #28
 8006b52:	d42c      	bmi.n	8006bae <__swsetup_r+0x82>
 8006b54:	06dd      	lsls	r5, r3, #27
 8006b56:	d411      	bmi.n	8006b7c <__swsetup_r+0x50>
 8006b58:	2309      	movs	r3, #9
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b60:	81a3      	strh	r3, [r4, #12]
 8006b62:	f04f 30ff 	mov.w	r0, #4294967295
 8006b66:	e03e      	b.n	8006be6 <__swsetup_r+0xba>
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <__swsetup_r+0xd4>)
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d101      	bne.n	8006b72 <__swsetup_r+0x46>
 8006b6e:	68ac      	ldr	r4, [r5, #8]
 8006b70:	e7eb      	b.n	8006b4a <__swsetup_r+0x1e>
 8006b72:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <__swsetup_r+0xd8>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	bf08      	it	eq
 8006b78:	68ec      	ldreq	r4, [r5, #12]
 8006b7a:	e7e6      	b.n	8006b4a <__swsetup_r+0x1e>
 8006b7c:	0758      	lsls	r0, r3, #29
 8006b7e:	d512      	bpl.n	8006ba6 <__swsetup_r+0x7a>
 8006b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b82:	b141      	cbz	r1, 8006b96 <__swsetup_r+0x6a>
 8006b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b88:	4299      	cmp	r1, r3
 8006b8a:	d002      	beq.n	8006b92 <__swsetup_r+0x66>
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f000 f98f 	bl	8006eb0 <_free_r>
 8006b92:	2300      	movs	r3, #0
 8006b94:	6363      	str	r3, [r4, #52]	; 0x34
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f043 0308 	orr.w	r3, r3, #8
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	b94b      	cbnz	r3, 8006bc6 <__swsetup_r+0x9a>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bbc:	d003      	beq.n	8006bc6 <__swsetup_r+0x9a>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f929 	bl	8006e18 <__smakebuf_r>
 8006bc6:	89a0      	ldrh	r0, [r4, #12]
 8006bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bcc:	f010 0301 	ands.w	r3, r0, #1
 8006bd0:	d00a      	beq.n	8006be8 <__swsetup_r+0xbc>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6963      	ldr	r3, [r4, #20]
 8006bd8:	425b      	negs	r3, r3
 8006bda:	61a3      	str	r3, [r4, #24]
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	b943      	cbnz	r3, 8006bf2 <__swsetup_r+0xc6>
 8006be0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006be4:	d1ba      	bne.n	8006b5c <__swsetup_r+0x30>
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	0781      	lsls	r1, r0, #30
 8006bea:	bf58      	it	pl
 8006bec:	6963      	ldrpl	r3, [r4, #20]
 8006bee:	60a3      	str	r3, [r4, #8]
 8006bf0:	e7f4      	b.n	8006bdc <__swsetup_r+0xb0>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e7f7      	b.n	8006be6 <__swsetup_r+0xba>
 8006bf6:	bf00      	nop
 8006bf8:	2000002c 	.word	0x2000002c
 8006bfc:	08007048 	.word	0x08007048
 8006c00:	08007068 	.word	0x08007068
 8006c04:	08007028 	.word	0x08007028

08006c08 <_close_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d06      	ldr	r5, [pc, #24]	; (8006c24 <_close_r+0x1c>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	f7fa f975 	bl	8000f02 <_close>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_close_r+0x1a>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_close_r+0x1a>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20004b08 	.word	0x20004b08

08006c28 <__sflush_r>:
 8006c28:	898a      	ldrh	r2, [r1, #12]
 8006c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2e:	4605      	mov	r5, r0
 8006c30:	0710      	lsls	r0, r2, #28
 8006c32:	460c      	mov	r4, r1
 8006c34:	d458      	bmi.n	8006ce8 <__sflush_r+0xc0>
 8006c36:	684b      	ldr	r3, [r1, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dc05      	bgt.n	8006c48 <__sflush_r+0x20>
 8006c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dc02      	bgt.n	8006c48 <__sflush_r+0x20>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c4a:	2e00      	cmp	r6, #0
 8006c4c:	d0f9      	beq.n	8006c42 <__sflush_r+0x1a>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c54:	682f      	ldr	r7, [r5, #0]
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	d032      	beq.n	8006cc0 <__sflush_r+0x98>
 8006c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	075a      	lsls	r2, r3, #29
 8006c60:	d505      	bpl.n	8006c6e <__sflush_r+0x46>
 8006c62:	6863      	ldr	r3, [r4, #4]
 8006c64:	1ac0      	subs	r0, r0, r3
 8006c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c68:	b10b      	cbz	r3, 8006c6e <__sflush_r+0x46>
 8006c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c6c:	1ac0      	subs	r0, r0, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	4602      	mov	r2, r0
 8006c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c74:	6a21      	ldr	r1, [r4, #32]
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b0      	blx	r6
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	d106      	bne.n	8006c8e <__sflush_r+0x66>
 8006c80:	6829      	ldr	r1, [r5, #0]
 8006c82:	291d      	cmp	r1, #29
 8006c84:	d82c      	bhi.n	8006ce0 <__sflush_r+0xb8>
 8006c86:	4a2a      	ldr	r2, [pc, #168]	; (8006d30 <__sflush_r+0x108>)
 8006c88:	40ca      	lsrs	r2, r1
 8006c8a:	07d6      	lsls	r6, r2, #31
 8006c8c:	d528      	bpl.n	8006ce0 <__sflush_r+0xb8>
 8006c8e:	2200      	movs	r2, #0
 8006c90:	6062      	str	r2, [r4, #4]
 8006c92:	04d9      	lsls	r1, r3, #19
 8006c94:	6922      	ldr	r2, [r4, #16]
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	d504      	bpl.n	8006ca4 <__sflush_r+0x7c>
 8006c9a:	1c42      	adds	r2, r0, #1
 8006c9c:	d101      	bne.n	8006ca2 <__sflush_r+0x7a>
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	b903      	cbnz	r3, 8006ca4 <__sflush_r+0x7c>
 8006ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ca6:	602f      	str	r7, [r5, #0]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	d0ca      	beq.n	8006c42 <__sflush_r+0x1a>
 8006cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	d002      	beq.n	8006cba <__sflush_r+0x92>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f8fb 	bl	8006eb0 <_free_r>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8006cbe:	e7c1      	b.n	8006c44 <__sflush_r+0x1c>
 8006cc0:	6a21      	ldr	r1, [r4, #32]
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	47b0      	blx	r6
 8006cc8:	1c41      	adds	r1, r0, #1
 8006cca:	d1c7      	bne.n	8006c5c <__sflush_r+0x34>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0c4      	beq.n	8006c5c <__sflush_r+0x34>
 8006cd2:	2b1d      	cmp	r3, #29
 8006cd4:	d001      	beq.n	8006cda <__sflush_r+0xb2>
 8006cd6:	2b16      	cmp	r3, #22
 8006cd8:	d101      	bne.n	8006cde <__sflush_r+0xb6>
 8006cda:	602f      	str	r7, [r5, #0]
 8006cdc:	e7b1      	b.n	8006c42 <__sflush_r+0x1a>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce4:	81a3      	strh	r3, [r4, #12]
 8006ce6:	e7ad      	b.n	8006c44 <__sflush_r+0x1c>
 8006ce8:	690f      	ldr	r7, [r1, #16]
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	d0a9      	beq.n	8006c42 <__sflush_r+0x1a>
 8006cee:	0793      	lsls	r3, r2, #30
 8006cf0:	680e      	ldr	r6, [r1, #0]
 8006cf2:	bf08      	it	eq
 8006cf4:	694b      	ldreq	r3, [r1, #20]
 8006cf6:	600f      	str	r7, [r1, #0]
 8006cf8:	bf18      	it	ne
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	eba6 0807 	sub.w	r8, r6, r7
 8006d00:	608b      	str	r3, [r1, #8]
 8006d02:	f1b8 0f00 	cmp.w	r8, #0
 8006d06:	dd9c      	ble.n	8006c42 <__sflush_r+0x1a>
 8006d08:	6a21      	ldr	r1, [r4, #32]
 8006d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d0c:	4643      	mov	r3, r8
 8006d0e:	463a      	mov	r2, r7
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b0      	blx	r6
 8006d14:	2800      	cmp	r0, #0
 8006d16:	dc06      	bgt.n	8006d26 <__sflush_r+0xfe>
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295
 8006d24:	e78e      	b.n	8006c44 <__sflush_r+0x1c>
 8006d26:	4407      	add	r7, r0
 8006d28:	eba8 0800 	sub.w	r8, r8, r0
 8006d2c:	e7e9      	b.n	8006d02 <__sflush_r+0xda>
 8006d2e:	bf00      	nop
 8006d30:	20400001 	.word	0x20400001

08006d34 <_fflush_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	4605      	mov	r5, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b913      	cbnz	r3, 8006d44 <_fflush_r+0x10>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	4628      	mov	r0, r5
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	b118      	cbz	r0, 8006d4e <_fflush_r+0x1a>
 8006d46:	6983      	ldr	r3, [r0, #24]
 8006d48:	b90b      	cbnz	r3, 8006d4e <_fflush_r+0x1a>
 8006d4a:	f7ff fa4f 	bl	80061ec <__sinit>
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <_fflush_r+0x6c>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d11b      	bne.n	8006d8c <_fflush_r+0x58>
 8006d54:	686c      	ldr	r4, [r5, #4]
 8006d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ef      	beq.n	8006d3e <_fflush_r+0xa>
 8006d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d60:	07d0      	lsls	r0, r2, #31
 8006d62:	d404      	bmi.n	8006d6e <_fflush_r+0x3a>
 8006d64:	0599      	lsls	r1, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_fflush_r+0x3a>
 8006d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6a:	f7ff fadd 	bl	8006328 <__retarget_lock_acquire_recursive>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4621      	mov	r1, r4
 8006d72:	f7ff ff59 	bl	8006c28 <__sflush_r>
 8006d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d78:	07da      	lsls	r2, r3, #31
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	d4e0      	bmi.n	8006d40 <_fflush_r+0xc>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	059b      	lsls	r3, r3, #22
 8006d82:	d4dd      	bmi.n	8006d40 <_fflush_r+0xc>
 8006d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d86:	f7ff fad0 	bl	800632a <__retarget_lock_release_recursive>
 8006d8a:	e7d9      	b.n	8006d40 <_fflush_r+0xc>
 8006d8c:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <_fflush_r+0x70>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d101      	bne.n	8006d96 <_fflush_r+0x62>
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	e7df      	b.n	8006d56 <_fflush_r+0x22>
 8006d96:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <_fflush_r+0x74>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	bf08      	it	eq
 8006d9c:	68ec      	ldreq	r4, [r5, #12]
 8006d9e:	e7da      	b.n	8006d56 <_fflush_r+0x22>
 8006da0:	08007048 	.word	0x08007048
 8006da4:	08007068 	.word	0x08007068
 8006da8:	08007028 	.word	0x08007028

08006dac <_lseek_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d07      	ldr	r5, [pc, #28]	; (8006dcc <_lseek_r+0x20>)
 8006db0:	4604      	mov	r4, r0
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	602a      	str	r2, [r5, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f7fa f8c8 	bl	8000f50 <_lseek>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_lseek_r+0x1e>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_lseek_r+0x1e>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20004b08 	.word	0x20004b08

08006dd0 <__swhatbuf_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	b096      	sub	sp, #88	; 0x58
 8006ddc:	4614      	mov	r4, r2
 8006dde:	461d      	mov	r5, r3
 8006de0:	da07      	bge.n	8006df2 <__swhatbuf_r+0x22>
 8006de2:	2300      	movs	r3, #0
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	89b3      	ldrh	r3, [r6, #12]
 8006de8:	061a      	lsls	r2, r3, #24
 8006dea:	d410      	bmi.n	8006e0e <__swhatbuf_r+0x3e>
 8006dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df0:	e00e      	b.n	8006e10 <__swhatbuf_r+0x40>
 8006df2:	466a      	mov	r2, sp
 8006df4:	f000 f8be 	bl	8006f74 <_fstat_r>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	dbf2      	blt.n	8006de2 <__swhatbuf_r+0x12>
 8006dfc:	9a01      	ldr	r2, [sp, #4]
 8006dfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e06:	425a      	negs	r2, r3
 8006e08:	415a      	adcs	r2, r3
 8006e0a:	602a      	str	r2, [r5, #0]
 8006e0c:	e7ee      	b.n	8006dec <__swhatbuf_r+0x1c>
 8006e0e:	2340      	movs	r3, #64	; 0x40
 8006e10:	2000      	movs	r0, #0
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	b016      	add	sp, #88	; 0x58
 8006e16:	bd70      	pop	{r4, r5, r6, pc}

08006e18 <__smakebuf_r>:
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e1c:	079d      	lsls	r5, r3, #30
 8006e1e:	4606      	mov	r6, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	d507      	bpl.n	8006e34 <__smakebuf_r+0x1c>
 8006e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	6163      	str	r3, [r4, #20]
 8006e30:	b002      	add	sp, #8
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	ab01      	add	r3, sp, #4
 8006e36:	466a      	mov	r2, sp
 8006e38:	f7ff ffca 	bl	8006dd0 <__swhatbuf_r>
 8006e3c:	9900      	ldr	r1, [sp, #0]
 8006e3e:	4605      	mov	r5, r0
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff fa73 	bl	800632c <_malloc_r>
 8006e46:	b948      	cbnz	r0, 8006e5c <__smakebuf_r+0x44>
 8006e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4c:	059a      	lsls	r2, r3, #22
 8006e4e:	d4ef      	bmi.n	8006e30 <__smakebuf_r+0x18>
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	f043 0302 	orr.w	r3, r3, #2
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	e7e3      	b.n	8006e24 <__smakebuf_r+0xc>
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <__smakebuf_r+0x7c>)
 8006e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	6020      	str	r0, [r4, #0]
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	6163      	str	r3, [r4, #20]
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	6120      	str	r0, [r4, #16]
 8006e72:	b15b      	cbz	r3, 8006e8c <__smakebuf_r+0x74>
 8006e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 f88d 	bl	8006f98 <_isatty_r>
 8006e7e:	b128      	cbz	r0, 8006e8c <__smakebuf_r+0x74>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	89a0      	ldrh	r0, [r4, #12]
 8006e8e:	4305      	orrs	r5, r0
 8006e90:	81a5      	strh	r5, [r4, #12]
 8006e92:	e7cd      	b.n	8006e30 <__smakebuf_r+0x18>
 8006e94:	08006185 	.word	0x08006185

08006e98 <__malloc_lock>:
 8006e98:	4801      	ldr	r0, [pc, #4]	; (8006ea0 <__malloc_lock+0x8>)
 8006e9a:	f7ff ba45 	b.w	8006328 <__retarget_lock_acquire_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	20004b00 	.word	0x20004b00

08006ea4 <__malloc_unlock>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	; (8006eac <__malloc_unlock+0x8>)
 8006ea6:	f7ff ba40 	b.w	800632a <__retarget_lock_release_recursive>
 8006eaa:	bf00      	nop
 8006eac:	20004b00 	.word	0x20004b00

08006eb0 <_free_r>:
 8006eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eb2:	2900      	cmp	r1, #0
 8006eb4:	d048      	beq.n	8006f48 <_free_r+0x98>
 8006eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eba:	9001      	str	r0, [sp, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8006ec2:	bfb8      	it	lt
 8006ec4:	18e4      	addlt	r4, r4, r3
 8006ec6:	f7ff ffe7 	bl	8006e98 <__malloc_lock>
 8006eca:	4a20      	ldr	r2, [pc, #128]	; (8006f4c <_free_r+0x9c>)
 8006ecc:	9801      	ldr	r0, [sp, #4]
 8006ece:	6813      	ldr	r3, [r2, #0]
 8006ed0:	4615      	mov	r5, r2
 8006ed2:	b933      	cbnz	r3, 8006ee2 <_free_r+0x32>
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	6014      	str	r4, [r2, #0]
 8006ed8:	b003      	add	sp, #12
 8006eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ede:	f7ff bfe1 	b.w	8006ea4 <__malloc_unlock>
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	d90b      	bls.n	8006efe <_free_r+0x4e>
 8006ee6:	6821      	ldr	r1, [r4, #0]
 8006ee8:	1862      	adds	r2, r4, r1
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bf04      	itt	eq
 8006eee:	681a      	ldreq	r2, [r3, #0]
 8006ef0:	685b      	ldreq	r3, [r3, #4]
 8006ef2:	6063      	str	r3, [r4, #4]
 8006ef4:	bf04      	itt	eq
 8006ef6:	1852      	addeq	r2, r2, r1
 8006ef8:	6022      	streq	r2, [r4, #0]
 8006efa:	602c      	str	r4, [r5, #0]
 8006efc:	e7ec      	b.n	8006ed8 <_free_r+0x28>
 8006efe:	461a      	mov	r2, r3
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	b10b      	cbz	r3, 8006f08 <_free_r+0x58>
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	d9fa      	bls.n	8006efe <_free_r+0x4e>
 8006f08:	6811      	ldr	r1, [r2, #0]
 8006f0a:	1855      	adds	r5, r2, r1
 8006f0c:	42a5      	cmp	r5, r4
 8006f0e:	d10b      	bne.n	8006f28 <_free_r+0x78>
 8006f10:	6824      	ldr	r4, [r4, #0]
 8006f12:	4421      	add	r1, r4
 8006f14:	1854      	adds	r4, r2, r1
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	6011      	str	r1, [r2, #0]
 8006f1a:	d1dd      	bne.n	8006ed8 <_free_r+0x28>
 8006f1c:	681c      	ldr	r4, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	6053      	str	r3, [r2, #4]
 8006f22:	4421      	add	r1, r4
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	e7d7      	b.n	8006ed8 <_free_r+0x28>
 8006f28:	d902      	bls.n	8006f30 <_free_r+0x80>
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	6003      	str	r3, [r0, #0]
 8006f2e:	e7d3      	b.n	8006ed8 <_free_r+0x28>
 8006f30:	6825      	ldr	r5, [r4, #0]
 8006f32:	1961      	adds	r1, r4, r5
 8006f34:	428b      	cmp	r3, r1
 8006f36:	bf04      	itt	eq
 8006f38:	6819      	ldreq	r1, [r3, #0]
 8006f3a:	685b      	ldreq	r3, [r3, #4]
 8006f3c:	6063      	str	r3, [r4, #4]
 8006f3e:	bf04      	itt	eq
 8006f40:	1949      	addeq	r1, r1, r5
 8006f42:	6021      	streq	r1, [r4, #0]
 8006f44:	6054      	str	r4, [r2, #4]
 8006f46:	e7c7      	b.n	8006ed8 <_free_r+0x28>
 8006f48:	b003      	add	sp, #12
 8006f4a:	bd30      	pop	{r4, r5, pc}
 8006f4c:	200049c4 	.word	0x200049c4

08006f50 <_read_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d07      	ldr	r5, [pc, #28]	; (8006f70 <_read_r+0x20>)
 8006f54:	4604      	mov	r4, r0
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7f9 ff96 	bl	8000e90 <_read>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_read_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_read_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20004b08 	.word	0x20004b08

08006f74 <_fstat_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_fstat_r+0x20>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f7f9 ffca 	bl	8000f1a <_fstat>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d102      	bne.n	8006f90 <_fstat_r+0x1c>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	b103      	cbz	r3, 8006f90 <_fstat_r+0x1c>
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	20004b08 	.word	0x20004b08

08006f98 <_isatty_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d06      	ldr	r5, [pc, #24]	; (8006fb4 <_isatty_r+0x1c>)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	f7f9 ffc9 	bl	8000f3a <_isatty>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_isatty_r+0x1a>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_isatty_r+0x1a>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20004b08 	.word	0x20004b08

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
