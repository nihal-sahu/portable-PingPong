
STM32_Configs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a74  20000074  08006ec0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ae8  08006ec0  00024ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0f  00000000  00000000  0003e39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00041db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  000434a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004db2  00000000  00000000  00044a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001875f  00000000  00000000  000497fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009afba  00000000  00000000  00061f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcf13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  000fcf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d28 	.word	0x08006d28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006d28 	.word	0x08006d28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
		GPIO_PIN_8,
		GPIO_PIN_9,
};

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8

  HAL_Init();
 800057e:	f000 fc55 	bl	8000e2c <HAL_Init>
  SystemClock_Config();
 8000582:	f000 f8cb 	bl	800071c <SystemClock_Config>
  MX_GPIO_Init();
 8000586:	f000 f99f 	bl	80008c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f973 	bl	8000874 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800058e:	f000 f931 	bl	80007f4 <MX_SPI1_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		//writing CS pin to default as high
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <main+0x78>)
 8000598:	f000 ff2a 	bl	80013f0 <HAL_GPIO_WritePin>

  //CREATING RTOS TASKS
  //start button
  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800059c:	bf00      	nop
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4814      	ldr	r0, [pc, #80]	; (80005f4 <main+0x7c>)
 80005a4:	f000 ff0c 	bl	80013c0 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f7      	bne.n	800059e <main+0x26>
//		  HAL_Delay(100);
//	  }
//  }


  xTaskCreate(data_transfer, "Data Transfer", 100, NULL, 1, NULL);		  //task for SPI data communication
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	490f      	ldr	r1, [pc, #60]	; (80005f8 <main+0x80>)
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x84>)
 80005be:	f003 fd74 	bl	80040aa <xTaskCreate>
  xTaskCreate(green_press, "Green Press", 100, NULL, 1, NULL);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	490c      	ldr	r1, [pc, #48]	; (8000600 <main+0x88>)
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <main+0x8c>)
 80005d2:	f003 fd6a 	bl	80040aa <xTaskCreate>
  xTaskCreate(yellow_press, "Yellow Press", 100, NULL, 1, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	4909      	ldr	r1, [pc, #36]	; (8000608 <main+0x90>)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x94>)
 80005e6:	f003 fd60 	bl	80040aa <xTaskCreate>


  //start the scheduler
  vTaskStartScheduler();
 80005ea:	f003 ff55 	bl	8004498 <vTaskStartScheduler>

  while (1);
 80005ee:	e7fe      	b.n	80005ee <main+0x76>
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020800 	.word	0x40020800
 80005f8:	08006d40 	.word	0x08006d40
 80005fc:	08000611 	.word	0x08000611
 8000600:	08006d50 	.word	0x08006d50
 8000604:	08000685 	.word	0x08000685
 8000608:	08006d5c 	.word	0x08006d5c
 800060c:	080006ad 	.word	0x080006ad

08000610 <data_transfer>:

  return 0;
}

void data_transfer(void *pvParameters)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(250);
 8000618:	23fa      	movs	r3, #250	; 0xfa
 800061a:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();	//checks for SPI data periodically
 800061c:	f004 f84e 	bl	80046bc <xTaskGetTickCount>
 8000620:	4603      	mov	r3, r0
 8000622:	60bb      	str	r3, [r7, #8]

	while (1)
	{
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	68f9      	ldr	r1, [r7, #12]
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fe82 	bl	8004334 <vTaskDelayUntil>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <data_transfer+0x60>)
 8000636:	f000 fedb 	bl	80013f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&MasterSend, 1, 10);
 800063a:	230a      	movs	r3, #10
 800063c:	2201      	movs	r2, #1
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <data_transfer+0x64>)
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <data_transfer+0x68>)
 8000642:	f001 fc1e 	bl	8001e82 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t*)&MasterReceive, 1, 10);
 8000646:	230a      	movs	r3, #10
 8000648:	2201      	movs	r2, #1
 800064a:	490c      	ldr	r1, [pc, #48]	; (800067c <data_transfer+0x6c>)
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <data_transfer+0x68>)
 800064e:	f001 fd54 	bl	80020fa <HAL_SPI_Receive>
		vTaskDelay(pdMS_TO_TICKS(10));
 8000652:	200a      	movs	r0, #10
 8000654:	f003 feec 	bl	8004430 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <data_transfer+0x60>)
 800065e:	f000 fec7 	bl	80013f0 <HAL_GPIO_WritePin>

		printf("%d\n\r", MasterReceive);
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <data_transfer+0x6c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <data_transfer+0x70>)
 800066a:	f005 fc07 	bl	8005e7c <iprintf>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800066e:	e7d9      	b.n	8000624 <data_transfer+0x14>
 8000670:	40020000 	.word	0x40020000
 8000674:	20000090 	.word	0x20000090
 8000678:	200049b0 	.word	0x200049b0
 800067c:	200049ac 	.word	0x200049ac
 8000680:	08006d6c 	.word	0x08006d6c

08000684 <green_press>:
	}
}

int counter = 0;
void green_press(void *pvParameters)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
//		MasterSend = 2;
//	}

	while (1)
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800068c:	2104      	movs	r1, #4
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <green_press+0x20>)
 8000690:	f000 fe96 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f8      	beq.n	800068c <green_press+0x8>
		{
			MasterSend = 1;
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <green_press+0x24>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80006a0:	e7f4      	b.n	800068c <green_press+0x8>
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800
 80006a8:	20000090 	.word	0x20000090

080006ac <yellow_press>:

	}
}

void yellow_press(void *pvParameters)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
//		MasterSend = 2;
//	}

	while (1)
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3))
 80006b4:	2108      	movs	r1, #8
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <yellow_press+0x20>)
 80006b8:	f000 fe82 	bl	80013c0 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f8      	beq.n	80006b4 <yellow_press+0x8>
		{
			MasterSend = 2;
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <yellow_press+0x24>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3))
 80006c8:	e7f4      	b.n	80006b4 <yellow_press+0x8>
 80006ca:	bf00      	nop
 80006cc:	40020800 	.word	0x40020800
 80006d0:	20000090 	.word	0x20000090

080006d4 <uart2_write>:
	}
}

//rerouting printf more efficiently
int uart2_write(int ch)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 80006dc:	bf00      	nop
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <uart2_write+0x2c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f9      	beq.n	80006de <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <uart2_write+0x2c>)
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	6053      	str	r3, [r2, #4]

	return ch;
 80006f2:	687b      	ldr	r3, [r7, #4]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40004400 	.word	0x40004400

08000704 <__io_putchar>:

//outputs to serial monitor
int __io_putchar(int ch)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffe1 	bl	80006d4 <uart2_write>
	return ch;
 8000712:	687b      	ldr	r3, [r7, #4]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 fb9e 	bl	8005e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <SystemClock_Config+0xd0>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <SystemClock_Config+0xd0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemClock_Config+0xd4>)
 800076a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <SystemClock_Config+0xd4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000790:	2310      	movs	r3, #16
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000794:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079a:	2304      	movs	r3, #4
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079e:	2307      	movs	r3, #7
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fe3c 	bl	8001424 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007b2:	f000 f921 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f89e 	bl	8001914 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007de:	f000 f90b 	bl	80009f8 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2228      	movs	r2, #40	; 0x28
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f001 fa93 	bl	8001d70 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f8d2 	bl	80009f8 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200049b0 	.word	0x200049b0
 800085c:	40013000 	.word	0x40013000

08000860 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi1);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <SPI1_IRQHandler+0x10>)
 8000866:	f001 fefb 	bl	8002660 <HAL_SPI_IRQHandler>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200049b0 	.word	0x200049b0

08000874 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART2_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008ac:	f002 fba6 	bl	8002ffc <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f89f 	bl	80009f8 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20004a08 	.word	0x20004a08
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <MX_GPIO_Init+0xfc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a37      	ldr	r2, [pc, #220]	; (80009c4 <MX_GPIO_Init+0xfc>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_GPIO_Init+0xfc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <MX_GPIO_Init+0xfc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <MX_GPIO_Init+0xfc>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_GPIO_Init+0xfc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_GPIO_Init+0xfc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a29      	ldr	r2, [pc, #164]	; (80009c4 <MX_GPIO_Init+0xfc>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_GPIO_Init+0xfc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_GPIO_Init+0xfc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <MX_GPIO_Init+0xfc>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_GPIO_Init+0xfc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	481d      	ldr	r0, [pc, #116]	; (80009c8 <MX_GPIO_Init+0x100>)
 8000954:	f000 fd4c 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000958:	2200      	movs	r2, #0
 800095a:	f247 71f7 	movw	r1, #30711	; 0x77f7
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_GPIO_Init+0x104>)
 8000960:	f000 fd46 	bl	80013f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin, Green Button, yellow Button */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8000964:	f242 030c 	movw	r3, #8204	; 0x200c
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x108>)
 800097c:	f000 fb9c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000980:	2310      	movs	r3, #16
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_GPIO_Init+0x100>)
 8000998:	f000 fb8e 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800099c:	f247 73f7 	movw	r3, #30711	; 0x77f7
 80009a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x104>)
 80009b6:	f000 fb7f 	bl	80010b8 <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800

080009d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 fa43 	bl	8000e70 <HAL_IncTick>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010000 	.word	0x40010000

080009f8 <Error_Handler>:

void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  __disable_irq();
  while (1);
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_MspInit+0x54>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_MspInit+0x54>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x54>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x54>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_MspInit+0x54>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x54>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fae9 	bl	8001020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_SPI_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12b      	bne.n	8000ad6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23e0      	movs	r3, #224	; 0xe0
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	f000 faf1 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40013000 	.word	0x40013000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12b      	bne.n	8000b66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_UART_MspInit+0x8c>)
 8000b62:	f000 faa9 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2019      	movs	r0, #25
 8000b92:	f000 fa45 	bl	8001020 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b96:	2019      	movs	r0, #25
 8000b98:	f000 fa5e 	bl	8001058 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_InitTick+0xa0>)
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_InitTick+0xa0>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6453      	str	r3, [r2, #68]	; 0x44
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_InitTick+0xa0>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb8:	f107 0210 	add.w	r2, r7, #16
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f8a2 	bl	8001d0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bc8:	f001 f88c 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8000bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_InitTick+0xa4>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_InitTick+0xa8>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <HAL_InitTick+0xac>)
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_InitTick+0xa8>)
 8000be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_InitTick+0xa8>)
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_InitTick+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_InitTick+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_InitTick+0xa8>)
 8000bfe:	f001 ff7d 	bl	8002afc <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d104      	bne.n	8000c12 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_InitTick+0xa8>)
 8000c0a:	f001 ffd1 	bl	8002bb0 <HAL_TIM_Base_Start_IT>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3730      	adds	r7, #48	; 0x30
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	431bde83 	.word	0x431bde83
 8000c24:	20004a4c 	.word	0x20004a4c
 8000c28:	40010000 	.word	0x40010000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c5e:	f002 f809 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20004a4c 	.word	0x20004a4c

08000c6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
	}

return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd1f 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
	}
	return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f005 f840 	bl	8005dfc <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20018000 	.word	0x20018000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	20000094 	.word	0x20000094
 8000db0:	20004ae8 	.word	0x20004ae8

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e02:	f7ff ffd7 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f004 ffff 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fbb5 	bl	8000578 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e1c:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 8000e20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e24:	20004ae8 	.word	0x20004ae8

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f8d8 	bl	800100a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f7ff fe8e 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fdd0 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20004a94 	.word	0x20004a94

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20004a94 	.word	0x20004a94

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff4c 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001032:	f7ff ff61 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001036:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f7ff ffb1 	bl	8000fa4 <NVIC_EncodePriority>
 8001042:	4602      	mov	r2, r0
 8001044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff80 	bl	8000f50 <__NVIC_SetPriority>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff54 	bl	8000f14 <__NVIC_EnableIRQ>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d004      	beq.n	8001092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00c      	b.n	80010ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2205      	movs	r2, #5
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e159      	b.n	8001388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8148 	bne.w	8001382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80a2 	beq.w	8001382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a56      	ldr	r2, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x202>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_GPIO_Init+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1fe>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <HAL_GPIO_Init+0x2f8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1fa>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1f6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a45      	ldr	r2, [pc, #276]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1f2>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_GPIO_Init+0x304>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x304>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_GPIO_Init+0x304>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f aea2 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e264      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d075      	beq.n	800152e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001442:	4ba3      	ldr	r3, [pc, #652]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d00c      	beq.n	8001468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4ba0      	ldr	r3, [pc, #640]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	2b08      	cmp	r3, #8
 8001458:	d112      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b9d      	ldr	r3, [pc, #628]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001466:	d10b      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b99      	ldr	r3, [pc, #612]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d05b      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e23f      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b91      	ldr	r3, [pc, #580]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a90      	ldr	r2, [pc, #576]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a8a      	ldr	r2, [pc, #552]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a87      	ldr	r2, [pc, #540]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a83      	ldr	r2, [pc, #524]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a80      	ldr	r2, [pc, #512]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fcdc 	bl	8000e98 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fcd8 	bl	8000e98 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e204      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fcc8 	bl	8000e98 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fcc4 	bl	8000e98 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1f0      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c4      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4952      	ldr	r1, [pc, #328]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <HAL_RCC_OscConfig+0x2b0>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fc7d 	bl	8000e98 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc79 	bl	8000e98 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a5      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4940      	ldr	r1, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <HAL_RCC_OscConfig+0x2b0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc5c 	bl	8000e98 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc58 	bl	8000e98 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e184      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d030      	beq.n	8001670 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_RCC_OscConfig+0x2b4>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fc3c 	bl	8000e98 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fc38 	bl	8000e98 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e164      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
 8001642:	e015      	b.n	8001670 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x2b4>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fc25 	bl	8000e98 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fc21 	bl	8000e98 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e14d      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a0 	beq.w	80017be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x2b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d121      	bne.n	80016fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_RCC_OscConfig+0x2b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_RCC_OscConfig+0x2b8>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fbe7 	bl	8000e98 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	e011      	b.n	80016f2 <HAL_RCC_OscConfig+0x2ce>
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	42470000 	.word	0x42470000
 80016d8:	42470e80 	.word	0x42470e80
 80016dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7ff fbda 	bl	8000e98 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e106      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b85      	ldr	r3, [pc, #532]	; (8001908 <HAL_RCC_OscConfig+0x4e4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x2f0>
 8001706:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a80      	ldr	r2, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
 8001712:	e01c      	b.n	800174e <HAL_RCC_OscConfig+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x312>
 800171c:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a77      	ldr	r2, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x32a>
 8001736:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a74      	ldr	r2, [pc, #464]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d015      	beq.n	8001782 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff fb9f 	bl	8000e98 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fb9b 	bl	8000e98 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0c5      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ee      	beq.n	800175e <HAL_RCC_OscConfig+0x33a>
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fb89 	bl	8000e98 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff fb85 	bl	8000e98 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0af      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a55      	ldr	r2, [pc, #340]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 809b 	beq.w	80018fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d05c      	beq.n	800188e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d141      	bne.n	8001860 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x4ec>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb59 	bl	8000e98 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fb55 	bl	8000e98 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e081      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69da      	ldr	r2, [r3, #28]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	019b      	lsls	r3, r3, #6
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	061b      	lsls	r3, r3, #24
 800182c:	4937      	ldr	r1, [pc, #220]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_OscConfig+0x4ec>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fb2e 	bl	8000e98 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fb2a 	bl	8000e98 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e056      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x41c>
 800185e:	e04e      	b.n	80018fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x4ec>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fb17 	bl	8000e98 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff fb13 	bl	8000e98 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e03f      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x44a>
 800188c:	e037      	b.n	80018fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e032      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_RCC_OscConfig+0x4e8>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d028      	beq.n	80018fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d121      	bne.n	80018fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d11a      	bne.n	80018fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d111      	bne.n	80018fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	3b01      	subs	r3, #1
 80018e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40007000 	.word	0x40007000
 800190c:	40023800 	.word	0x40023800
 8001910:	42470060 	.word	0x42470060

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0cc      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d90c      	bls.n	8001950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	494d      	ldr	r1, [pc, #308]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d044      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d119      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e067      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa48 	bl	8000e98 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa44 	bl	8000e98 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e04f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20c      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4916      	ldr	r1, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f821 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490a      	ldr	r1, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f85e 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08006d8c 	.word	0x08006d8c
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	2300      	movs	r3, #0
 8001af2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af8:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d00d      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x40>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f200 80bd 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b12:	e0b7      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b16:	60bb      	str	r3, [r7, #8]
       break;
 8001b18:	e0b7      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b1c:	60bb      	str	r3, [r7, #8]
      break;
 8001b1e:	e0b4      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04d      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b46:	f04f 0100 	mov.w	r1, #0
 8001b4a:	ea02 0800 	and.w	r8, r2, r0
 8001b4e:	ea03 0901 	and.w	r9, r3, r1
 8001b52:	4640      	mov	r0, r8
 8001b54:	4649      	mov	r1, r9
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	014b      	lsls	r3, r1, #5
 8001b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b64:	0142      	lsls	r2, r0, #5
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b6e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	018b      	lsls	r3, r1, #6
 8001b7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b80:	0182      	lsls	r2, r0, #6
 8001b82:	1a12      	subs	r2, r2, r0
 8001b84:	eb63 0301 	sbc.w	r3, r3, r1
 8001b88:	f04f 0000 	mov.w	r0, #0
 8001b8c:	f04f 0100 	mov.w	r1, #0
 8001b90:	00d9      	lsls	r1, r3, #3
 8001b92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b96:	00d0      	lsls	r0, r2, #3
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	eb12 0208 	adds.w	r2, r2, r8
 8001ba0:	eb43 0309 	adc.w	r3, r3, r9
 8001ba4:	f04f 0000 	mov.w	r0, #0
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	0259      	lsls	r1, r3, #9
 8001bae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bb2:	0250      	lsls	r0, r2, #9
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	f7fe fb5c 	bl	8000280 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e04a      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	ea02 0400 	and.w	r4, r2, r0
 8001bea:	ea03 0501 	and.w	r5, r3, r1
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	014b      	lsls	r3, r1, #5
 8001bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c00:	0142      	lsls	r2, r0, #5
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	1b00      	subs	r0, r0, r4
 8001c08:	eb61 0105 	sbc.w	r1, r1, r5
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	018b      	lsls	r3, r1, #6
 8001c16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c1a:	0182      	lsls	r2, r0, #6
 8001c1c:	1a12      	subs	r2, r2, r0
 8001c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c22:	f04f 0000 	mov.w	r0, #0
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	00d9      	lsls	r1, r3, #3
 8001c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c30:	00d0      	lsls	r0, r2, #3
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	1912      	adds	r2, r2, r4
 8001c38:	eb45 0303 	adc.w	r3, r5, r3
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	0299      	lsls	r1, r3, #10
 8001c46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c4a:	0290      	lsls	r0, r2, #10
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f7fe fb10 	bl	8000280 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	60bb      	str	r3, [r7, #8]
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c86:	60bb      	str	r3, [r7, #8]
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08006d9c 	.word	0x08006d9c

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffdc 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08006d9c 	.word	0x08006d9c

08001d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	220f      	movs	r2, #15
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCC_GetClockConfig+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e07b      	b.n	8001e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d92:	d009      	beq.n	8001da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
 8001d9a:	e005      	b.n	8001da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fe4a 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2c:	ea42 0103 	orr.w	r1, r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f003 0104 	and.w	r1, r3, #4
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f003 0210 	and.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_SPI_Transmit+0x22>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e126      	b.n	80020f2 <HAL_SPI_Transmit+0x270>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eac:	f7fe fff4 	bl	8000e98 <HAL_GetTick>
 8001eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d002      	beq.n	8001ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec6:	e10b      	b.n	80020e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_SPI_Transmit+0x52>
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ed8:	e102      	b.n	80020e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	88fa      	ldrh	r2, [r7, #6]
 8001ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f20:	d10f      	bne.n	8001f42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d007      	beq.n	8001f60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f68:	d14b      	bne.n	8002002 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_SPI_Transmit+0xf6>
 8001f72:	8afb      	ldrh	r3, [r7, #22]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d13e      	bne.n	8001ff6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	1c9a      	adds	r2, r3, #2
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f9c:	e02b      	b.n	8001ff6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d112      	bne.n	8001fd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	1c9a      	adds	r2, r3, #2
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fd0:	e011      	b.n	8001ff6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd2:	f7fe ff61 	bl	8000e98 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d803      	bhi.n	8001fea <HAL_SPI_Transmit+0x168>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d102      	bne.n	8001ff0 <HAL_SPI_Transmit+0x16e>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ff4:	e074      	b.n	80020e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ce      	bne.n	8001f9e <HAL_SPI_Transmit+0x11c>
 8002000:	e04c      	b.n	800209c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_Transmit+0x18e>
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d140      	bne.n	8002092 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	330c      	adds	r3, #12
 800201a:	7812      	ldrb	r2, [r2, #0]
 800201c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002036:	e02c      	b.n	8002092 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d113      	bne.n	800206e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	330c      	adds	r3, #12
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	86da      	strh	r2, [r3, #54]	; 0x36
 800206c:	e011      	b.n	8002092 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800206e:	f7fe ff13 	bl	8000e98 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d803      	bhi.n	8002086 <HAL_SPI_Transmit+0x204>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d102      	bne.n	800208c <HAL_SPI_Transmit+0x20a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002090:	e026      	b.n	80020e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1cd      	bne.n	8002038 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fce9 	bl	8002a78 <SPI_EndRxTxTransaction>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	77fb      	strb	r3, [r7, #31]
 80020dc:	e000      	b.n	80020e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80020de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b088      	sub	sp, #32
 80020fe:	af02      	add	r7, sp, #8
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002116:	d112      	bne.n	800213e <HAL_SPI_Receive+0x44>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10e      	bne.n	800213e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2204      	movs	r2, #4
 8002124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f8f1 	bl	800231c <HAL_SPI_TransmitReceive>
 800213a:	4603      	mov	r3, r0
 800213c:	e0ea      	b.n	8002314 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_SPI_Receive+0x52>
 8002148:	2302      	movs	r3, #2
 800214a:	e0e3      	b.n	8002314 <HAL_SPI_Receive+0x21a>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002154:	f7fe fea0 	bl	8000e98 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d002      	beq.n	800216c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800216a:	e0ca      	b.n	8002302 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_SPI_Receive+0x7e>
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800217c:	e0c1      	b.n	8002302 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2204      	movs	r2, #4
 8002182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c4:	d10f      	bne.n	80021e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d007      	beq.n	8002204 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002202:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d162      	bne.n	80022d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800220c:	e02e      	b.n	800226c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d115      	bne.n	8002248 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f103 020c 	add.w	r2, r3, #12
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002246:	e011      	b.n	800226c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002248:	f7fe fe26 	bl	8000e98 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d803      	bhi.n	8002260 <HAL_SPI_Receive+0x166>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d102      	bne.n	8002266 <HAL_SPI_Receive+0x16c>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	75fb      	strb	r3, [r7, #23]
          goto error;
 800226a:	e04a      	b.n	8002302 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1cb      	bne.n	800220e <HAL_SPI_Receive+0x114>
 8002276:	e031      	b.n	80022dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d113      	bne.n	80022ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	b292      	uxth	r2, r2
 8002292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	1c9a      	adds	r2, r3, #2
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ac:	e011      	b.n	80022d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ae:	f7fe fdf3 	bl	8000e98 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d803      	bhi.n	80022c6 <HAL_SPI_Receive+0x1cc>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d102      	bne.n	80022cc <HAL_SPI_Receive+0x1d2>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022d0:	e017      	b.n	8002302 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1cd      	bne.n	8002278 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb63 	bl	80029ac <SPI_EndRxTransaction>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
 80022fe:	e000      	b.n	8002302 <HAL_SPI_Receive+0x208>
  }

error :
 8002300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800232a:	2301      	movs	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x26>
 800233e:	2302      	movs	r3, #2
 8002340:	e18a      	b.n	8002658 <HAL_SPI_TransmitReceive+0x33c>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800234a:	f7fe fda5 	bl	8000e98 <HAL_GetTick>
 800234e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002368:	2b01      	cmp	r3, #1
 800236a:	d00f      	beq.n	800238c <HAL_SPI_TransmitReceive+0x70>
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002372:	d107      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x68>
 800237c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002380:	2b04      	cmp	r3, #4
 8002382:	d003      	beq.n	800238c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800238a:	e15b      	b.n	8002644 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_SPI_TransmitReceive+0x82>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_TransmitReceive+0x82>
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023a4:	e14e      	b.n	8002644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d003      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2205      	movs	r2, #5
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	887a      	ldrh	r2, [r7, #2]
 80023e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d007      	beq.n	800240e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002416:	d178      	bne.n	800250a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x10a>
 8002420:	8b7b      	ldrh	r3, [r7, #26]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d166      	bne.n	80024f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800244a:	e053      	b.n	80024f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d11b      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x176>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x176>
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d113      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	1c9a      	adds	r2, r3, #2
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d119      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x1b8>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d014      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	b292      	uxth	r2, r2
 80024b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	1c9a      	adds	r2, r3, #2
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024d4:	f7fe fce0 	bl	8000e98 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d807      	bhi.n	80024f4 <HAL_SPI_TransmitReceive+0x1d8>
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d003      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024f2:	e0a7      	b.n	8002644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1a6      	bne.n	800244c <HAL_SPI_TransmitReceive+0x130>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1a1      	bne.n	800244c <HAL_SPI_TransmitReceive+0x130>
 8002508:	e07c      	b.n	8002604 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x1fc>
 8002512:	8b7b      	ldrh	r3, [r7, #26]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d16b      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253e:	e057      	b.n	80025f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d11c      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x26c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d017      	beq.n	8002588 <HAL_SPI_TransmitReceive+0x26c>
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d114      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d119      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x2ae>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c6:	2301      	movs	r3, #1
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025ca:	f7fe fc65 	bl	8000e98 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d803      	bhi.n	80025e2 <HAL_SPI_TransmitReceive+0x2c6>
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d102      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x2cc>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025ee:	e029      	b.n	8002644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1a2      	bne.n	8002540 <HAL_SPI_TransmitReceive+0x224>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d19d      	bne.n	8002540 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa35 	bl	8002a78 <SPI_EndRxTxTransaction>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002620:	e010      	b.n	8002644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e000      	b.n	8002644 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002658:	4618      	mov	r0, r3
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10f      	bne.n	80026a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
    return;
 80026a2:	e0d7      	b.n	8002854 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_SPI_IRQHandler+0x66>
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	09db      	lsrs	r3, r3, #7
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
    return;
 80026c4:	e0c6      	b.n	8002854 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_SPI_IRQHandler+0x8c>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80b4 	beq.w	8002854 <HAL_SPI_IRQHandler+0x1f4>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80ad 	beq.w	8002854 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d023      	beq.n	800274e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b03      	cmp	r3, #3
 8002710:	d011      	beq.n	8002736 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	e00b      	b.n	800274e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]
        return;
 800274c:	e082      	b.n	8002854 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f043 0208 	orr.w	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04f      	beq.n	8002852 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_SPI_IRQHandler+0x17e>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d034      	beq.n	8002848 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0203 	bic.w	r2, r2, #3
 80027ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_SPI_IRQHandler+0x1fc>)
 80027fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc36 	bl	8001074 <HAL_DMA_Abort_IT>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	4a0d      	ldr	r2, [pc, #52]	; (800285c <HAL_SPI_IRQHandler+0x1fc>)
 8002828:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fc20 	bl	8001074 <HAL_DMA_Abort_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002846:	e003      	b.n	8002850 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f809 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800284e:	e000      	b.n	8002852 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002850:	bf00      	nop
    return;
 8002852:	bf00      	nop
  }
}
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	08002875 	.word	0x08002875

08002860 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff ffe6 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028ac:	f7fe faf4 	bl	8000e98 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028bc:	f7fe faec 	bl	8000e98 <HAL_GetTick>
 80028c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	e054      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d050      	beq.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028dc:	f7fe fadc 	bl	8000e98 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d111      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d004      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291e:	d107      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d10f      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e017      	b.n	800299e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d19b      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000

080029ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c0:	d111      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ca:	d004      	beq.n	80029d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d107      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ee:	d12a      	bne.n	8002a46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d012      	beq.n	8002a20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff49 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02d      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e026      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2101      	movs	r1, #1
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff36 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e013      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2101      	movs	r1, #1
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff23 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <SPI_EndRxTxTransaction+0x7c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <SPI_EndRxTxTransaction+0x80>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0d5b      	lsrs	r3, r3, #21
 8002a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa2:	d112      	bne.n	8002aca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff fef4 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e00f      	b.n	8002aea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d0f2      	beq.n	8002aca <SPI_EndRxTxTransaction+0x52>
 8002ae4:	e000      	b.n	8002ae8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ae6:	bf00      	nop
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000
 8002af8:	165e9f81 	.word	0x165e9f81

08002afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e041      	b.n	8002b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f839 	bl	8002b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 f9ca 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d001      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e044      	b.n	8002c52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_TIM_Base_Start_IT+0xb0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d018      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x6c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d013      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x6c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_TIM_Base_Start_IT+0xb4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x6c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d009      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x6c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_TIM_Base_Start_IT+0xbc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x6c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d111      	bne.n	8002c40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d010      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e007      	b.n	8002c50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40014000 	.word	0x40014000

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8ee 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8e0 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8f1 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0204 	mvn.w	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8c4 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8b6 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f8c7 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0208 	mvn.w	r2, #8
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f89a 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f88c 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f89d 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0210 	mvn.w	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f870 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f862 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f873 	bl	8002eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fdee 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8e2 	bl	8002fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f838 	bl	8002ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0220 	mvn.w	r2, #32
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8ac 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <TIM_Base_SetConfig+0xe4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <TIM_Base_SetConfig+0xe8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a30      	ldr	r2, [pc, #192]	; (8002fc0 <TIM_Base_SetConfig+0xec>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <TIM_Base_SetConfig+0xf0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <TIM_Base_SetConfig+0xe4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d017      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <TIM_Base_SetConfig+0xe8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <TIM_Base_SetConfig+0xec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <TIM_Base_SetConfig+0xf0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <TIM_Base_SetConfig+0xf4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <TIM_Base_SetConfig+0xf8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <TIM_Base_SetConfig+0xfc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <TIM_Base_SetConfig+0xe4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400
 8002fd0:	40014800 	.word	0x40014800

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e03f      	b.n	800308e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fd62 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f829 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309c:	b09f      	sub	sp, #124	; 0x7c
 800309e:	af00      	add	r7, sp, #0
 80030a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	68d9      	ldr	r1, [r3, #12]
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	ea40 0301 	orr.w	r3, r0, r1
 80030b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030dc:	f021 010c 	bic.w	r1, r1, #12
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e6:	430b      	orrs	r3, r1
 80030e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	6999      	ldr	r1, [r3, #24]
 80030f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	ea40 0301 	orr.w	r3, r0, r1
 8003100:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4bc5      	ldr	r3, [pc, #788]	; (800341c <UART_SetConfig+0x384>)
 8003108:	429a      	cmp	r2, r3
 800310a:	d004      	beq.n	8003116 <UART_SetConfig+0x7e>
 800310c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4bc3      	ldr	r3, [pc, #780]	; (8003420 <UART_SetConfig+0x388>)
 8003112:	429a      	cmp	r2, r3
 8003114:	d103      	bne.n	800311e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003116:	f7fe fde5 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 800311a:	6778      	str	r0, [r7, #116]	; 0x74
 800311c:	e002      	b.n	8003124 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800311e:	f7fe fdcd 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8003122:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	f040 80b6 	bne.w	800329c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003132:	461c      	mov	r4, r3
 8003134:	f04f 0500 	mov.w	r5, #0
 8003138:	4622      	mov	r2, r4
 800313a:	462b      	mov	r3, r5
 800313c:	1891      	adds	r1, r2, r2
 800313e:	6439      	str	r1, [r7, #64]	; 0x40
 8003140:	415b      	adcs	r3, r3
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
 8003144:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003148:	1912      	adds	r2, r2, r4
 800314a:	eb45 0303 	adc.w	r3, r5, r3
 800314e:	f04f 0000 	mov.w	r0, #0
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	00d9      	lsls	r1, r3, #3
 8003158:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800315c:	00d0      	lsls	r0, r2, #3
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	1911      	adds	r1, r2, r4
 8003164:	6639      	str	r1, [r7, #96]	; 0x60
 8003166:	416b      	adcs	r3, r5
 8003168:	667b      	str	r3, [r7, #100]	; 0x64
 800316a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	461a      	mov	r2, r3
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	1891      	adds	r1, r2, r2
 8003176:	63b9      	str	r1, [r7, #56]	; 0x38
 8003178:	415b      	adcs	r3, r3
 800317a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003180:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003184:	f7fd f87c 	bl	8000280 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4ba5      	ldr	r3, [pc, #660]	; (8003424 <UART_SetConfig+0x38c>)
 800318e:	fba3 2302 	umull	r2, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	011e      	lsls	r6, r3, #4
 8003196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003198:	461c      	mov	r4, r3
 800319a:	f04f 0500 	mov.w	r5, #0
 800319e:	4622      	mov	r2, r4
 80031a0:	462b      	mov	r3, r5
 80031a2:	1891      	adds	r1, r2, r2
 80031a4:	6339      	str	r1, [r7, #48]	; 0x30
 80031a6:	415b      	adcs	r3, r3
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
 80031aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031ae:	1912      	adds	r2, r2, r4
 80031b0:	eb45 0303 	adc.w	r3, r5, r3
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	00d9      	lsls	r1, r3, #3
 80031be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c2:	00d0      	lsls	r0, r2, #3
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	1911      	adds	r1, r2, r4
 80031ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80031cc:	416b      	adcs	r3, r5
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80031de:	415b      	adcs	r3, r3
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031ea:	f7fd f849 	bl	8000280 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <UART_SetConfig+0x38c>)
 80031f4:	fba3 1302 	umull	r1, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	2164      	movs	r1, #100	; 0x64
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	3332      	adds	r3, #50	; 0x32
 8003206:	4a87      	ldr	r2, [pc, #540]	; (8003424 <UART_SetConfig+0x38c>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003214:	441e      	add	r6, r3
 8003216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003218:	4618      	mov	r0, r3
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	1894      	adds	r4, r2, r2
 8003224:	623c      	str	r4, [r7, #32]
 8003226:	415b      	adcs	r3, r3
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800322e:	1812      	adds	r2, r2, r0
 8003230:	eb41 0303 	adc.w	r3, r1, r3
 8003234:	f04f 0400 	mov.w	r4, #0
 8003238:	f04f 0500 	mov.w	r5, #0
 800323c:	00dd      	lsls	r5, r3, #3
 800323e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003242:	00d4      	lsls	r4, r2, #3
 8003244:	4622      	mov	r2, r4
 8003246:	462b      	mov	r3, r5
 8003248:	1814      	adds	r4, r2, r0
 800324a:	653c      	str	r4, [r7, #80]	; 0x50
 800324c:	414b      	adcs	r3, r1
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
 8003250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	1891      	adds	r1, r2, r2
 800325c:	61b9      	str	r1, [r7, #24]
 800325e:	415b      	adcs	r3, r3
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003266:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800326a:	f7fd f809 	bl	8000280 <__aeabi_uldivmod>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <UART_SetConfig+0x38c>)
 8003274:	fba3 1302 	umull	r1, r3, r3, r2
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	2164      	movs	r1, #100	; 0x64
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3332      	adds	r3, #50	; 0x32
 8003286:	4a67      	ldr	r2, [pc, #412]	; (8003424 <UART_SetConfig+0x38c>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	f003 0207 	and.w	r2, r3, #7
 8003292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4432      	add	r2, r6
 8003298:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800329a:	e0b9      	b.n	8003410 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800329c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329e:	461c      	mov	r4, r3
 80032a0:	f04f 0500 	mov.w	r5, #0
 80032a4:	4622      	mov	r2, r4
 80032a6:	462b      	mov	r3, r5
 80032a8:	1891      	adds	r1, r2, r2
 80032aa:	6139      	str	r1, [r7, #16]
 80032ac:	415b      	adcs	r3, r3
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032b4:	1912      	adds	r2, r2, r4
 80032b6:	eb45 0303 	adc.w	r3, r5, r3
 80032ba:	f04f 0000 	mov.w	r0, #0
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	00d9      	lsls	r1, r3, #3
 80032c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c8:	00d0      	lsls	r0, r2, #3
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	eb12 0804 	adds.w	r8, r2, r4
 80032d2:	eb43 0905 	adc.w	r9, r3, r5
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	008b      	lsls	r3, r1, #2
 80032ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032ee:	0082      	lsls	r2, r0, #2
 80032f0:	4640      	mov	r0, r8
 80032f2:	4649      	mov	r1, r9
 80032f4:	f7fc ffc4 	bl	8000280 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b49      	ldr	r3, [pc, #292]	; (8003424 <UART_SetConfig+0x38c>)
 80032fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	011e      	lsls	r6, r3, #4
 8003306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003308:	4618      	mov	r0, r3
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	1894      	adds	r4, r2, r2
 8003314:	60bc      	str	r4, [r7, #8]
 8003316:	415b      	adcs	r3, r3
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331e:	1812      	adds	r2, r2, r0
 8003320:	eb41 0303 	adc.w	r3, r1, r3
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	f04f 0500 	mov.w	r5, #0
 800332c:	00dd      	lsls	r5, r3, #3
 800332e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003332:	00d4      	lsls	r4, r2, #3
 8003334:	4622      	mov	r2, r4
 8003336:	462b      	mov	r3, r5
 8003338:	1814      	adds	r4, r2, r0
 800333a:	64bc      	str	r4, [r7, #72]	; 0x48
 800333c:	414b      	adcs	r3, r1
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	008b      	lsls	r3, r1, #2
 8003354:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003358:	0082      	lsls	r2, r0, #2
 800335a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800335e:	f7fc ff8f 	bl	8000280 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <UART_SetConfig+0x38c>)
 8003368:	fba3 1302 	umull	r1, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	2164      	movs	r1, #100	; 0x64
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	3332      	adds	r3, #50	; 0x32
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <UART_SetConfig+0x38c>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003386:	441e      	add	r6, r3
 8003388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338a:	4618      	mov	r0, r3
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	1894      	adds	r4, r2, r2
 8003396:	603c      	str	r4, [r7, #0]
 8003398:	415b      	adcs	r3, r3
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a0:	1812      	adds	r2, r2, r0
 80033a2:	eb41 0303 	adc.w	r3, r1, r3
 80033a6:	f04f 0400 	mov.w	r4, #0
 80033aa:	f04f 0500 	mov.w	r5, #0
 80033ae:	00dd      	lsls	r5, r3, #3
 80033b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033b4:	00d4      	lsls	r4, r2, #3
 80033b6:	4622      	mov	r2, r4
 80033b8:	462b      	mov	r3, r5
 80033ba:	eb12 0a00 	adds.w	sl, r2, r0
 80033be:	eb43 0b01 	adc.w	fp, r3, r1
 80033c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	008b      	lsls	r3, r1, #2
 80033d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033da:	0082      	lsls	r2, r0, #2
 80033dc:	4650      	mov	r0, sl
 80033de:	4659      	mov	r1, fp
 80033e0:	f7fc ff4e 	bl	8000280 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <UART_SetConfig+0x38c>)
 80033ea:	fba3 1302 	umull	r1, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2164      	movs	r1, #100	; 0x64
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	3332      	adds	r3, #50	; 0x32
 80033fc:	4a09      	ldr	r2, [pc, #36]	; (8003424 <UART_SetConfig+0x38c>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	f003 020f 	and.w	r2, r3, #15
 8003408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4432      	add	r2, r6
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	377c      	adds	r7, #124	; 0x7c
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40011000 	.word	0x40011000
 8003420:	40011400 	.word	0x40011400
 8003424:	51eb851f 	.word	0x51eb851f

08003428 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Handler+0x1c>)
 800342e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003430:	f001 fc7a 	bl	8004d28 <xTaskGetSchedulerState>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800343a:	f002 fa65 	bl	8005908 <xPortSysTickHandler>
  }
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a07      	ldr	r2, [pc, #28]	; (8003474 <vApplicationGetIdleTaskMemory+0x2c>)
 8003458:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4a06      	ldr	r2, [pc, #24]	; (8003478 <vApplicationGetIdleTaskMemory+0x30>)
 800345e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000098 	.word	0x20000098
 8003478:	200000f4 	.word	0x200000f4

0800347c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800348c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4a06      	ldr	r2, [pc, #24]	; (80034ac <vApplicationGetTimerTaskMemory+0x30>)
 8003492:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	200002f4 	.word	0x200002f4
 80034ac:	20000350 	.word	0x20000350

080034b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0208 	add.w	r2, r3, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f103 0208 	add.w	r2, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f103 0208 	add.w	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d103      	bne.n	8003572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e00c      	b.n	800358c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3308      	adds	r3, #8
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e002      	b.n	8003580 <vListInsert+0x2e>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	d2f6      	bcs.n	800357a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6852      	ldr	r2, [r2, #4]
 80035e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d103      	bne.n	80035f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003642:	f002 f8cf 	bl	80057e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	441a      	add	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	3b01      	subs	r3, #1
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	441a      	add	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	22ff      	movs	r2, #255	; 0xff
 8003686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01a      	beq.n	80036d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3310      	adds	r3, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f981 	bl	80049ac <xTaskRemoveFromEventList>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d012      	beq.n	80036d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <xQueueGenericReset+0xcc>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	e009      	b.n	80036d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3310      	adds	r3, #16
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fef2 	bl	80034b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3324      	adds	r3, #36	; 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff feed 	bl	80034b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036d6:	f002 f8b5 	bl	8005844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <xQueueGenericCreateStatic+0x52>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <xQueueGenericCreateStatic+0x56>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <xQueueGenericCreateStatic+0x58>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	623b      	str	r3, [r7, #32]
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <xQueueGenericCreateStatic+0x7e>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <xQueueGenericCreateStatic+0x82>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <xQueueGenericCreateStatic+0x84>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	61fb      	str	r3, [r7, #28]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003786:	2350      	movs	r3, #80	; 0x50
 8003788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b50      	cmp	r3, #80	; 0x50
 800378e:	d00a      	beq.n	80037a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61bb      	str	r3, [r7, #24]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f805 	bl	80037d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3730      	adds	r7, #48	; 0x30
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e002      	b.n	80037fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003806:	2101      	movs	r1, #1
 8003808:	69b8      	ldr	r0, [r7, #24]
 800380a:	f7ff ff05 	bl	8003618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08e      	sub	sp, #56	; 0x38
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericSend+0x32>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <xQueueGenericSend+0x40>
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xQueueGenericSend+0x44>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <xQueueGenericSend+0x46>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xQueueGenericSend+0x60>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d103      	bne.n	800388e <xQueueGenericSend+0x6e>
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <xQueueGenericSend+0x72>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueGenericSend+0x74>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueGenericSend+0x8e>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	623b      	str	r3, [r7, #32]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ae:	f001 fa3b 	bl	8004d28 <xTaskGetSchedulerState>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xQueueGenericSend+0x9e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericSend+0xa2>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericSend+0xa4>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xQueueGenericSend+0xbe>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fb      	str	r3, [r7, #28]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038de:	f001 ff81 	bl	80057e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <xQueueGenericSend+0xd4>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d129      	bne.n	8003948 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fa:	f000 fa0b 	bl	8003d14 <prvCopyDataToQueue>
 80038fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f84d 	bl	80049ac <xTaskRemoveFromEventList>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <xQueueGenericSend+0x1f8>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	e00a      	b.n	8003940 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <xQueueGenericSend+0x1f8>)
 8003932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003940:	f001 ff80 	bl	8005844 <vPortExitCritical>
				return pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	e063      	b.n	8003a10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800394e:	f001 ff79 	bl	8005844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003952:	2300      	movs	r3, #0
 8003954:	e05c      	b.n	8003a10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f887 	bl	8004a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800396a:	f001 ff6b 	bl	8005844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800396e:	f000 fdf9 	bl	8004564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003972:	f001 ff37 	bl	80057e4 <vPortEnterCritical>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397c:	b25b      	sxtb	r3, r3
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d103      	bne.n	800398c <xQueueGenericSend+0x16c>
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003992:	b25b      	sxtb	r3, r3
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x182>
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a2:	f001 ff4f 	bl	8005844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039a6:	1d3a      	adds	r2, r7, #4
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f876 	bl	8004aa0 <xTaskCheckForTimeOut>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d124      	bne.n	8003a04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039bc:	f000 faa2 	bl	8003f04 <prvIsQueueFull>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d018      	beq.n	80039f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	3310      	adds	r3, #16
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 ff9c 	bl	800490c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039d6:	f000 fa2d 	bl	8003e34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039da:	f000 fdd1 	bl	8004580 <xTaskResumeAll>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f af7c 	bne.w	80038de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <xQueueGenericSend+0x1f8>)
 80039e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	e772      	b.n	80038de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039fa:	f000 fa1b 	bl	8003e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039fe:	f000 fdbf 	bl	8004580 <xTaskResumeAll>
 8003a02:	e76c      	b.n	80038de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a06:	f000 fa15 	bl	8003e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a0a:	f000 fdb9 	bl	8004580 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3738      	adds	r7, #56	; 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b090      	sub	sp, #64	; 0x40
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <xQueueGenericSendFromISR+0x3c>
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <xQueueGenericSendFromISR+0x40>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <xQueueGenericSendFromISR+0x42>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <xQueueGenericSendFromISR+0x6a>
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <xQueueGenericSendFromISR+0x6e>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xQueueGenericSendFromISR+0x70>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	623b      	str	r3, [r7, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aa6:	f001 ff7f 	bl	80059a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	61fa      	str	r2, [r7, #28]
 8003ac0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <xQueueGenericSendFromISR+0xbc>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d12f      	bne.n	8003b38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aee:	f000 f911 	bl	8003d14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003af2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d112      	bne.n	8003b22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 ff4f 	bl	80049ac <xTaskRemoveFromEventList>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e007      	b.n	8003b32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b26:	3301      	adds	r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	b25a      	sxtb	r2, r3
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b32:	2301      	movs	r3, #1
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b36:	e001      	b.n	8003b3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3740      	adds	r7, #64	; 0x40
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <xQueueReceive+0x30>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	623b      	str	r3, [r7, #32]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <xQueueReceive+0x3e>
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <xQueueReceive+0x42>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <xQueueReceive+0x44>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <xQueueReceive+0x5e>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	61fb      	str	r3, [r7, #28]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb2:	f001 f8b9 	bl	8004d28 <xTaskGetSchedulerState>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <xQueueReceive+0x6e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <xQueueReceive+0x72>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <xQueueReceive+0x74>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xQueueReceive+0x8e>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	61bb      	str	r3, [r7, #24]
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003be2:	f001 fdff 	bl	80057e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01f      	beq.n	8003c32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf6:	f000 f8f7 	bl	8003de8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00f      	beq.n	8003c2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fecc 	bl	80049ac <xTaskRemoveFromEventList>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <xQueueReceive+0x1bc>)
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c2a:	f001 fe0b 	bl	8005844 <vPortExitCritical>
				return pdPASS;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e069      	b.n	8003d06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c38:	f001 fe04 	bl	8005844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e062      	b.n	8003d06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c46:	f107 0310 	add.w	r3, r7, #16
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 ff12 	bl	8004a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c54:	f001 fdf6 	bl	8005844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c58:	f000 fc84 	bl	8004564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c5c:	f001 fdc2 	bl	80057e4 <vPortEnterCritical>
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0x122>
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0x138>
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8c:	f001 fdda 	bl	8005844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c90:	1d3a      	adds	r2, r7, #4
 8003c92:	f107 0310 	add.w	r3, r7, #16
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 ff01 	bl	8004aa0 <xTaskCheckForTimeOut>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d123      	bne.n	8003cec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca6:	f000 f917 	bl	8003ed8 <prvIsQueueEmpty>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fe27 	bl	800490c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc0:	f000 f8b8 	bl	8003e34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cc4:	f000 fc5c 	bl	8004580 <xTaskResumeAll>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d189      	bne.n	8003be2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <xQueueReceive+0x1bc>)
 8003cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	e780      	b.n	8003be2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce2:	f000 f8a7 	bl	8003e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ce6:	f000 fc4b 	bl	8004580 <xTaskResumeAll>
 8003cea:	e77a      	b.n	8003be2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cee:	f000 f8a1 	bl	8003e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cf2:	f000 fc45 	bl	8004580 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf8:	f000 f8ee 	bl	8003ed8 <prvIsQueueEmpty>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f43f af6f 	beq.w	8003be2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3730      	adds	r7, #48	; 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d14d      	bne.n	8003dd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 f810 	bl	8004d64 <xTaskPriorityDisinherit>
 8003d44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	e043      	b.n	8003dd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d119      	bne.n	8003d88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6858      	ldr	r0, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	f002 f876 	bl	8005e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	441a      	add	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d32b      	bcc.n	8003dd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e026      	b.n	8003dd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68d8      	ldr	r0, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	461a      	mov	r2, r3
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	f002 f85c 	bl	8005e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	425b      	negs	r3, r3
 8003da2:	441a      	add	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d207      	bcs.n	8003dc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	441a      	add	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d105      	bne.n	8003dd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dde:	697b      	ldr	r3, [r7, #20]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	441a      	add	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d303      	bcc.n	8003e1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68d9      	ldr	r1, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	6838      	ldr	r0, [r7, #0]
 8003e28:	f002 f812 	bl	8005e50 <memcpy>
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e3c:	f001 fcd2 	bl	80057e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e48:	e011      	b.n	8003e6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fda8 	bl	80049ac <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e62:	f000 fe7f 	bl	8004b64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dce9      	bgt.n	8003e4a <prvUnlockQueue+0x16>
 8003e76:	e000      	b.n	8003e7a <prvUnlockQueue+0x46>
					break;
 8003e78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	22ff      	movs	r2, #255	; 0xff
 8003e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e82:	f001 fcdf 	bl	8005844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e86:	f001 fcad 	bl	80057e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e92:	e011      	b.n	8003eb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fd83 	bl	80049ac <xTaskRemoveFromEventList>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003eac:	f000 fe5a 	bl	8004b64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dce9      	bgt.n	8003e94 <prvUnlockQueue+0x60>
 8003ec0:	e000      	b.n	8003ec4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ec2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ecc:	f001 fcba 	bl	8005844 <vPortExitCritical>
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ee0:	f001 fc80 	bl	80057e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e001      	b.n	8003ef6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f001 fca5 	bl	8005844 <vPortExitCritical>

	return xReturn;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f0c:	f001 fc6a 	bl	80057e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d102      	bne.n	8003f22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e001      	b.n	8003f26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f26:	f001 fc8d 	bl	8005844 <vPortExitCritical>

	return xReturn;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e014      	b.n	8003f6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <vQueueAddToRegistry+0x50>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f50:	490c      	ldr	r1, [pc, #48]	; (8003f84 <vQueueAddToRegistry+0x50>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <vQueueAddToRegistry+0x50>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f66:	e006      	b.n	8003f76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b07      	cmp	r3, #7
 8003f72:	d9e7      	bls.n	8003f44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20004a98 	.word	0x20004a98

08003f88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f98:	f001 fc24 	bl	80057e4 <vPortEnterCritical>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d103      	bne.n	8003fb2 <vQueueWaitForMessageRestricted+0x2a>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d103      	bne.n	8003fc8 <vQueueWaitForMessageRestricted+0x40>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc8:	f001 fc3c 	bl	8005844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3324      	adds	r3, #36	; 0x24
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fcb9 	bl	8004954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff ff26 	bl	8003e34 <prvUnlockQueue>
	}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	623b      	str	r3, [r7, #32]
}
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xTaskCreateStatic+0x46>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61fb      	str	r3, [r7, #28]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004036:	235c      	movs	r3, #92	; 0x5c
 8004038:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b5c      	cmp	r3, #92	; 0x5c
 800403e:	d00a      	beq.n	8004056 <xTaskCreateStatic+0x66>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61bb      	str	r3, [r7, #24]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004056:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01e      	beq.n	800409c <xTaskCreateStatic+0xac>
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01b      	beq.n	800409c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800406c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2202      	movs	r2, #2
 8004072:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004076:	2300      	movs	r3, #0
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f850 	bl	8004134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004096:	f000 f8dd 	bl	8004254 <prvAddNewTaskToReadyList>
 800409a:	e001      	b.n	80040a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040a0:	697b      	ldr	r3, [r7, #20]
	}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b08c      	sub	sp, #48	; 0x30
 80040ae:	af04      	add	r7, sp, #16
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fcb2 	bl	8005a28 <pvPortMalloc>
 80040c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040cc:	205c      	movs	r0, #92	; 0x5c
 80040ce:	f001 fcab 	bl	8005a28 <pvPortMalloc>
 80040d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
 80040e0:	e005      	b.n	80040ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040e2:	6978      	ldr	r0, [r7, #20]
 80040e4:	f001 fd6c 	bl	8005bc0 <vPortFree>
 80040e8:	e001      	b.n	80040ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d017      	beq.n	8004124 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	2300      	movs	r3, #0
 8004100:	9303      	str	r3, [sp, #12]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f80e 	bl	8004134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004118:	69f8      	ldr	r0, [r7, #28]
 800411a:	f000 f89b 	bl	8004254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800411e:	2301      	movs	r3, #1
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	e002      	b.n	800412a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800412a:	69bb      	ldr	r3, [r7, #24]
	}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	461a      	mov	r2, r3
 800414c:	21a5      	movs	r1, #165	; 0xa5
 800414e:	f001 fe8d 	bl	8005e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800415c:	3b01      	subs	r3, #1
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f023 0307 	bic.w	r3, r3, #7
 800416a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	617b      	str	r3, [r7, #20]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01f      	beq.n	80041d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e012      	b.n	80041be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	7819      	ldrb	r1, [r3, #0]
 80041a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	3334      	adds	r3, #52	; 0x34
 80041a8:	460a      	mov	r2, r1
 80041aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	d9e9      	bls.n	8004198 <prvInitialiseNewTask+0x64>
 80041c4:	e000      	b.n	80041c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80041c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d0:	e003      	b.n	80041da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	2b37      	cmp	r3, #55	; 0x37
 80041de:	d901      	bls.n	80041e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041e0:	2337      	movs	r3, #55	; 0x37
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	2200      	movs	r2, #0
 80041f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f978 	bl	80034f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	3318      	adds	r3, #24
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff f973 	bl	80034f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	2200      	movs	r2, #0
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	69b8      	ldr	r0, [r7, #24]
 8004234:	f001 f9a6 	bl	8005584 <pxPortInitialiseStack>
 8004238:	4602      	mov	r2, r0
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800424a:	bf00      	nop
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800425c:	f001 fac2 	bl	80057e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <prvAddNewTaskToReadyList+0xc4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <prvAddNewTaskToReadyList+0xc4>)
 8004268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800426a:	4b2c      	ldr	r3, [pc, #176]	; (800431c <prvAddNewTaskToReadyList+0xc8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004272:	4a2a      	ldr	r2, [pc, #168]	; (800431c <prvAddNewTaskToReadyList+0xc8>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004278:	4b27      	ldr	r3, [pc, #156]	; (8004318 <prvAddNewTaskToReadyList+0xc4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d110      	bne.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004280:	f000 fc94 	bl	8004bac <prvInitialiseTaskLists>
 8004284:	e00d      	b.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004286:	4b26      	ldr	r3, [pc, #152]	; (8004320 <prvAddNewTaskToReadyList+0xcc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800428e:	4b23      	ldr	r3, [pc, #140]	; (800431c <prvAddNewTaskToReadyList+0xc8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d802      	bhi.n	80042a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <prvAddNewTaskToReadyList+0xc8>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <prvAddNewTaskToReadyList+0xd0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <prvAddNewTaskToReadyList+0xd0>)
 80042aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <prvAddNewTaskToReadyList+0xd0>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <prvAddNewTaskToReadyList+0xd4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d903      	bls.n	80042c8 <prvAddNewTaskToReadyList+0x74>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4a18      	ldr	r2, [pc, #96]	; (8004328 <prvAddNewTaskToReadyList+0xd4>)
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <prvAddNewTaskToReadyList+0xd8>)
 80042d6:	441a      	add	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f7ff f913 	bl	800350a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042e4:	f001 faae 	bl	8005844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <prvAddNewTaskToReadyList+0xcc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00e      	beq.n	800430e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <prvAddNewTaskToReadyList+0xc8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d207      	bcs.n	800430e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <prvAddNewTaskToReadyList+0xdc>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000c24 	.word	0x20000c24
 800431c:	20000750 	.word	0x20000750
 8004320:	20000c30 	.word	0x20000c30
 8004324:	20000c40 	.word	0x20000c40
 8004328:	20000c2c 	.word	0x20000c2c
 800432c:	20000754 	.word	0x20000754
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	617b      	str	r3, [r7, #20]
}
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <vTaskDelayUntil+0x46>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	613b      	str	r3, [r7, #16]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800437a:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <vTaskDelayUntil+0xf0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <vTaskDelayUntil+0x64>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60fb      	str	r3, [r7, #12]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004398:	f000 f8e4 	bl	8004564 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <vTaskDelayUntil+0xf4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4413      	add	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d20b      	bcs.n	80043ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d211      	bcs.n	80043e4 <vTaskDelayUntil+0xb0>
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d90d      	bls.n	80043e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e00a      	b.n	80043e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d303      	bcc.n	80043e0 <vTaskDelayUntil+0xac>
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d901      	bls.n	80043e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd21 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80043fe:	f000 f8bf 	bl	8004580 <xTaskResumeAll>
 8004402:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <vTaskDelayUntil+0xf8>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800441a:	bf00      	nop
 800441c:	3728      	adds	r7, #40	; 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000c4c 	.word	0x20000c4c
 8004428:	20000c28 	.word	0x20000c28
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <vTaskDelay+0x60>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <vTaskDelay+0x30>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004460:	f000 f880 	bl	8004564 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004464:	2100      	movs	r1, #0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fcea 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800446c:	f000 f888 	bl	8004580 <xTaskResumeAll>
 8004470:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <vTaskDelay+0x64>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000c4c 	.word	0x20000c4c
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044a6:	463a      	mov	r2, r7
 80044a8:	1d39      	adds	r1, r7, #4
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe ffca 	bl	8003448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	9202      	str	r2, [sp, #8]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	460a      	mov	r2, r1
 80044c6:	4921      	ldr	r1, [pc, #132]	; (800454c <vTaskStartScheduler+0xb4>)
 80044c8:	4821      	ldr	r0, [pc, #132]	; (8004550 <vTaskStartScheduler+0xb8>)
 80044ca:	f7ff fd91 	bl	8003ff0 <xTaskCreateStatic>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <vTaskStartScheduler+0xbc>)
 80044d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <vTaskStartScheduler+0xbc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044dc:	2301      	movs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e001      	b.n	80044e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d102      	bne.n	80044f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044ec:	f000 fcfc 	bl	8004ee8 <xTimerCreateTimerTask>
 80044f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d116      	bne.n	8004526 <vTaskStartScheduler+0x8e>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	613b      	str	r3, [r7, #16]
}
 800450a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800450c:	4b12      	ldr	r3, [pc, #72]	; (8004558 <vTaskStartScheduler+0xc0>)
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <vTaskStartScheduler+0xc4>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <vTaskStartScheduler+0xc8>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004520:	f001 f8be 	bl	80056a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004524:	e00e      	b.n	8004544 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d10a      	bne.n	8004544 <vTaskStartScheduler+0xac>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	60fb      	str	r3, [r7, #12]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <vTaskStartScheduler+0xaa>
}
 8004544:	bf00      	nop
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	08006d74 	.word	0x08006d74
 8004550:	08004b7d 	.word	0x08004b7d
 8004554:	20000c48 	.word	0x20000c48
 8004558:	20000c44 	.word	0x20000c44
 800455c:	20000c30 	.word	0x20000c30
 8004560:	20000c28 	.word	0x20000c28

08004564 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <vTaskSuspendAll+0x18>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a03      	ldr	r2, [pc, #12]	; (800457c <vTaskSuspendAll+0x18>)
 8004570:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000c4c 	.word	0x20000c4c

08004580 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800458e:	4b42      	ldr	r3, [pc, #264]	; (8004698 <xTaskResumeAll+0x118>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <xTaskResumeAll+0x2c>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	603b      	str	r3, [r7, #0]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ac:	f001 f91a 	bl	80057e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045b0:	4b39      	ldr	r3, [pc, #228]	; (8004698 <xTaskResumeAll+0x118>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4a38      	ldr	r2, [pc, #224]	; (8004698 <xTaskResumeAll+0x118>)
 80045b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <xTaskResumeAll+0x118>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d162      	bne.n	8004688 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <xTaskResumeAll+0x11c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d05e      	beq.n	8004688 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ca:	e02f      	b.n	800462c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045cc:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <xTaskResumeAll+0x120>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3318      	adds	r3, #24
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fff3 	bl	80035c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe ffee 	bl	80035c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <xTaskResumeAll+0x124>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d903      	bls.n	80045fc <xTaskResumeAll+0x7c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <xTaskResumeAll+0x124>)
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <xTaskResumeAll+0x128>)
 800460a:	441a      	add	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7fe ff79 	bl	800350a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4b23      	ldr	r3, [pc, #140]	; (80046ac <xTaskResumeAll+0x12c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <xTaskResumeAll+0x130>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <xTaskResumeAll+0x120>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1cb      	bne.n	80045cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800463a:	f000 fb55 	bl	8004ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <xTaskResumeAll+0x134>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800464a:	f000 f847 	bl	80046dc <xTaskIncrementTick>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004654:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <xTaskResumeAll+0x130>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3b01      	subs	r3, #1
 800465e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f1      	bne.n	800464a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <xTaskResumeAll+0x134>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <xTaskResumeAll+0x130>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <xTaskResumeAll+0x138>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004688:	f001 f8dc 	bl	8005844 <vPortExitCritical>

	return xAlreadyYielded;
 800468c:	68bb      	ldr	r3, [r7, #8]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000c4c 	.word	0x20000c4c
 800469c:	20000c24 	.word	0x20000c24
 80046a0:	20000be4 	.word	0x20000be4
 80046a4:	20000c2c 	.word	0x20000c2c
 80046a8:	20000754 	.word	0x20000754
 80046ac:	20000750 	.word	0x20000750
 80046b0:	20000c38 	.word	0x20000c38
 80046b4:	20000c34 	.word	0x20000c34
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <xTaskGetTickCount+0x1c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046c8:	687b      	ldr	r3, [r7, #4]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000c28 	.word	0x20000c28

080046dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e6:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <xTaskIncrementTick+0x148>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 808f 	bne.w	800480e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046f0:	4b4d      	ldr	r3, [pc, #308]	; (8004828 <xTaskIncrementTick+0x14c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f8:	4a4b      	ldr	r2, [pc, #300]	; (8004828 <xTaskIncrementTick+0x14c>)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d120      	bne.n	8004746 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004704:	4b49      	ldr	r3, [pc, #292]	; (800482c <xTaskIncrementTick+0x150>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <xTaskIncrementTick+0x48>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	603b      	str	r3, [r7, #0]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xTaskIncrementTick+0x46>
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <xTaskIncrementTick+0x150>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <xTaskIncrementTick+0x154>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3f      	ldr	r2, [pc, #252]	; (800482c <xTaskIncrementTick+0x150>)
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4a3f      	ldr	r2, [pc, #252]	; (8004830 <xTaskIncrementTick+0x154>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b3e      	ldr	r3, [pc, #248]	; (8004834 <xTaskIncrementTick+0x158>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a3d      	ldr	r2, [pc, #244]	; (8004834 <xTaskIncrementTick+0x158>)
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	f000 fad1 	bl	8004ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004746:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <xTaskIncrementTick+0x15c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d349      	bcc.n	80047e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <xTaskIncrementTick+0x150>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800475a:	4b37      	ldr	r3, [pc, #220]	; (8004838 <xTaskIncrementTick+0x15c>)
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	601a      	str	r2, [r3, #0]
					break;
 8004762:	e03f      	b.n	80047e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004764:	4b31      	ldr	r3, [pc, #196]	; (800482c <xTaskIncrementTick+0x150>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	429a      	cmp	r2, r3
 800477a:	d203      	bcs.n	8004784 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800477c:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <xTaskIncrementTick+0x15c>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004782:	e02f      	b.n	80047e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe ff1b 	bl	80035c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3318      	adds	r3, #24
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe ff12 	bl	80035c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <xTaskIncrementTick+0x160>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d903      	bls.n	80047b4 <xTaskIncrementTick+0xd8>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	4a22      	ldr	r2, [pc, #136]	; (800483c <xTaskIncrementTick+0x160>)
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <xTaskIncrementTick+0x164>)
 80047c2:	441a      	add	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fe fe9d 	bl	800350a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <xTaskIncrementTick+0x168>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3b8      	bcc.n	8004750 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e2:	e7b5      	b.n	8004750 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <xTaskIncrementTick+0x168>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4915      	ldr	r1, [pc, #84]	; (8004840 <xTaskIncrementTick+0x164>)
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d901      	bls.n	8004800 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <xTaskIncrementTick+0x16c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e004      	b.n	8004818 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <xTaskIncrementTick+0x170>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <xTaskIncrementTick+0x170>)
 8004816:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004818:	697b      	ldr	r3, [r7, #20]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000c4c 	.word	0x20000c4c
 8004828:	20000c28 	.word	0x20000c28
 800482c:	20000bdc 	.word	0x20000bdc
 8004830:	20000be0 	.word	0x20000be0
 8004834:	20000c3c 	.word	0x20000c3c
 8004838:	20000c44 	.word	0x20000c44
 800483c:	20000c2c 	.word	0x20000c2c
 8004840:	20000754 	.word	0x20000754
 8004844:	20000750 	.word	0x20000750
 8004848:	20000c38 	.word	0x20000c38
 800484c:	20000c34 	.word	0x20000c34

08004850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004856:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <vTaskSwitchContext+0xa8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800485e:	4b27      	ldr	r3, [pc, #156]	; (80048fc <vTaskSwitchContext+0xac>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004864:	e041      	b.n	80048ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004866:	4b25      	ldr	r3, [pc, #148]	; (80048fc <vTaskSwitchContext+0xac>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <vTaskSwitchContext+0xb0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e010      	b.n	8004896 <vTaskSwitchContext+0x46>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <vTaskSwitchContext+0x40>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	607b      	str	r3, [r7, #4]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <vTaskSwitchContext+0x3e>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3b01      	subs	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	491b      	ldr	r1, [pc, #108]	; (8004904 <vTaskSwitchContext+0xb4>)
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0e4      	beq.n	8004874 <vTaskSwitchContext+0x24>
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <vTaskSwitchContext+0xb4>)
 80048b6:	4413      	add	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	3308      	adds	r3, #8
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d104      	bne.n	80048da <vTaskSwitchContext+0x8a>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <vTaskSwitchContext+0xb8>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4a06      	ldr	r2, [pc, #24]	; (8004900 <vTaskSwitchContext+0xb0>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6013      	str	r3, [r2, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000c4c 	.word	0x20000c4c
 80048fc:	20000c38 	.word	0x20000c38
 8004900:	20000c2c 	.word	0x20000c2c
 8004904:	20000754 	.word	0x20000754
 8004908:	20000750 	.word	0x20000750

0800490c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <vTaskPlaceOnEventList+0x44>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3318      	adds	r3, #24
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fe fe09 	bl	8003552 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004940:	2101      	movs	r1, #1
 8004942:	6838      	ldr	r0, [r7, #0]
 8004944:	f000 fa7c 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000750 	.word	0x20000750

08004954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	617b      	str	r3, [r7, #20]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3318      	adds	r3, #24
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7fe fdc0 	bl	800350a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	68b8      	ldr	r0, [r7, #8]
 800499a:	f000 fa51 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
	}
 800499e:	bf00      	nop
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000750 	.word	0x20000750

080049ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	3318      	adds	r3, #24
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fdf1 	bl	80035c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <xTaskRemoveFromEventList+0xb0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d11d      	bne.n	8004a26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fde8 	bl	80035c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <xTaskRemoveFromEventList+0xb4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d903      	bls.n	8004a08 <xTaskRemoveFromEventList+0x5c>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <xTaskRemoveFromEventList+0xb4>)
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <xTaskRemoveFromEventList+0xb8>)
 8004a16:	441a      	add	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe fd73 	bl	800350a <vListInsertEnd>
 8004a24:	e005      	b.n	8004a32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3318      	adds	r3, #24
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	480e      	ldr	r0, [pc, #56]	; (8004a68 <xTaskRemoveFromEventList+0xbc>)
 8004a2e:	f7fe fd6c 	bl	800350a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <xTaskRemoveFromEventList+0xc0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d905      	bls.n	8004a4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <xTaskRemoveFromEventList+0xc4>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e001      	b.n	8004a50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a50:	697b      	ldr	r3, [r7, #20]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000c4c 	.word	0x20000c4c
 8004a60:	20000c2c 	.word	0x20000c2c
 8004a64:	20000754 	.word	0x20000754
 8004a68:	20000be4 	.word	0x20000be4
 8004a6c:	20000750 	.word	0x20000750
 8004a70:	20000c38 	.word	0x20000c38

08004a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <vTaskInternalSetTimeOutState+0x24>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <vTaskInternalSetTimeOutState+0x28>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	605a      	str	r2, [r3, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	20000c3c 	.word	0x20000c3c
 8004a9c:	20000c28 	.word	0x20000c28

08004aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	60fb      	str	r3, [r7, #12]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ae2:	f000 fe7f 	bl	80057e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <xTaskCheckForTimeOut+0xbc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d102      	bne.n	8004b06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
 8004b04:	e023      	b.n	8004b4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <xTaskCheckForTimeOut+0xc0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d007      	beq.n	8004b22 <xTaskCheckForTimeOut+0x82>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e015      	b.n	8004b4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d20b      	bcs.n	8004b44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff9b 	bl	8004a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	e004      	b.n	8004b4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b4e:	f000 fe79 	bl	8005844 <vPortExitCritical>

	return xReturn;
 8004b52:	69fb      	ldr	r3, [r7, #28]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000c28 	.word	0x20000c28
 8004b60:	20000c3c 	.word	0x20000c3c

08004b64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <vTaskMissedYield+0x14>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	20000c38 	.word	0x20000c38

08004b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b84:	f000 f852 	bl	8004c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <prvIdleTask+0x28>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d9f9      	bls.n	8004b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <prvIdleTask+0x2c>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ba0:	e7f0      	b.n	8004b84 <prvIdleTask+0x8>
 8004ba2:	bf00      	nop
 8004ba4:	20000754 	.word	0x20000754
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	e00c      	b.n	8004bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <prvInitialiseTaskLists+0x60>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fc72 	bl	80034b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b37      	cmp	r3, #55	; 0x37
 8004bd6:	d9ef      	bls.n	8004bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bd8:	480d      	ldr	r0, [pc, #52]	; (8004c10 <prvInitialiseTaskLists+0x64>)
 8004bda:	f7fe fc69 	bl	80034b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bde:	480d      	ldr	r0, [pc, #52]	; (8004c14 <prvInitialiseTaskLists+0x68>)
 8004be0:	f7fe fc66 	bl	80034b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004be4:	480c      	ldr	r0, [pc, #48]	; (8004c18 <prvInitialiseTaskLists+0x6c>)
 8004be6:	f7fe fc63 	bl	80034b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bea:	480c      	ldr	r0, [pc, #48]	; (8004c1c <prvInitialiseTaskLists+0x70>)
 8004bec:	f7fe fc60 	bl	80034b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bf0:	480b      	ldr	r0, [pc, #44]	; (8004c20 <prvInitialiseTaskLists+0x74>)
 8004bf2:	f7fe fc5d 	bl	80034b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <prvInitialiseTaskLists+0x78>)
 8004bf8:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <prvInitialiseTaskLists+0x64>)
 8004bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <prvInitialiseTaskLists+0x7c>)
 8004bfe:	4a05      	ldr	r2, [pc, #20]	; (8004c14 <prvInitialiseTaskLists+0x68>)
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000754 	.word	0x20000754
 8004c10:	20000bb4 	.word	0x20000bb4
 8004c14:	20000bc8 	.word	0x20000bc8
 8004c18:	20000be4 	.word	0x20000be4
 8004c1c:	20000bf8 	.word	0x20000bf8
 8004c20:	20000c10 	.word	0x20000c10
 8004c24:	20000bdc 	.word	0x20000bdc
 8004c28:	20000be0 	.word	0x20000be0

08004c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c32:	e019      	b.n	8004c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c34:	f000 fdd6 	bl	80057e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <prvCheckTasksWaitingTermination+0x50>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fcbd 	bl	80035c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <prvCheckTasksWaitingTermination+0x54>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <prvCheckTasksWaitingTermination+0x54>)
 8004c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <prvCheckTasksWaitingTermination+0x58>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <prvCheckTasksWaitingTermination+0x58>)
 8004c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c5e:	f000 fdf1 	bl	8005844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f810 	bl	8004c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <prvCheckTasksWaitingTermination+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e1      	bne.n	8004c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000bf8 	.word	0x20000bf8
 8004c80:	20000c24 	.word	0x20000c24
 8004c84:	20000c0c 	.word	0x20000c0c

08004c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 ff8e 	bl	8005bc0 <vPortFree>
				vPortFree( pxTCB );
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 ff8b 	bl	8005bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004caa:	e018      	b.n	8004cde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d103      	bne.n	8004cbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 ff82 	bl	8005bc0 <vPortFree>
	}
 8004cbc:	e00f      	b.n	8004cde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d00a      	beq.n	8004cde <prvDeleteTCB+0x56>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <prvDeleteTCB+0x54>
	}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <prvResetNextTaskUnblockTime+0x38>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <prvResetNextTaskUnblockTime+0x3c>)
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d00:	e008      	b.n	8004d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <prvResetNextTaskUnblockTime+0x38>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <prvResetNextTaskUnblockTime+0x3c>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000bdc 	.word	0x20000bdc
 8004d24:	20000c44 	.word	0x20000c44

08004d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <xTaskGetSchedulerState+0x34>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d36:	2301      	movs	r3, #1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e008      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <xTaskGetSchedulerState+0x38>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d44:	2302      	movs	r3, #2
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e001      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d4e:	687b      	ldr	r3, [r7, #4]
	}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000c30 	.word	0x20000c30
 8004d60:	20000c4c 	.word	0x20000c4c

08004d64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d056      	beq.n	8004e28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <xTaskPriorityDisinherit+0xd0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d00a      	beq.n	8004d9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60bb      	str	r3, [r7, #8]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d02c      	beq.n	8004e28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d128      	bne.n	8004e28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fbf2 	bl	80035c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <xTaskPriorityDisinherit+0xd4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d903      	bls.n	8004e08 <xTaskPriorityDisinherit+0xa4>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <xTaskPriorityDisinherit+0xd4>)
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <xTaskPriorityDisinherit+0xd8>)
 8004e16:	441a      	add	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7fe fb73 	bl	800350a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e28:	697b      	ldr	r3, [r7, #20]
	}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000750 	.word	0x20000750
 8004e38:	20000c2c 	.word	0x20000c2c
 8004e3c:	20000754 	.word	0x20000754

08004e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e50:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fbb4 	bl	80035c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d10a      	bne.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4819      	ldr	r0, [pc, #100]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e74:	f7fe fb49 	bl	800350a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e78:	e026      	b.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d209      	bcs.n	8004ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fe fb57 	bl	8003552 <vListInsert>
}
 8004ea4:	e010      	b.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7fe fb4d 	bl	8003552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d202      	bcs.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000c28 	.word	0x20000c28
 8004ed4:	20000750 	.word	0x20000750
 8004ed8:	20000c10 	.word	0x20000c10
 8004edc:	20000be0 	.word	0x20000be0
 8004ee0:	20000bdc 	.word	0x20000bdc
 8004ee4:	20000c44 	.word	0x20000c44

08004ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ef2:	f000 fb07 	bl	8005504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <xTimerCreateTimerTask+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d021      	beq.n	8004f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f06:	1d3a      	adds	r2, r7, #4
 8004f08:	f107 0108 	add.w	r1, r7, #8
 8004f0c:	f107 030c 	add.w	r3, r7, #12
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe fab3 	bl	800347c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	2302      	movs	r3, #2
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	460a      	mov	r2, r1
 8004f28:	4910      	ldr	r1, [pc, #64]	; (8004f6c <xTimerCreateTimerTask+0x84>)
 8004f2a:	4811      	ldr	r0, [pc, #68]	; (8004f70 <xTimerCreateTimerTask+0x88>)
 8004f2c:	f7ff f860 	bl	8003ff0 <xTaskCreateStatic>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <xTimerCreateTimerTask+0x8c>)
 8004f34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <xTimerCreateTimerTask+0x8c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	613b      	str	r3, [r7, #16]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000c80 	.word	0x20000c80
 8004f6c:	08006d7c 	.word	0x08006d7c
 8004f70:	080050ad 	.word	0x080050ad
 8004f74:	20000c84 	.word	0x20000c84

08004f78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	623b      	str	r3, [r7, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <xTimerGenericCommand+0x98>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02a      	beq.n	8005004 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	dc18      	bgt.n	8004ff2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fc0:	f7ff feb2 	bl	8004d28 <xTaskGetSchedulerState>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d109      	bne.n	8004fde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <xTimerGenericCommand+0x98>)
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	f107 0110 	add.w	r1, r7, #16
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd6:	f7fe fc23 	bl	8003820 <xQueueGenericSend>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
 8004fdc:	e012      	b.n	8005004 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <xTimerGenericCommand+0x98>)
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f107 0110 	add.w	r1, r7, #16
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f7fe fc19 	bl	8003820 <xQueueGenericSend>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24
 8004ff0:	e008      	b.n	8005004 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <xTimerGenericCommand+0x98>)
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f107 0110 	add.w	r1, r7, #16
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	f7fe fd0d 	bl	8003a1c <xQueueGenericSendFromISR>
 8005002:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000c80 	.word	0x20000c80

08005014 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <prvProcessExpiredTimer+0x94>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3304      	adds	r3, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fac9 	bl	80035c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d022      	beq.n	8005086 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	18d1      	adds	r1, r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f000 f8d1 	bl	80051f4 <prvInsertTimerInActiveList>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01f      	beq.n	8005098 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005058:	2300      	movs	r3, #0
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2300      	movs	r3, #0
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	2100      	movs	r1, #0
 8005062:	6978      	ldr	r0, [r7, #20]
 8005064:	f7ff ff88 	bl	8004f78 <xTimerGenericCommand>
 8005068:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d113      	bne.n	8005098 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	6978      	ldr	r0, [r7, #20]
 800509e:	4798      	blx	r3
}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000c78 	.word	0x20000c78

080050ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b4:	f107 0308 	add.w	r3, r7, #8
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f857 	bl	800516c <prvGetNextExpireTime>
 80050be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f803 	bl	80050d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050ca:	f000 f8d5 	bl	8005278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050ce:	e7f1      	b.n	80050b4 <prvTimerTask+0x8>

080050d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050da:	f7ff fa43 	bl	8004564 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f866 	bl	80051b4 <prvSampleTimeNow>
 80050e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d130      	bne.n	8005152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <prvProcessTimerOrBlockTask+0x3c>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d806      	bhi.n	800510c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050fe:	f7ff fa3f 	bl	8004580 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff85 	bl	8005014 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800510a:	e024      	b.n	8005156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <prvProcessTimerOrBlockTask+0x90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <prvProcessTimerOrBlockTask+0x50>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <prvProcessTimerOrBlockTask+0x52>
 8005120:	2300      	movs	r3, #0
 8005122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <prvProcessTimerOrBlockTask+0x94>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	f7fe ff29 	bl	8003f88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005136:	f7ff fa23 	bl	8004580 <xTaskResumeAll>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <prvProcessTimerOrBlockTask+0x98>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
}
 8005150:	e001      	b.n	8005156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005152:	f7ff fa15 	bl	8004580 <xTaskResumeAll>
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000c7c 	.word	0x20000c7c
 8005164:	20000c80 	.word	0x20000c80
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <prvGetNextExpireTime+0x44>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <prvGetNextExpireTime+0x16>
 800517e:	2201      	movs	r2, #1
 8005180:	e000      	b.n	8005184 <prvGetNextExpireTime+0x18>
 8005182:	2200      	movs	r2, #0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <prvGetNextExpireTime+0x44>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e001      	b.n	80051a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000c78 	.word	0x20000c78

080051b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051bc:	f7ff fa7e 	bl	80046bc <xTaskGetTickCount>
 80051c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <prvSampleTimeNow+0x3c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d205      	bcs.n	80051d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051cc:	f000 f936 	bl	800543c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e002      	b.n	80051de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051de:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <prvSampleTimeNow+0x3c>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000c88 	.word	0x20000c88

080051f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d812      	bhi.n	8005240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e01b      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <prvInsertTimerInActiveList+0x7c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe f98a 	bl	8003552 <vListInsert>
 800523e:	e012      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d206      	bcs.n	8005256 <prvInsertTimerInActiveList+0x62>
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e007      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <prvInsertTimerInActiveList+0x80>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fe f976 	bl	8003552 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005266:	697b      	ldr	r3, [r7, #20]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000c7c 	.word	0x20000c7c
 8005274:	20000c78 	.word	0x20000c78

08005278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08e      	sub	sp, #56	; 0x38
 800527c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527e:	e0ca      	b.n	8005416 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	da18      	bge.n	80052b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	3304      	adds	r3, #4
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	61fb      	str	r3, [r7, #28]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ae:	6850      	ldr	r0, [r2, #4]
 80052b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b2:	6892      	ldr	r2, [r2, #8]
 80052b4:	4611      	mov	r1, r2
 80052b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f2c0 80aa 	blt.w	8005414 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	3304      	adds	r3, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe f977 	bl	80035c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052d6:	463b      	mov	r3, r7
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff6b 	bl	80051b4 <prvSampleTimeNow>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	f200 8097 	bhi.w	8005416 <prvProcessReceivedCommands+0x19e>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <prvProcessReceivedCommands+0x78>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005319 	.word	0x08005319
 80052fc:	0800538d 	.word	0x0800538d
 8005300:	080053a1 	.word	0x080053a1
 8005304:	080053eb 	.word	0x080053eb
 8005308:	08005319 	.word	0x08005319
 800530c:	08005319 	.word	0x08005319
 8005310:	0800538d 	.word	0x0800538d
 8005314:	080053a1 	.word	0x080053a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	18d1      	adds	r1, r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005338:	f7ff ff5c 	bl	80051f4 <prvInsertTimerInActiveList>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d069      	beq.n	8005416 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05e      	beq.n	8005416 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	441a      	add	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	2100      	movs	r1, #0
 8005368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536a:	f7ff fe05 	bl	8004f78 <xTimerGenericCommand>
 800536e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d14f      	bne.n	8005416 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61bb      	str	r3, [r7, #24]
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800539e:	e03a      	b.n	8005416 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	617b      	str	r3, [r7, #20]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	18d1      	adds	r1, r2, r3
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e4:	f7ff ff06 	bl	80051f4 <prvInsertTimerInActiveList>
					break;
 80053e8:	e015      	b.n	8005416 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80053f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fa:	f000 fbe1 	bl	8005bc0 <vPortFree>
 80053fe:	e00a      	b.n	8005416 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005412:	e000      	b.n	8005416 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005414:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <prvProcessReceivedCommands+0x1c0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1d39      	adds	r1, r7, #4
 800541c:	2200      	movs	r2, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fb98 	bl	8003b54 <xQueueReceive>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f47f af2a 	bne.w	8005280 <prvProcessReceivedCommands+0x8>
	}
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	3730      	adds	r7, #48	; 0x30
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000c80 	.word	0x20000c80

0800543c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005442:	e048      	b.n	80054d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005444:	4b2d      	ldr	r3, [pc, #180]	; (80054fc <prvSwitchTimerLists+0xc0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544e:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <prvSwitchTimerLists+0xc0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3304      	adds	r3, #4
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe f8b1 	bl	80035c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02e      	beq.n	80054d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d90e      	bls.n	80054a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <prvSwitchTimerLists+0xc0>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3304      	adds	r3, #4
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7fe f856 	bl	8003552 <vListInsert>
 80054a6:	e016      	b.n	80054d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054a8:	2300      	movs	r3, #0
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	2100      	movs	r1, #0
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff fd60 	bl	8004f78 <xTimerGenericCommand>
 80054b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	603b      	str	r3, [r7, #0]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054d6:	4b09      	ldr	r3, [pc, #36]	; (80054fc <prvSwitchTimerLists+0xc0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1b1      	bne.n	8005444 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <prvSwitchTimerLists+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <prvSwitchTimerLists+0xc4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a04      	ldr	r2, [pc, #16]	; (80054fc <prvSwitchTimerLists+0xc0>)
 80054ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <prvSwitchTimerLists+0xc4>)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	6013      	str	r3, [r2, #0]
}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000c78 	.word	0x20000c78
 8005500:	20000c7c 	.word	0x20000c7c

08005504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800550a:	f000 f96b 	bl	80057e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <prvCheckForValidListAndQueue+0x60>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d120      	bne.n	8005558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005516:	4814      	ldr	r0, [pc, #80]	; (8005568 <prvCheckForValidListAndQueue+0x64>)
 8005518:	f7fd ffca 	bl	80034b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800551c:	4813      	ldr	r0, [pc, #76]	; (800556c <prvCheckForValidListAndQueue+0x68>)
 800551e:	f7fd ffc7 	bl	80034b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <prvCheckForValidListAndQueue+0x6c>)
 8005524:	4a10      	ldr	r2, [pc, #64]	; (8005568 <prvCheckForValidListAndQueue+0x64>)
 8005526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005528:	4b12      	ldr	r3, [pc, #72]	; (8005574 <prvCheckForValidListAndQueue+0x70>)
 800552a:	4a10      	ldr	r2, [pc, #64]	; (800556c <prvCheckForValidListAndQueue+0x68>)
 800552c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800552e:	2300      	movs	r3, #0
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <prvCheckForValidListAndQueue+0x74>)
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <prvCheckForValidListAndQueue+0x78>)
 8005536:	2110      	movs	r1, #16
 8005538:	200a      	movs	r0, #10
 800553a:	f7fe f8d5 	bl	80036e8 <xQueueGenericCreateStatic>
 800553e:	4603      	mov	r3, r0
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <prvCheckForValidListAndQueue+0x60>)
 8005542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <prvCheckForValidListAndQueue+0x60>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <prvCheckForValidListAndQueue+0x60>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	490b      	ldr	r1, [pc, #44]	; (8005580 <prvCheckForValidListAndQueue+0x7c>)
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fcee 	bl	8003f34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005558:	f000 f974 	bl	8005844 <vPortExitCritical>
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000c80 	.word	0x20000c80
 8005568:	20000c50 	.word	0x20000c50
 800556c:	20000c64 	.word	0x20000c64
 8005570:	20000c78 	.word	0x20000c78
 8005574:	20000c7c 	.word	0x20000c7c
 8005578:	20000d2c 	.word	0x20000d2c
 800557c:	20000c8c 	.word	0x20000c8c
 8005580:	08006d84 	.word	0x08006d84

08005584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3b04      	subs	r3, #4
 8005594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800559c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3b04      	subs	r3, #4
 80055a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0201 	bic.w	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b04      	subs	r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055b4:	4a0c      	ldr	r2, [pc, #48]	; (80055e8 <pxPortInitialiseStack+0x64>)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3b14      	subs	r3, #20
 80055be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3b04      	subs	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f06f 0202 	mvn.w	r2, #2
 80055d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3b20      	subs	r3, #32
 80055d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055da:	68fb      	ldr	r3, [r7, #12]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	080055ed 	.word	0x080055ed

080055ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <prvTaskExitError+0x54>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fe:	d00a      	beq.n	8005616 <prvTaskExitError+0x2a>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60fb      	str	r3, [r7, #12]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <prvTaskExitError+0x28>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	60bb      	str	r3, [r7, #8]
}
 8005628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800562a:	bf00      	nop
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0fc      	beq.n	800562c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	2000000c 	.word	0x2000000c
	...

08005650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <pxCurrentTCBConst2>)
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	6808      	ldr	r0, [r1, #0]
 8005656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	f380 8809 	msr	PSP, r0
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8811 	msr	BASEPRI, r0
 800566a:	4770      	bx	lr
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst2>:
 8005670:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005678:	4808      	ldr	r0, [pc, #32]	; (800569c <prvPortStartFirstTask+0x24>)
 800567a:	6800      	ldr	r0, [r0, #0]
 800567c:	6800      	ldr	r0, [r0, #0]
 800567e:	f380 8808 	msr	MSP, r0
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f380 8814 	msr	CONTROL, r0
 800568a:	b662      	cpsie	i
 800568c:	b661      	cpsie	f
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	df00      	svc	0
 8005698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800569a:	bf00      	nop
 800569c:	e000ed08 	.word	0xe000ed08

080056a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056a6:	4b46      	ldr	r3, [pc, #280]	; (80057c0 <xPortStartScheduler+0x120>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a46      	ldr	r2, [pc, #280]	; (80057c4 <xPortStartScheduler+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10a      	bne.n	80056c6 <xPortStartScheduler+0x26>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056c6:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <xPortStartScheduler+0x120>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3f      	ldr	r2, [pc, #252]	; (80057c8 <xPortStartScheduler+0x128>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10a      	bne.n	80056e6 <xPortStartScheduler+0x46>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056e6:	4b39      	ldr	r3, [pc, #228]	; (80057cc <xPortStartScheduler+0x12c>)
 80056e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	22ff      	movs	r2, #255	; 0xff
 80056f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005708:	b2da      	uxtb	r2, r3
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <xPortStartScheduler+0x130>)
 800570c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800570e:	4b31      	ldr	r3, [pc, #196]	; (80057d4 <xPortStartScheduler+0x134>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005714:	e009      	b.n	800572a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <xPortStartScheduler+0x134>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <xPortStartScheduler+0x134>)
 800571e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d0ef      	beq.n	8005716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005736:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <xPortStartScheduler+0x134>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1c3 0307 	rsb	r3, r3, #7
 800573e:	2b04      	cmp	r3, #4
 8005740:	d00a      	beq.n	8005758 <xPortStartScheduler+0xb8>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	60bb      	str	r3, [r7, #8]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <xPortStartScheduler+0x134>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <xPortStartScheduler+0x134>)
 8005760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <xPortStartScheduler+0x134>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800576a:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <xPortStartScheduler+0x134>)
 800576c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005776:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <xPortStartScheduler+0x138>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <xPortStartScheduler+0x138>)
 800577c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <xPortStartScheduler+0x138>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <xPortStartScheduler+0x138>)
 8005788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800578c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800578e:	f000 f8dd 	bl	800594c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <xPortStartScheduler+0x13c>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005798:	f000 f8fc 	bl	8005994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <xPortStartScheduler+0x140>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <xPortStartScheduler+0x140>)
 80057a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057a8:	f7ff ff66 	bl	8005678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057ac:	f7ff f850 	bl	8004850 <vTaskSwitchContext>
	prvTaskExitError();
 80057b0:	f7ff ff1c 	bl	80055ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000ed00 	.word	0xe000ed00
 80057c4:	410fc271 	.word	0x410fc271
 80057c8:	410fc270 	.word	0x410fc270
 80057cc:	e000e400 	.word	0xe000e400
 80057d0:	20000d7c 	.word	0x20000d7c
 80057d4:	20000d80 	.word	0x20000d80
 80057d8:	e000ed20 	.word	0xe000ed20
 80057dc:	2000000c 	.word	0x2000000c
 80057e0:	e000ef34 	.word	0xe000ef34

080057e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	607b      	str	r3, [r7, #4]
}
 80057fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <vPortEnterCritical+0x58>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3301      	adds	r3, #1
 8005804:	4a0d      	ldr	r2, [pc, #52]	; (800583c <vPortEnterCritical+0x58>)
 8005806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <vPortEnterCritical+0x58>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10f      	bne.n	8005830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <vPortEnterCritical+0x5c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <vPortEnterCritical+0x4c>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <vPortEnterCritical+0x4a>
	}
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	2000000c 	.word	0x2000000c
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <vPortExitCritical+0x50>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <vPortExitCritical+0x24>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	607b      	str	r3, [r7, #4]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <vPortExitCritical+0x50>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <vPortExitCritical+0x50>)
 8005870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <vPortExitCritical+0x50>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <vPortExitCritical+0x42>
 800587a:	2300      	movs	r3, #0
 800587c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f383 8811 	msr	BASEPRI, r3
}
 8005884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c
	...

080058a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058a0:	f3ef 8009 	mrs	r0, PSP
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <pxCurrentTCBConst>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f01e 0f10 	tst.w	lr, #16
 80058b0:	bf08      	it	eq
 80058b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	6010      	str	r0, [r2, #0]
 80058bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058c4:	f380 8811 	msr	BASEPRI, r0
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f7fe ffbe 	bl	8004850 <vTaskSwitchContext>
 80058d4:	f04f 0000 	mov.w	r0, #0
 80058d8:	f380 8811 	msr	BASEPRI, r0
 80058dc:	bc09      	pop	{r0, r3}
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	6808      	ldr	r0, [r1, #0]
 80058e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e6:	f01e 0f10 	tst.w	lr, #16
 80058ea:	bf08      	it	eq
 80058ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058f0:	f380 8809 	msr	PSP, r0
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst>:
 8005900:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005922:	f7fe fedb 	bl	80046dc <xTaskIncrementTick>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <xPortSysTickHandler+0x40>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	2300      	movs	r3, #0
 8005936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f383 8811 	msr	BASEPRI, r3
}
 800593e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <vPortSetupTimerInterrupt+0x34>)
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <vPortSetupTimerInterrupt+0x38>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <vPortSetupTimerInterrupt+0x3c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0a      	ldr	r2, [pc, #40]	; (800598c <vPortSetupTimerInterrupt+0x40>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	4a09      	ldr	r2, [pc, #36]	; (8005990 <vPortSetupTimerInterrupt+0x44>)
 800596a:	3b01      	subs	r3, #1
 800596c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <vPortSetupTimerInterrupt+0x34>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	e000e010 	.word	0xe000e010
 8005984:	e000e018 	.word	0xe000e018
 8005988:	20000000 	.word	0x20000000
 800598c:	10624dd3 	.word	0x10624dd3
 8005990:	e000e014 	.word	0xe000e014

08005994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059a4 <vPortEnableVFP+0x10>
 8005998:	6801      	ldr	r1, [r0, #0]
 800599a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800599e:	6001      	str	r1, [r0, #0]
 80059a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059a2:	bf00      	nop
 80059a4:	e000ed88 	.word	0xe000ed88

080059a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ae:	f3ef 8305 	mrs	r3, IPSR
 80059b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b0f      	cmp	r3, #15
 80059b8:	d914      	bls.n	80059e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <vPortValidateInterruptPriority+0x70>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059c4:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <vPortValidateInterruptPriority+0x74>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	7afa      	ldrb	r2, [r7, #11]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d20a      	bcs.n	80059e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	607b      	str	r3, [r7, #4]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <vPortValidateInterruptPriority+0x78>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <vPortValidateInterruptPriority+0x7c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d90a      	bls.n	8005a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	603b      	str	r3, [r7, #0]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <vPortValidateInterruptPriority+0x60>
	}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	e000e3f0 	.word	0xe000e3f0
 8005a1c:	20000d7c 	.word	0x20000d7c
 8005a20:	e000ed0c 	.word	0xe000ed0c
 8005a24:	20000d80 	.word	0x20000d80

08005a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a34:	f7fe fd96 	bl	8004564 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a38:	4b5b      	ldr	r3, [pc, #364]	; (8005ba8 <pvPortMalloc+0x180>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a40:	f000 f920 	bl	8005c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <pvPortMalloc+0x184>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8093 	bne.w	8005b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01d      	beq.n	8005a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a58:	2208      	movs	r2, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	3308      	adds	r3, #8
 8005a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <pvPortMalloc+0x6c>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	617b      	str	r3, [r7, #20]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d06e      	beq.n	8005b78 <pvPortMalloc+0x150>
 8005a9a:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <pvPortMalloc+0x188>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d869      	bhi.n	8005b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <pvPortMalloc+0x18c>)
 8005aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <pvPortMalloc+0x18c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aae:	e004      	b.n	8005aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d903      	bls.n	8005acc <pvPortMalloc+0xa4>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f1      	bne.n	8005ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <pvPortMalloc+0x180>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d050      	beq.n	8005b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2208      	movs	r2, #8
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	2308      	movs	r3, #8
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d91f      	bls.n	8005b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <pvPortMalloc+0xf8>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	613b      	str	r3, [r7, #16]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b32:	69b8      	ldr	r0, [r7, #24]
 8005b34:	f000 f908 	bl	8005d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <pvPortMalloc+0x190>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d203      	bcs.n	8005b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <pvPortMalloc+0x190>)
 8005b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <pvPortMalloc+0x184>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <pvPortMalloc+0x194>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <pvPortMalloc+0x194>)
 8005b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b78:	f7fe fd02 	bl	8004580 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <pvPortMalloc+0x174>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <pvPortMalloc+0x172>
	return pvReturn;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3728      	adds	r7, #40	; 0x28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	2000498c 	.word	0x2000498c
 8005bac:	200049a0 	.word	0x200049a0
 8005bb0:	20004990 	.word	0x20004990
 8005bb4:	20004984 	.word	0x20004984
 8005bb8:	20004994 	.word	0x20004994
 8005bbc:	20004998 	.word	0x20004998

08005bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04d      	beq.n	8005c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <vPortFree+0xb8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <vPortFree+0x44>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	60fb      	str	r3, [r7, #12]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <vPortFree+0x62>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60bb      	str	r3, [r7, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <vPortFree+0xb8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01e      	beq.n	8005c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11a      	bne.n	8005c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <vPortFree+0xb8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	401a      	ands	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c48:	f7fe fc8c 	bl	8004564 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <vPortFree+0xbc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4413      	add	r3, r2
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <vPortFree+0xbc>)
 8005c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c5a:	6938      	ldr	r0, [r7, #16]
 8005c5c:	f000 f874 	bl	8005d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <vPortFree+0xc0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <vPortFree+0xc0>)
 8005c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c6a:	f7fe fc89 	bl	8004580 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200049a0 	.word	0x200049a0
 8005c7c:	20004990 	.word	0x20004990
 8005c80:	2000499c 	.word	0x2000499c

08005c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <prvHeapInit+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <prvHeapInit+0xac>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <prvHeapInit+0xb0>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <prvHeapInit+0xb0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <prvHeapInit+0xb4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <prvHeapInit+0xb4>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <prvHeapInit+0xb8>)
 8005d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <prvHeapInit+0xbc>)
 8005d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <prvHeapInit+0xc0>)
 8005d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000d84 	.word	0x20000d84
 8005d34:	20004984 	.word	0x20004984
 8005d38:	2000498c 	.word	0x2000498c
 8005d3c:	20004994 	.word	0x20004994
 8005d40:	20004990 	.word	0x20004990
 8005d44:	200049a0 	.word	0x200049a0

08005d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <prvInsertBlockIntoFreeList+0xac>)
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e002      	b.n	8005d5c <prvInsertBlockIntoFreeList+0x14>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d8f7      	bhi.n	8005d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4413      	add	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d108      	bne.n	8005d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d118      	bne.n	8005dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d00d      	beq.n	8005dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e008      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d002      	beq.n	8005de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20004984 	.word	0x20004984
 8005df8:	2000498c 	.word	0x2000498c

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	; (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000010 	.word	0x20000010

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	; (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	; (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2600      	movs	r6, #0
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4d0b      	ldr	r5, [pc, #44]	; (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	; (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f000 ff84 	bl	8006d28 <_init>
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2600      	movs	r6, #0
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	08006e44 	.word	0x08006e44
 8005e44:	08006e44 	.word	0x08006e44
 8005e48:	08006e44 	.word	0x08006e44
 8005e4c:	08006e48 	.word	0x08006e48

08005e50 <memcpy>:
 8005e50:	440a      	add	r2, r1
 8005e52:	4291      	cmp	r1, r2
 8005e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e58:	d100      	bne.n	8005e5c <memcpy+0xc>
 8005e5a:	4770      	bx	lr
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e66:	4291      	cmp	r1, r2
 8005e68:	d1f9      	bne.n	8005e5e <memcpy+0xe>
 8005e6a:	bd10      	pop	{r4, pc}

08005e6c <memset>:
 8005e6c:	4402      	add	r2, r0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d100      	bne.n	8005e76 <memset+0xa>
 8005e74:	4770      	bx	lr
 8005e76:	f803 1b01 	strb.w	r1, [r3], #1
 8005e7a:	e7f9      	b.n	8005e70 <memset+0x4>

08005e7c <iprintf>:
 8005e7c:	b40f      	push	{r0, r1, r2, r3}
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <iprintf+0x2c>)
 8005e80:	b513      	push	{r0, r1, r4, lr}
 8005e82:	681c      	ldr	r4, [r3, #0]
 8005e84:	b124      	cbz	r4, 8005e90 <iprintf+0x14>
 8005e86:	69a3      	ldr	r3, [r4, #24]
 8005e88:	b913      	cbnz	r3, 8005e90 <iprintf+0x14>
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 f866 	bl	8005f5c <__sinit>
 8005e90:	ab05      	add	r3, sp, #20
 8005e92:	9a04      	ldr	r2, [sp, #16]
 8005e94:	68a1      	ldr	r1, [r4, #8]
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f983 	bl	80061a4 <_vfiprintf_r>
 8005e9e:	b002      	add	sp, #8
 8005ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea4:	b004      	add	sp, #16
 8005ea6:	4770      	bx	lr
 8005ea8:	20000010 	.word	0x20000010

08005eac <std>:
 8005eac:	2300      	movs	r3, #0
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eba:	6083      	str	r3, [r0, #8]
 8005ebc:	8181      	strh	r1, [r0, #12]
 8005ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8005ec0:	81c2      	strh	r2, [r0, #14]
 8005ec2:	6183      	str	r3, [r0, #24]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	305c      	adds	r0, #92	; 0x5c
 8005eca:	f7ff ffcf 	bl	8005e6c <memset>
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <std+0x38>)
 8005ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <std+0x3c>)
 8005ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <std+0x40>)
 8005ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <std+0x44>)
 8005edc:	6224      	str	r4, [r4, #32]
 8005ede:	6323      	str	r3, [r4, #48]	; 0x30
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	0800674d 	.word	0x0800674d
 8005ee8:	0800676f 	.word	0x0800676f
 8005eec:	080067a7 	.word	0x080067a7
 8005ef0:	080067cb 	.word	0x080067cb

08005ef4 <_cleanup_r>:
 8005ef4:	4901      	ldr	r1, [pc, #4]	; (8005efc <_cleanup_r+0x8>)
 8005ef6:	f000 b8af 	b.w	8006058 <_fwalk_reent>
 8005efa:	bf00      	nop
 8005efc:	08006aa5 	.word	0x08006aa5

08005f00 <__sfmoreglue>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	1e4a      	subs	r2, r1, #1
 8005f04:	2568      	movs	r5, #104	; 0x68
 8005f06:	4355      	muls	r5, r2
 8005f08:	460e      	mov	r6, r1
 8005f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f0e:	f000 f8c5 	bl	800609c <_malloc_r>
 8005f12:	4604      	mov	r4, r0
 8005f14:	b140      	cbz	r0, 8005f28 <__sfmoreglue+0x28>
 8005f16:	2100      	movs	r1, #0
 8005f18:	e9c0 1600 	strd	r1, r6, [r0]
 8005f1c:	300c      	adds	r0, #12
 8005f1e:	60a0      	str	r0, [r4, #8]
 8005f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f24:	f7ff ffa2 	bl	8005e6c <memset>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}

08005f2c <__sfp_lock_acquire>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__sfp_lock_acquire+0x8>)
 8005f2e:	f000 b8b3 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	20004ae0 	.word	0x20004ae0

08005f38 <__sfp_lock_release>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_release+0x8>)
 8005f3a:	f000 b8ae 	b.w	800609a <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20004ae0 	.word	0x20004ae0

08005f44 <__sinit_lock_acquire>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sinit_lock_acquire+0x8>)
 8005f46:	f000 b8a7 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20004adb 	.word	0x20004adb

08005f50 <__sinit_lock_release>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_release+0x8>)
 8005f52:	f000 b8a2 	b.w	800609a <__retarget_lock_release_recursive>
 8005f56:	bf00      	nop
 8005f58:	20004adb 	.word	0x20004adb

08005f5c <__sinit>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	f7ff fff0 	bl	8005f44 <__sinit_lock_acquire>
 8005f64:	69a3      	ldr	r3, [r4, #24]
 8005f66:	b11b      	cbz	r3, 8005f70 <__sinit+0x14>
 8005f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6c:	f7ff bff0 	b.w	8005f50 <__sinit_lock_release>
 8005f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f74:	6523      	str	r3, [r4, #80]	; 0x50
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <__sinit+0x68>)
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <__sinit+0x6c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	bf04      	itt	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	61a3      	streq	r3, [r4, #24]
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f820 	bl	8005fcc <__sfp>
 8005f8c:	6060      	str	r0, [r4, #4]
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 f81c 	bl	8005fcc <__sfp>
 8005f94:	60a0      	str	r0, [r4, #8]
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 f818 	bl	8005fcc <__sfp>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	60e0      	str	r0, [r4, #12]
 8005fa0:	2104      	movs	r1, #4
 8005fa2:	6860      	ldr	r0, [r4, #4]
 8005fa4:	f7ff ff82 	bl	8005eac <std>
 8005fa8:	68a0      	ldr	r0, [r4, #8]
 8005faa:	2201      	movs	r2, #1
 8005fac:	2109      	movs	r1, #9
 8005fae:	f7ff ff7d 	bl	8005eac <std>
 8005fb2:	68e0      	ldr	r0, [r4, #12]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	2112      	movs	r1, #18
 8005fb8:	f7ff ff78 	bl	8005eac <std>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	61a3      	str	r3, [r4, #24]
 8005fc0:	e7d2      	b.n	8005f68 <__sinit+0xc>
 8005fc2:	bf00      	nop
 8005fc4:	08006da4 	.word	0x08006da4
 8005fc8:	08005ef5 	.word	0x08005ef5

08005fcc <__sfp>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	4607      	mov	r7, r0
 8005fd0:	f7ff ffac 	bl	8005f2c <__sfp_lock_acquire>
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <__sfp+0x84>)
 8005fd6:	681e      	ldr	r6, [r3, #0]
 8005fd8:	69b3      	ldr	r3, [r6, #24]
 8005fda:	b913      	cbnz	r3, 8005fe2 <__sfp+0x16>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ffbd 	bl	8005f5c <__sinit>
 8005fe2:	3648      	adds	r6, #72	; 0x48
 8005fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	d503      	bpl.n	8005ff4 <__sfp+0x28>
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	b30b      	cbz	r3, 8006034 <__sfp+0x68>
 8005ff0:	6836      	ldr	r6, [r6, #0]
 8005ff2:	e7f7      	b.n	8005fe4 <__sfp+0x18>
 8005ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ff8:	b9d5      	cbnz	r5, 8006030 <__sfp+0x64>
 8005ffa:	4b16      	ldr	r3, [pc, #88]	; (8006054 <__sfp+0x88>)
 8005ffc:	60e3      	str	r3, [r4, #12]
 8005ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006002:	6665      	str	r5, [r4, #100]	; 0x64
 8006004:	f000 f847 	bl	8006096 <__retarget_lock_init_recursive>
 8006008:	f7ff ff96 	bl	8005f38 <__sfp_lock_release>
 800600c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006014:	6025      	str	r5, [r4, #0]
 8006016:	61a5      	str	r5, [r4, #24]
 8006018:	2208      	movs	r2, #8
 800601a:	4629      	mov	r1, r5
 800601c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006020:	f7ff ff24 	bl	8005e6c <memset>
 8006024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800602c:	4620      	mov	r0, r4
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006030:	3468      	adds	r4, #104	; 0x68
 8006032:	e7d9      	b.n	8005fe8 <__sfp+0x1c>
 8006034:	2104      	movs	r1, #4
 8006036:	4638      	mov	r0, r7
 8006038:	f7ff ff62 	bl	8005f00 <__sfmoreglue>
 800603c:	4604      	mov	r4, r0
 800603e:	6030      	str	r0, [r6, #0]
 8006040:	2800      	cmp	r0, #0
 8006042:	d1d5      	bne.n	8005ff0 <__sfp+0x24>
 8006044:	f7ff ff78 	bl	8005f38 <__sfp_lock_release>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	e7ee      	b.n	800602c <__sfp+0x60>
 800604e:	bf00      	nop
 8006050:	08006da4 	.word	0x08006da4
 8006054:	ffff0001 	.word	0xffff0001

08006058 <_fwalk_reent>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	4606      	mov	r6, r0
 800605e:	4688      	mov	r8, r1
 8006060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006064:	2700      	movs	r7, #0
 8006066:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800606a:	f1b9 0901 	subs.w	r9, r9, #1
 800606e:	d505      	bpl.n	800607c <_fwalk_reent+0x24>
 8006070:	6824      	ldr	r4, [r4, #0]
 8006072:	2c00      	cmp	r4, #0
 8006074:	d1f7      	bne.n	8006066 <_fwalk_reent+0xe>
 8006076:	4638      	mov	r0, r7
 8006078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607c:	89ab      	ldrh	r3, [r5, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d907      	bls.n	8006092 <_fwalk_reent+0x3a>
 8006082:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006086:	3301      	adds	r3, #1
 8006088:	d003      	beq.n	8006092 <_fwalk_reent+0x3a>
 800608a:	4629      	mov	r1, r5
 800608c:	4630      	mov	r0, r6
 800608e:	47c0      	blx	r8
 8006090:	4307      	orrs	r7, r0
 8006092:	3568      	adds	r5, #104	; 0x68
 8006094:	e7e9      	b.n	800606a <_fwalk_reent+0x12>

08006096 <__retarget_lock_init_recursive>:
 8006096:	4770      	bx	lr

08006098 <__retarget_lock_acquire_recursive>:
 8006098:	4770      	bx	lr

0800609a <__retarget_lock_release_recursive>:
 800609a:	4770      	bx	lr

0800609c <_malloc_r>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	1ccd      	adds	r5, r1, #3
 80060a0:	f025 0503 	bic.w	r5, r5, #3
 80060a4:	3508      	adds	r5, #8
 80060a6:	2d0c      	cmp	r5, #12
 80060a8:	bf38      	it	cc
 80060aa:	250c      	movcc	r5, #12
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	4606      	mov	r6, r0
 80060b0:	db01      	blt.n	80060b6 <_malloc_r+0x1a>
 80060b2:	42a9      	cmp	r1, r5
 80060b4:	d903      	bls.n	80060be <_malloc_r+0x22>
 80060b6:	230c      	movs	r3, #12
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	2000      	movs	r0, #0
 80060bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060be:	f000 fda3 	bl	8006c08 <__malloc_lock>
 80060c2:	4921      	ldr	r1, [pc, #132]	; (8006148 <_malloc_r+0xac>)
 80060c4:	680a      	ldr	r2, [r1, #0]
 80060c6:	4614      	mov	r4, r2
 80060c8:	b99c      	cbnz	r4, 80060f2 <_malloc_r+0x56>
 80060ca:	4f20      	ldr	r7, [pc, #128]	; (800614c <_malloc_r+0xb0>)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	b923      	cbnz	r3, 80060da <_malloc_r+0x3e>
 80060d0:	4621      	mov	r1, r4
 80060d2:	4630      	mov	r0, r6
 80060d4:	f000 fb2a 	bl	800672c <_sbrk_r>
 80060d8:	6038      	str	r0, [r7, #0]
 80060da:	4629      	mov	r1, r5
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 fb25 	bl	800672c <_sbrk_r>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	d123      	bne.n	800612e <_malloc_r+0x92>
 80060e6:	230c      	movs	r3, #12
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	4630      	mov	r0, r6
 80060ec:	f000 fd92 	bl	8006c14 <__malloc_unlock>
 80060f0:	e7e3      	b.n	80060ba <_malloc_r+0x1e>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	1b5b      	subs	r3, r3, r5
 80060f6:	d417      	bmi.n	8006128 <_malloc_r+0x8c>
 80060f8:	2b0b      	cmp	r3, #11
 80060fa:	d903      	bls.n	8006104 <_malloc_r+0x68>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	441c      	add	r4, r3
 8006100:	6025      	str	r5, [r4, #0]
 8006102:	e004      	b.n	800610e <_malloc_r+0x72>
 8006104:	6863      	ldr	r3, [r4, #4]
 8006106:	42a2      	cmp	r2, r4
 8006108:	bf0c      	ite	eq
 800610a:	600b      	streq	r3, [r1, #0]
 800610c:	6053      	strne	r3, [r2, #4]
 800610e:	4630      	mov	r0, r6
 8006110:	f000 fd80 	bl	8006c14 <__malloc_unlock>
 8006114:	f104 000b 	add.w	r0, r4, #11
 8006118:	1d23      	adds	r3, r4, #4
 800611a:	f020 0007 	bic.w	r0, r0, #7
 800611e:	1ac2      	subs	r2, r0, r3
 8006120:	d0cc      	beq.n	80060bc <_malloc_r+0x20>
 8006122:	1a1b      	subs	r3, r3, r0
 8006124:	50a3      	str	r3, [r4, r2]
 8006126:	e7c9      	b.n	80060bc <_malloc_r+0x20>
 8006128:	4622      	mov	r2, r4
 800612a:	6864      	ldr	r4, [r4, #4]
 800612c:	e7cc      	b.n	80060c8 <_malloc_r+0x2c>
 800612e:	1cc4      	adds	r4, r0, #3
 8006130:	f024 0403 	bic.w	r4, r4, #3
 8006134:	42a0      	cmp	r0, r4
 8006136:	d0e3      	beq.n	8006100 <_malloc_r+0x64>
 8006138:	1a21      	subs	r1, r4, r0
 800613a:	4630      	mov	r0, r6
 800613c:	f000 faf6 	bl	800672c <_sbrk_r>
 8006140:	3001      	adds	r0, #1
 8006142:	d1dd      	bne.n	8006100 <_malloc_r+0x64>
 8006144:	e7cf      	b.n	80060e6 <_malloc_r+0x4a>
 8006146:	bf00      	nop
 8006148:	200049a4 	.word	0x200049a4
 800614c:	200049a8 	.word	0x200049a8

08006150 <__sfputc_r>:
 8006150:	6893      	ldr	r3, [r2, #8]
 8006152:	3b01      	subs	r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	b410      	push	{r4}
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	da08      	bge.n	800616e <__sfputc_r+0x1e>
 800615c:	6994      	ldr	r4, [r2, #24]
 800615e:	42a3      	cmp	r3, r4
 8006160:	db01      	blt.n	8006166 <__sfputc_r+0x16>
 8006162:	290a      	cmp	r1, #10
 8006164:	d103      	bne.n	800616e <__sfputc_r+0x1e>
 8006166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616a:	f000 bb33 	b.w	80067d4 <__swbuf_r>
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	1c58      	adds	r0, r3, #1
 8006172:	6010      	str	r0, [r2, #0]
 8006174:	7019      	strb	r1, [r3, #0]
 8006176:	4608      	mov	r0, r1
 8006178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800617c:	4770      	bx	lr

0800617e <__sfputs_r>:
 800617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006180:	4606      	mov	r6, r0
 8006182:	460f      	mov	r7, r1
 8006184:	4614      	mov	r4, r2
 8006186:	18d5      	adds	r5, r2, r3
 8006188:	42ac      	cmp	r4, r5
 800618a:	d101      	bne.n	8006190 <__sfputs_r+0x12>
 800618c:	2000      	movs	r0, #0
 800618e:	e007      	b.n	80061a0 <__sfputs_r+0x22>
 8006190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006194:	463a      	mov	r2, r7
 8006196:	4630      	mov	r0, r6
 8006198:	f7ff ffda 	bl	8006150 <__sfputc_r>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d1f3      	bne.n	8006188 <__sfputs_r+0xa>
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061a4 <_vfiprintf_r>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	460d      	mov	r5, r1
 80061aa:	b09d      	sub	sp, #116	; 0x74
 80061ac:	4614      	mov	r4, r2
 80061ae:	4698      	mov	r8, r3
 80061b0:	4606      	mov	r6, r0
 80061b2:	b118      	cbz	r0, 80061bc <_vfiprintf_r+0x18>
 80061b4:	6983      	ldr	r3, [r0, #24]
 80061b6:	b90b      	cbnz	r3, 80061bc <_vfiprintf_r+0x18>
 80061b8:	f7ff fed0 	bl	8005f5c <__sinit>
 80061bc:	4b89      	ldr	r3, [pc, #548]	; (80063e4 <_vfiprintf_r+0x240>)
 80061be:	429d      	cmp	r5, r3
 80061c0:	d11b      	bne.n	80061fa <_vfiprintf_r+0x56>
 80061c2:	6875      	ldr	r5, [r6, #4]
 80061c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c6:	07d9      	lsls	r1, r3, #31
 80061c8:	d405      	bmi.n	80061d6 <_vfiprintf_r+0x32>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	059a      	lsls	r2, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_vfiprintf_r+0x32>
 80061d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d2:	f7ff ff61 	bl	8006098 <__retarget_lock_acquire_recursive>
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	d501      	bpl.n	80061e0 <_vfiprintf_r+0x3c>
 80061dc:	692b      	ldr	r3, [r5, #16]
 80061de:	b9eb      	cbnz	r3, 800621c <_vfiprintf_r+0x78>
 80061e0:	4629      	mov	r1, r5
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fb5a 	bl	800689c <__swsetup_r>
 80061e8:	b1c0      	cbz	r0, 800621c <_vfiprintf_r+0x78>
 80061ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ec:	07dc      	lsls	r4, r3, #31
 80061ee:	d50e      	bpl.n	800620e <_vfiprintf_r+0x6a>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b01d      	add	sp, #116	; 0x74
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	4b7b      	ldr	r3, [pc, #492]	; (80063e8 <_vfiprintf_r+0x244>)
 80061fc:	429d      	cmp	r5, r3
 80061fe:	d101      	bne.n	8006204 <_vfiprintf_r+0x60>
 8006200:	68b5      	ldr	r5, [r6, #8]
 8006202:	e7df      	b.n	80061c4 <_vfiprintf_r+0x20>
 8006204:	4b79      	ldr	r3, [pc, #484]	; (80063ec <_vfiprintf_r+0x248>)
 8006206:	429d      	cmp	r5, r3
 8006208:	bf08      	it	eq
 800620a:	68f5      	ldreq	r5, [r6, #12]
 800620c:	e7da      	b.n	80061c4 <_vfiprintf_r+0x20>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	0598      	lsls	r0, r3, #22
 8006212:	d4ed      	bmi.n	80061f0 <_vfiprintf_r+0x4c>
 8006214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006216:	f7ff ff40 	bl	800609a <__retarget_lock_release_recursive>
 800621a:	e7e9      	b.n	80061f0 <_vfiprintf_r+0x4c>
 800621c:	2300      	movs	r3, #0
 800621e:	9309      	str	r3, [sp, #36]	; 0x24
 8006220:	2320      	movs	r3, #32
 8006222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006226:	f8cd 800c 	str.w	r8, [sp, #12]
 800622a:	2330      	movs	r3, #48	; 0x30
 800622c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063f0 <_vfiprintf_r+0x24c>
 8006230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006234:	f04f 0901 	mov.w	r9, #1
 8006238:	4623      	mov	r3, r4
 800623a:	469a      	mov	sl, r3
 800623c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006240:	b10a      	cbz	r2, 8006246 <_vfiprintf_r+0xa2>
 8006242:	2a25      	cmp	r2, #37	; 0x25
 8006244:	d1f9      	bne.n	800623a <_vfiprintf_r+0x96>
 8006246:	ebba 0b04 	subs.w	fp, sl, r4
 800624a:	d00b      	beq.n	8006264 <_vfiprintf_r+0xc0>
 800624c:	465b      	mov	r3, fp
 800624e:	4622      	mov	r2, r4
 8006250:	4629      	mov	r1, r5
 8006252:	4630      	mov	r0, r6
 8006254:	f7ff ff93 	bl	800617e <__sfputs_r>
 8006258:	3001      	adds	r0, #1
 800625a:	f000 80aa 	beq.w	80063b2 <_vfiprintf_r+0x20e>
 800625e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006260:	445a      	add	r2, fp
 8006262:	9209      	str	r2, [sp, #36]	; 0x24
 8006264:	f89a 3000 	ldrb.w	r3, [sl]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80a2 	beq.w	80063b2 <_vfiprintf_r+0x20e>
 800626e:	2300      	movs	r3, #0
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006278:	f10a 0a01 	add.w	sl, sl, #1
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006284:	931a      	str	r3, [sp, #104]	; 0x68
 8006286:	4654      	mov	r4, sl
 8006288:	2205      	movs	r2, #5
 800628a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628e:	4858      	ldr	r0, [pc, #352]	; (80063f0 <_vfiprintf_r+0x24c>)
 8006290:	f7f9 ffa6 	bl	80001e0 <memchr>
 8006294:	9a04      	ldr	r2, [sp, #16]
 8006296:	b9d8      	cbnz	r0, 80062d0 <_vfiprintf_r+0x12c>
 8006298:	06d1      	lsls	r1, r2, #27
 800629a:	bf44      	itt	mi
 800629c:	2320      	movmi	r3, #32
 800629e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a2:	0713      	lsls	r3, r2, #28
 80062a4:	bf44      	itt	mi
 80062a6:	232b      	movmi	r3, #43	; 0x2b
 80062a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ac:	f89a 3000 	ldrb.w	r3, [sl]
 80062b0:	2b2a      	cmp	r3, #42	; 0x2a
 80062b2:	d015      	beq.n	80062e0 <_vfiprintf_r+0x13c>
 80062b4:	9a07      	ldr	r2, [sp, #28]
 80062b6:	4654      	mov	r4, sl
 80062b8:	2000      	movs	r0, #0
 80062ba:	f04f 0c0a 	mov.w	ip, #10
 80062be:	4621      	mov	r1, r4
 80062c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c4:	3b30      	subs	r3, #48	; 0x30
 80062c6:	2b09      	cmp	r3, #9
 80062c8:	d94e      	bls.n	8006368 <_vfiprintf_r+0x1c4>
 80062ca:	b1b0      	cbz	r0, 80062fa <_vfiprintf_r+0x156>
 80062cc:	9207      	str	r2, [sp, #28]
 80062ce:	e014      	b.n	80062fa <_vfiprintf_r+0x156>
 80062d0:	eba0 0308 	sub.w	r3, r0, r8
 80062d4:	fa09 f303 	lsl.w	r3, r9, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	46a2      	mov	sl, r4
 80062de:	e7d2      	b.n	8006286 <_vfiprintf_r+0xe2>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	1d19      	adds	r1, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	9103      	str	r1, [sp, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfbb      	ittet	lt
 80062ec:	425b      	neglt	r3, r3
 80062ee:	f042 0202 	orrlt.w	r2, r2, #2
 80062f2:	9307      	strge	r3, [sp, #28]
 80062f4:	9307      	strlt	r3, [sp, #28]
 80062f6:	bfb8      	it	lt
 80062f8:	9204      	strlt	r2, [sp, #16]
 80062fa:	7823      	ldrb	r3, [r4, #0]
 80062fc:	2b2e      	cmp	r3, #46	; 0x2e
 80062fe:	d10c      	bne.n	800631a <_vfiprintf_r+0x176>
 8006300:	7863      	ldrb	r3, [r4, #1]
 8006302:	2b2a      	cmp	r3, #42	; 0x2a
 8006304:	d135      	bne.n	8006372 <_vfiprintf_r+0x1ce>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	9203      	str	r2, [sp, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfb8      	it	lt
 8006312:	f04f 33ff 	movlt.w	r3, #4294967295
 8006316:	3402      	adds	r4, #2
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006400 <_vfiprintf_r+0x25c>
 800631e:	7821      	ldrb	r1, [r4, #0]
 8006320:	2203      	movs	r2, #3
 8006322:	4650      	mov	r0, sl
 8006324:	f7f9 ff5c 	bl	80001e0 <memchr>
 8006328:	b140      	cbz	r0, 800633c <_vfiprintf_r+0x198>
 800632a:	2340      	movs	r3, #64	; 0x40
 800632c:	eba0 000a 	sub.w	r0, r0, sl
 8006330:	fa03 f000 	lsl.w	r0, r3, r0
 8006334:	9b04      	ldr	r3, [sp, #16]
 8006336:	4303      	orrs	r3, r0
 8006338:	3401      	adds	r4, #1
 800633a:	9304      	str	r3, [sp, #16]
 800633c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006340:	482c      	ldr	r0, [pc, #176]	; (80063f4 <_vfiprintf_r+0x250>)
 8006342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006346:	2206      	movs	r2, #6
 8006348:	f7f9 ff4a 	bl	80001e0 <memchr>
 800634c:	2800      	cmp	r0, #0
 800634e:	d03f      	beq.n	80063d0 <_vfiprintf_r+0x22c>
 8006350:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <_vfiprintf_r+0x254>)
 8006352:	bb1b      	cbnz	r3, 800639c <_vfiprintf_r+0x1f8>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	3307      	adds	r3, #7
 8006358:	f023 0307 	bic.w	r3, r3, #7
 800635c:	3308      	adds	r3, #8
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006362:	443b      	add	r3, r7
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	e767      	b.n	8006238 <_vfiprintf_r+0x94>
 8006368:	fb0c 3202 	mla	r2, ip, r2, r3
 800636c:	460c      	mov	r4, r1
 800636e:	2001      	movs	r0, #1
 8006370:	e7a5      	b.n	80062be <_vfiprintf_r+0x11a>
 8006372:	2300      	movs	r3, #0
 8006374:	3401      	adds	r4, #1
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	4619      	mov	r1, r3
 800637a:	f04f 0c0a 	mov.w	ip, #10
 800637e:	4620      	mov	r0, r4
 8006380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006384:	3a30      	subs	r2, #48	; 0x30
 8006386:	2a09      	cmp	r2, #9
 8006388:	d903      	bls.n	8006392 <_vfiprintf_r+0x1ee>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0c5      	beq.n	800631a <_vfiprintf_r+0x176>
 800638e:	9105      	str	r1, [sp, #20]
 8006390:	e7c3      	b.n	800631a <_vfiprintf_r+0x176>
 8006392:	fb0c 2101 	mla	r1, ip, r1, r2
 8006396:	4604      	mov	r4, r0
 8006398:	2301      	movs	r3, #1
 800639a:	e7f0      	b.n	800637e <_vfiprintf_r+0x1da>
 800639c:	ab03      	add	r3, sp, #12
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	462a      	mov	r2, r5
 80063a2:	4b16      	ldr	r3, [pc, #88]	; (80063fc <_vfiprintf_r+0x258>)
 80063a4:	a904      	add	r1, sp, #16
 80063a6:	4630      	mov	r0, r6
 80063a8:	f3af 8000 	nop.w
 80063ac:	4607      	mov	r7, r0
 80063ae:	1c78      	adds	r0, r7, #1
 80063b0:	d1d6      	bne.n	8006360 <_vfiprintf_r+0x1bc>
 80063b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b4:	07d9      	lsls	r1, r3, #31
 80063b6:	d405      	bmi.n	80063c4 <_vfiprintf_r+0x220>
 80063b8:	89ab      	ldrh	r3, [r5, #12]
 80063ba:	059a      	lsls	r2, r3, #22
 80063bc:	d402      	bmi.n	80063c4 <_vfiprintf_r+0x220>
 80063be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063c0:	f7ff fe6b 	bl	800609a <__retarget_lock_release_recursive>
 80063c4:	89ab      	ldrh	r3, [r5, #12]
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	f53f af12 	bmi.w	80061f0 <_vfiprintf_r+0x4c>
 80063cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ce:	e711      	b.n	80061f4 <_vfiprintf_r+0x50>
 80063d0:	ab03      	add	r3, sp, #12
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	462a      	mov	r2, r5
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <_vfiprintf_r+0x258>)
 80063d8:	a904      	add	r1, sp, #16
 80063da:	4630      	mov	r0, r6
 80063dc:	f000 f880 	bl	80064e0 <_printf_i>
 80063e0:	e7e4      	b.n	80063ac <_vfiprintf_r+0x208>
 80063e2:	bf00      	nop
 80063e4:	08006dc8 	.word	0x08006dc8
 80063e8:	08006de8 	.word	0x08006de8
 80063ec:	08006da8 	.word	0x08006da8
 80063f0:	08006e08 	.word	0x08006e08
 80063f4:	08006e12 	.word	0x08006e12
 80063f8:	00000000 	.word	0x00000000
 80063fc:	0800617f 	.word	0x0800617f
 8006400:	08006e0e 	.word	0x08006e0e

08006404 <_printf_common>:
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	4616      	mov	r6, r2
 800640a:	4699      	mov	r9, r3
 800640c:	688a      	ldr	r2, [r1, #8]
 800640e:	690b      	ldr	r3, [r1, #16]
 8006410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006414:	4293      	cmp	r3, r2
 8006416:	bfb8      	it	lt
 8006418:	4613      	movlt	r3, r2
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006420:	4607      	mov	r7, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b10a      	cbz	r2, 800642a <_printf_common+0x26>
 8006426:	3301      	adds	r3, #1
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	0699      	lsls	r1, r3, #26
 800642e:	bf42      	ittt	mi
 8006430:	6833      	ldrmi	r3, [r6, #0]
 8006432:	3302      	addmi	r3, #2
 8006434:	6033      	strmi	r3, [r6, #0]
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	f015 0506 	ands.w	r5, r5, #6
 800643c:	d106      	bne.n	800644c <_printf_common+0x48>
 800643e:	f104 0a19 	add.w	sl, r4, #25
 8006442:	68e3      	ldr	r3, [r4, #12]
 8006444:	6832      	ldr	r2, [r6, #0]
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc26      	bgt.n	800649a <_printf_common+0x96>
 800644c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006450:	1e13      	subs	r3, r2, #0
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	bf18      	it	ne
 8006456:	2301      	movne	r3, #1
 8006458:	0692      	lsls	r2, r2, #26
 800645a:	d42b      	bmi.n	80064b4 <_printf_common+0xb0>
 800645c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006460:	4649      	mov	r1, r9
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	3001      	adds	r0, #1
 8006468:	d01e      	beq.n	80064a8 <_printf_common+0xa4>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	68e5      	ldr	r5, [r4, #12]
 800646e:	6832      	ldr	r2, [r6, #0]
 8006470:	f003 0306 	and.w	r3, r3, #6
 8006474:	2b04      	cmp	r3, #4
 8006476:	bf08      	it	eq
 8006478:	1aad      	subeq	r5, r5, r2
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	6922      	ldr	r2, [r4, #16]
 800647e:	bf0c      	ite	eq
 8006480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006484:	2500      	movne	r5, #0
 8006486:	4293      	cmp	r3, r2
 8006488:	bfc4      	itt	gt
 800648a:	1a9b      	subgt	r3, r3, r2
 800648c:	18ed      	addgt	r5, r5, r3
 800648e:	2600      	movs	r6, #0
 8006490:	341a      	adds	r4, #26
 8006492:	42b5      	cmp	r5, r6
 8006494:	d11a      	bne.n	80064cc <_printf_common+0xc8>
 8006496:	2000      	movs	r0, #0
 8006498:	e008      	b.n	80064ac <_printf_common+0xa8>
 800649a:	2301      	movs	r3, #1
 800649c:	4652      	mov	r2, sl
 800649e:	4649      	mov	r1, r9
 80064a0:	4638      	mov	r0, r7
 80064a2:	47c0      	blx	r8
 80064a4:	3001      	adds	r0, #1
 80064a6:	d103      	bne.n	80064b0 <_printf_common+0xac>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7c6      	b.n	8006442 <_printf_common+0x3e>
 80064b4:	18e1      	adds	r1, r4, r3
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	2030      	movs	r0, #48	; 0x30
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064be:	4422      	add	r2, r4
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064c8:	3302      	adds	r3, #2
 80064ca:	e7c7      	b.n	800645c <_printf_common+0x58>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4622      	mov	r2, r4
 80064d0:	4649      	mov	r1, r9
 80064d2:	4638      	mov	r0, r7
 80064d4:	47c0      	blx	r8
 80064d6:	3001      	adds	r0, #1
 80064d8:	d0e6      	beq.n	80064a8 <_printf_common+0xa4>
 80064da:	3601      	adds	r6, #1
 80064dc:	e7d9      	b.n	8006492 <_printf_common+0x8e>
	...

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	460c      	mov	r4, r1
 80064e6:	4691      	mov	r9, r2
 80064e8:	7e27      	ldrb	r7, [r4, #24]
 80064ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064ec:	2f78      	cmp	r7, #120	; 0x78
 80064ee:	4680      	mov	r8, r0
 80064f0:	469a      	mov	sl, r3
 80064f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	; 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d8 	beq.w	80066b2 <_printf_i+0x1d2>
 8006502:	2f58      	cmp	r7, #88	; 0x58
 8006504:	f000 80a3 	beq.w	800664e <_printf_i+0x16e>
 8006508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a001      	add	r0, pc, #4	; (adr r0, 8006520 <_printf_i+0x40>)
 800651c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	08006699 	.word	0x08006699
 8006550:	080065bd 	.word	0x080065bd
 8006554:	0800667b 	.word	0x0800667b
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066bb 	.word	0x080066bb
 8006564:	08006509 	.word	0x08006509
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	08006683 	.word	0x08006683
 8006578:	680b      	ldr	r3, [r1, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	600a      	str	r2, [r1, #0]
 8006580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e0a3      	b.n	80066d4 <_printf_i+0x1f4>
 800658c:	6825      	ldr	r5, [r4, #0]
 800658e:	6808      	ldr	r0, [r1, #0]
 8006590:	062e      	lsls	r6, r5, #24
 8006592:	f100 0304 	add.w	r3, r0, #4
 8006596:	d50a      	bpl.n	80065ae <_printf_i+0xce>
 8006598:	6805      	ldr	r5, [r0, #0]
 800659a:	600b      	str	r3, [r1, #0]
 800659c:	2d00      	cmp	r5, #0
 800659e:	da03      	bge.n	80065a8 <_printf_i+0xc8>
 80065a0:	232d      	movs	r3, #45	; 0x2d
 80065a2:	426d      	negs	r5, r5
 80065a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a8:	485e      	ldr	r0, [pc, #376]	; (8006724 <_printf_i+0x244>)
 80065aa:	230a      	movs	r3, #10
 80065ac:	e019      	b.n	80065e2 <_printf_i+0x102>
 80065ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80065b2:	6805      	ldr	r5, [r0, #0]
 80065b4:	600b      	str	r3, [r1, #0]
 80065b6:	bf18      	it	ne
 80065b8:	b22d      	sxthne	r5, r5
 80065ba:	e7ef      	b.n	800659c <_printf_i+0xbc>
 80065bc:	680b      	ldr	r3, [r1, #0]
 80065be:	6825      	ldr	r5, [r4, #0]
 80065c0:	1d18      	adds	r0, r3, #4
 80065c2:	6008      	str	r0, [r1, #0]
 80065c4:	0628      	lsls	r0, r5, #24
 80065c6:	d501      	bpl.n	80065cc <_printf_i+0xec>
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <_printf_i+0xf2>
 80065cc:	0669      	lsls	r1, r5, #25
 80065ce:	d5fb      	bpl.n	80065c8 <_printf_i+0xe8>
 80065d0:	881d      	ldrh	r5, [r3, #0]
 80065d2:	4854      	ldr	r0, [pc, #336]	; (8006724 <_printf_i+0x244>)
 80065d4:	2f6f      	cmp	r7, #111	; 0x6f
 80065d6:	bf0c      	ite	eq
 80065d8:	2308      	moveq	r3, #8
 80065da:	230a      	movne	r3, #10
 80065dc:	2100      	movs	r1, #0
 80065de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065e2:	6866      	ldr	r6, [r4, #4]
 80065e4:	60a6      	str	r6, [r4, #8]
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	bfa2      	ittt	ge
 80065ea:	6821      	ldrge	r1, [r4, #0]
 80065ec:	f021 0104 	bicge.w	r1, r1, #4
 80065f0:	6021      	strge	r1, [r4, #0]
 80065f2:	b90d      	cbnz	r5, 80065f8 <_printf_i+0x118>
 80065f4:	2e00      	cmp	r6, #0
 80065f6:	d04d      	beq.n	8006694 <_printf_i+0x1b4>
 80065f8:	4616      	mov	r6, r2
 80065fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80065fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006602:	5dc7      	ldrb	r7, [r0, r7]
 8006604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006608:	462f      	mov	r7, r5
 800660a:	42bb      	cmp	r3, r7
 800660c:	460d      	mov	r5, r1
 800660e:	d9f4      	bls.n	80065fa <_printf_i+0x11a>
 8006610:	2b08      	cmp	r3, #8
 8006612:	d10b      	bne.n	800662c <_printf_i+0x14c>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	07df      	lsls	r7, r3, #31
 8006618:	d508      	bpl.n	800662c <_printf_i+0x14c>
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	4299      	cmp	r1, r3
 8006620:	bfde      	ittt	le
 8006622:	2330      	movle	r3, #48	; 0x30
 8006624:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800662c:	1b92      	subs	r2, r2, r6
 800662e:	6122      	str	r2, [r4, #16]
 8006630:	f8cd a000 	str.w	sl, [sp]
 8006634:	464b      	mov	r3, r9
 8006636:	aa03      	add	r2, sp, #12
 8006638:	4621      	mov	r1, r4
 800663a:	4640      	mov	r0, r8
 800663c:	f7ff fee2 	bl	8006404 <_printf_common>
 8006640:	3001      	adds	r0, #1
 8006642:	d14c      	bne.n	80066de <_printf_i+0x1fe>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	b004      	add	sp, #16
 800664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664e:	4835      	ldr	r0, [pc, #212]	; (8006724 <_printf_i+0x244>)
 8006650:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	680e      	ldr	r6, [r1, #0]
 8006658:	061f      	lsls	r7, r3, #24
 800665a:	f856 5b04 	ldr.w	r5, [r6], #4
 800665e:	600e      	str	r6, [r1, #0]
 8006660:	d514      	bpl.n	800668c <_printf_i+0x1ac>
 8006662:	07d9      	lsls	r1, r3, #31
 8006664:	bf44      	itt	mi
 8006666:	f043 0320 	orrmi.w	r3, r3, #32
 800666a:	6023      	strmi	r3, [r4, #0]
 800666c:	b91d      	cbnz	r5, 8006676 <_printf_i+0x196>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	f023 0320 	bic.w	r3, r3, #32
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	2310      	movs	r3, #16
 8006678:	e7b0      	b.n	80065dc <_printf_i+0xfc>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f043 0320 	orr.w	r3, r3, #32
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	2378      	movs	r3, #120	; 0x78
 8006684:	4828      	ldr	r0, [pc, #160]	; (8006728 <_printf_i+0x248>)
 8006686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800668a:	e7e3      	b.n	8006654 <_printf_i+0x174>
 800668c:	065e      	lsls	r6, r3, #25
 800668e:	bf48      	it	mi
 8006690:	b2ad      	uxthmi	r5, r5
 8006692:	e7e6      	b.n	8006662 <_printf_i+0x182>
 8006694:	4616      	mov	r6, r2
 8006696:	e7bb      	b.n	8006610 <_printf_i+0x130>
 8006698:	680b      	ldr	r3, [r1, #0]
 800669a:	6826      	ldr	r6, [r4, #0]
 800669c:	6960      	ldr	r0, [r4, #20]
 800669e:	1d1d      	adds	r5, r3, #4
 80066a0:	600d      	str	r5, [r1, #0]
 80066a2:	0635      	lsls	r5, r6, #24
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	d501      	bpl.n	80066ac <_printf_i+0x1cc>
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <_printf_i+0x1d2>
 80066ac:	0671      	lsls	r1, r6, #25
 80066ae:	d5fb      	bpl.n	80066a8 <_printf_i+0x1c8>
 80066b0:	8018      	strh	r0, [r3, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	4616      	mov	r6, r2
 80066b8:	e7ba      	b.n	8006630 <_printf_i+0x150>
 80066ba:	680b      	ldr	r3, [r1, #0]
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	600a      	str	r2, [r1, #0]
 80066c0:	681e      	ldr	r6, [r3, #0]
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	2100      	movs	r1, #0
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7f9 fd8a 	bl	80001e0 <memchr>
 80066cc:	b108      	cbz	r0, 80066d2 <_printf_i+0x1f2>
 80066ce:	1b80      	subs	r0, r0, r6
 80066d0:	6060      	str	r0, [r4, #4]
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	2300      	movs	r3, #0
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066dc:	e7a8      	b.n	8006630 <_printf_i+0x150>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	4632      	mov	r2, r6
 80066e2:	4649      	mov	r1, r9
 80066e4:	4640      	mov	r0, r8
 80066e6:	47d0      	blx	sl
 80066e8:	3001      	adds	r0, #1
 80066ea:	d0ab      	beq.n	8006644 <_printf_i+0x164>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	079b      	lsls	r3, r3, #30
 80066f0:	d413      	bmi.n	800671a <_printf_i+0x23a>
 80066f2:	68e0      	ldr	r0, [r4, #12]
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	4298      	cmp	r0, r3
 80066f8:	bfb8      	it	lt
 80066fa:	4618      	movlt	r0, r3
 80066fc:	e7a4      	b.n	8006648 <_printf_i+0x168>
 80066fe:	2301      	movs	r3, #1
 8006700:	4632      	mov	r2, r6
 8006702:	4649      	mov	r1, r9
 8006704:	4640      	mov	r0, r8
 8006706:	47d0      	blx	sl
 8006708:	3001      	adds	r0, #1
 800670a:	d09b      	beq.n	8006644 <_printf_i+0x164>
 800670c:	3501      	adds	r5, #1
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	9903      	ldr	r1, [sp, #12]
 8006712:	1a5b      	subs	r3, r3, r1
 8006714:	42ab      	cmp	r3, r5
 8006716:	dcf2      	bgt.n	80066fe <_printf_i+0x21e>
 8006718:	e7eb      	b.n	80066f2 <_printf_i+0x212>
 800671a:	2500      	movs	r5, #0
 800671c:	f104 0619 	add.w	r6, r4, #25
 8006720:	e7f5      	b.n	800670e <_printf_i+0x22e>
 8006722:	bf00      	nop
 8006724:	08006e19 	.word	0x08006e19
 8006728:	08006e2a 	.word	0x08006e2a

0800672c <_sbrk_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_sbrk_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fa fb06 	bl	8000d48 <_sbrk>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_sbrk_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_sbrk_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20004ae4 	.word	0x20004ae4

0800674c <__sread>:
 800674c:	b510      	push	{r4, lr}
 800674e:	460c      	mov	r4, r1
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	f000 fab4 	bl	8006cc0 <_read_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	bfab      	itete	ge
 800675c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800675e:	89a3      	ldrhlt	r3, [r4, #12]
 8006760:	181b      	addge	r3, r3, r0
 8006762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006766:	bfac      	ite	ge
 8006768:	6563      	strge	r3, [r4, #84]	; 0x54
 800676a:	81a3      	strhlt	r3, [r4, #12]
 800676c:	bd10      	pop	{r4, pc}

0800676e <__swrite>:
 800676e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006772:	461f      	mov	r7, r3
 8006774:	898b      	ldrh	r3, [r1, #12]
 8006776:	05db      	lsls	r3, r3, #23
 8006778:	4605      	mov	r5, r0
 800677a:	460c      	mov	r4, r1
 800677c:	4616      	mov	r6, r2
 800677e:	d505      	bpl.n	800678c <__swrite+0x1e>
 8006780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006784:	2302      	movs	r3, #2
 8006786:	2200      	movs	r2, #0
 8006788:	f000 f9c8 	bl	8006b1c <_lseek_r>
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	4632      	mov	r2, r6
 800679a:	463b      	mov	r3, r7
 800679c:	4628      	mov	r0, r5
 800679e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067a2:	f000 b869 	b.w	8006878 <_write_r>

080067a6 <__sseek>:
 80067a6:	b510      	push	{r4, lr}
 80067a8:	460c      	mov	r4, r1
 80067aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ae:	f000 f9b5 	bl	8006b1c <_lseek_r>
 80067b2:	1c43      	adds	r3, r0, #1
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	bf15      	itete	ne
 80067b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80067ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067c2:	81a3      	strheq	r3, [r4, #12]
 80067c4:	bf18      	it	ne
 80067c6:	81a3      	strhne	r3, [r4, #12]
 80067c8:	bd10      	pop	{r4, pc}

080067ca <__sclose>:
 80067ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ce:	f000 b8d3 	b.w	8006978 <_close_r>
	...

080067d4 <__swbuf_r>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	460e      	mov	r6, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	4605      	mov	r5, r0
 80067dc:	b118      	cbz	r0, 80067e6 <__swbuf_r+0x12>
 80067de:	6983      	ldr	r3, [r0, #24]
 80067e0:	b90b      	cbnz	r3, 80067e6 <__swbuf_r+0x12>
 80067e2:	f7ff fbbb 	bl	8005f5c <__sinit>
 80067e6:	4b21      	ldr	r3, [pc, #132]	; (800686c <__swbuf_r+0x98>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	d12b      	bne.n	8006844 <__swbuf_r+0x70>
 80067ec:	686c      	ldr	r4, [r5, #4]
 80067ee:	69a3      	ldr	r3, [r4, #24]
 80067f0:	60a3      	str	r3, [r4, #8]
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	071a      	lsls	r2, r3, #28
 80067f6:	d52f      	bpl.n	8006858 <__swbuf_r+0x84>
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	b36b      	cbz	r3, 8006858 <__swbuf_r+0x84>
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	1ac0      	subs	r0, r0, r3
 8006802:	6963      	ldr	r3, [r4, #20]
 8006804:	b2f6      	uxtb	r6, r6
 8006806:	4283      	cmp	r3, r0
 8006808:	4637      	mov	r7, r6
 800680a:	dc04      	bgt.n	8006816 <__swbuf_r+0x42>
 800680c:	4621      	mov	r1, r4
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f948 	bl	8006aa4 <_fflush_r>
 8006814:	bb30      	cbnz	r0, 8006864 <__swbuf_r+0x90>
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	3b01      	subs	r3, #1
 800681a:	60a3      	str	r3, [r4, #8]
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	701e      	strb	r6, [r3, #0]
 8006824:	6963      	ldr	r3, [r4, #20]
 8006826:	3001      	adds	r0, #1
 8006828:	4283      	cmp	r3, r0
 800682a:	d004      	beq.n	8006836 <__swbuf_r+0x62>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	07db      	lsls	r3, r3, #31
 8006830:	d506      	bpl.n	8006840 <__swbuf_r+0x6c>
 8006832:	2e0a      	cmp	r6, #10
 8006834:	d104      	bne.n	8006840 <__swbuf_r+0x6c>
 8006836:	4621      	mov	r1, r4
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f933 	bl	8006aa4 <_fflush_r>
 800683e:	b988      	cbnz	r0, 8006864 <__swbuf_r+0x90>
 8006840:	4638      	mov	r0, r7
 8006842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <__swbuf_r+0x9c>)
 8006846:	429c      	cmp	r4, r3
 8006848:	d101      	bne.n	800684e <__swbuf_r+0x7a>
 800684a:	68ac      	ldr	r4, [r5, #8]
 800684c:	e7cf      	b.n	80067ee <__swbuf_r+0x1a>
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <__swbuf_r+0xa0>)
 8006850:	429c      	cmp	r4, r3
 8006852:	bf08      	it	eq
 8006854:	68ec      	ldreq	r4, [r5, #12]
 8006856:	e7ca      	b.n	80067ee <__swbuf_r+0x1a>
 8006858:	4621      	mov	r1, r4
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f81e 	bl	800689c <__swsetup_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	d0cb      	beq.n	80067fc <__swbuf_r+0x28>
 8006864:	f04f 37ff 	mov.w	r7, #4294967295
 8006868:	e7ea      	b.n	8006840 <__swbuf_r+0x6c>
 800686a:	bf00      	nop
 800686c:	08006dc8 	.word	0x08006dc8
 8006870:	08006de8 	.word	0x08006de8
 8006874:	08006da8 	.word	0x08006da8

08006878 <_write_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d07      	ldr	r5, [pc, #28]	; (8006898 <_write_r+0x20>)
 800687c:	4604      	mov	r4, r0
 800687e:	4608      	mov	r0, r1
 8006880:	4611      	mov	r1, r2
 8006882:	2200      	movs	r2, #0
 8006884:	602a      	str	r2, [r5, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	f7fa fa0d 	bl	8000ca6 <_write>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d102      	bne.n	8006896 <_write_r+0x1e>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	b103      	cbz	r3, 8006896 <_write_r+0x1e>
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	20004ae4 	.word	0x20004ae4

0800689c <__swsetup_r>:
 800689c:	4b32      	ldr	r3, [pc, #200]	; (8006968 <__swsetup_r+0xcc>)
 800689e:	b570      	push	{r4, r5, r6, lr}
 80068a0:	681d      	ldr	r5, [r3, #0]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	b125      	cbz	r5, 80068b2 <__swsetup_r+0x16>
 80068a8:	69ab      	ldr	r3, [r5, #24]
 80068aa:	b913      	cbnz	r3, 80068b2 <__swsetup_r+0x16>
 80068ac:	4628      	mov	r0, r5
 80068ae:	f7ff fb55 	bl	8005f5c <__sinit>
 80068b2:	4b2e      	ldr	r3, [pc, #184]	; (800696c <__swsetup_r+0xd0>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d10f      	bne.n	80068d8 <__swsetup_r+0x3c>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c0:	0719      	lsls	r1, r3, #28
 80068c2:	d42c      	bmi.n	800691e <__swsetup_r+0x82>
 80068c4:	06dd      	lsls	r5, r3, #27
 80068c6:	d411      	bmi.n	80068ec <__swsetup_r+0x50>
 80068c8:	2309      	movs	r3, #9
 80068ca:	6033      	str	r3, [r6, #0]
 80068cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	e03e      	b.n	8006956 <__swsetup_r+0xba>
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <__swsetup_r+0xd4>)
 80068da:	429c      	cmp	r4, r3
 80068dc:	d101      	bne.n	80068e2 <__swsetup_r+0x46>
 80068de:	68ac      	ldr	r4, [r5, #8]
 80068e0:	e7eb      	b.n	80068ba <__swsetup_r+0x1e>
 80068e2:	4b24      	ldr	r3, [pc, #144]	; (8006974 <__swsetup_r+0xd8>)
 80068e4:	429c      	cmp	r4, r3
 80068e6:	bf08      	it	eq
 80068e8:	68ec      	ldreq	r4, [r5, #12]
 80068ea:	e7e6      	b.n	80068ba <__swsetup_r+0x1e>
 80068ec:	0758      	lsls	r0, r3, #29
 80068ee:	d512      	bpl.n	8006916 <__swsetup_r+0x7a>
 80068f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f2:	b141      	cbz	r1, 8006906 <__swsetup_r+0x6a>
 80068f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f8:	4299      	cmp	r1, r3
 80068fa:	d002      	beq.n	8006902 <__swsetup_r+0x66>
 80068fc:	4630      	mov	r0, r6
 80068fe:	f000 f98f 	bl	8006c20 <_free_r>
 8006902:	2300      	movs	r3, #0
 8006904:	6363      	str	r3, [r4, #52]	; 0x34
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	2300      	movs	r3, #0
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f043 0308 	orr.w	r3, r3, #8
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	b94b      	cbnz	r3, 8006936 <__swsetup_r+0x9a>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d003      	beq.n	8006936 <__swsetup_r+0x9a>
 800692e:	4621      	mov	r1, r4
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f929 	bl	8006b88 <__smakebuf_r>
 8006936:	89a0      	ldrh	r0, [r4, #12]
 8006938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800693c:	f010 0301 	ands.w	r3, r0, #1
 8006940:	d00a      	beq.n	8006958 <__swsetup_r+0xbc>
 8006942:	2300      	movs	r3, #0
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	6963      	ldr	r3, [r4, #20]
 8006948:	425b      	negs	r3, r3
 800694a:	61a3      	str	r3, [r4, #24]
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	b943      	cbnz	r3, 8006962 <__swsetup_r+0xc6>
 8006950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006954:	d1ba      	bne.n	80068cc <__swsetup_r+0x30>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	0781      	lsls	r1, r0, #30
 800695a:	bf58      	it	pl
 800695c:	6963      	ldrpl	r3, [r4, #20]
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	e7f4      	b.n	800694c <__swsetup_r+0xb0>
 8006962:	2000      	movs	r0, #0
 8006964:	e7f7      	b.n	8006956 <__swsetup_r+0xba>
 8006966:	bf00      	nop
 8006968:	20000010 	.word	0x20000010
 800696c:	08006dc8 	.word	0x08006dc8
 8006970:	08006de8 	.word	0x08006de8
 8006974:	08006da8 	.word	0x08006da8

08006978 <_close_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d06      	ldr	r5, [pc, #24]	; (8006994 <_close_r+0x1c>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f7fa f9ab 	bl	8000cde <_close>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_close_r+0x1a>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_close_r+0x1a>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20004ae4 	.word	0x20004ae4

08006998 <__sflush_r>:
 8006998:	898a      	ldrh	r2, [r1, #12]
 800699a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699e:	4605      	mov	r5, r0
 80069a0:	0710      	lsls	r0, r2, #28
 80069a2:	460c      	mov	r4, r1
 80069a4:	d458      	bmi.n	8006a58 <__sflush_r+0xc0>
 80069a6:	684b      	ldr	r3, [r1, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dc05      	bgt.n	80069b8 <__sflush_r+0x20>
 80069ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc02      	bgt.n	80069b8 <__sflush_r+0x20>
 80069b2:	2000      	movs	r0, #0
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d0f9      	beq.n	80069b2 <__sflush_r+0x1a>
 80069be:	2300      	movs	r3, #0
 80069c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c4:	682f      	ldr	r7, [r5, #0]
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	d032      	beq.n	8006a30 <__sflush_r+0x98>
 80069ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	075a      	lsls	r2, r3, #29
 80069d0:	d505      	bpl.n	80069de <__sflush_r+0x46>
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	1ac0      	subs	r0, r0, r3
 80069d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069d8:	b10b      	cbz	r3, 80069de <__sflush_r+0x46>
 80069da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069dc:	1ac0      	subs	r0, r0, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	4602      	mov	r2, r0
 80069e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b0      	blx	r6
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	d106      	bne.n	80069fe <__sflush_r+0x66>
 80069f0:	6829      	ldr	r1, [r5, #0]
 80069f2:	291d      	cmp	r1, #29
 80069f4:	d82c      	bhi.n	8006a50 <__sflush_r+0xb8>
 80069f6:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <__sflush_r+0x108>)
 80069f8:	40ca      	lsrs	r2, r1
 80069fa:	07d6      	lsls	r6, r2, #31
 80069fc:	d528      	bpl.n	8006a50 <__sflush_r+0xb8>
 80069fe:	2200      	movs	r2, #0
 8006a00:	6062      	str	r2, [r4, #4]
 8006a02:	04d9      	lsls	r1, r3, #19
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	6022      	str	r2, [r4, #0]
 8006a08:	d504      	bpl.n	8006a14 <__sflush_r+0x7c>
 8006a0a:	1c42      	adds	r2, r0, #1
 8006a0c:	d101      	bne.n	8006a12 <__sflush_r+0x7a>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	b903      	cbnz	r3, 8006a14 <__sflush_r+0x7c>
 8006a12:	6560      	str	r0, [r4, #84]	; 0x54
 8006a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a16:	602f      	str	r7, [r5, #0]
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	d0ca      	beq.n	80069b2 <__sflush_r+0x1a>
 8006a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a20:	4299      	cmp	r1, r3
 8006a22:	d002      	beq.n	8006a2a <__sflush_r+0x92>
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f8fb 	bl	8006c20 <_free_r>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a2e:	e7c1      	b.n	80069b4 <__sflush_r+0x1c>
 8006a30:	6a21      	ldr	r1, [r4, #32]
 8006a32:	2301      	movs	r3, #1
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	1c41      	adds	r1, r0, #1
 8006a3a:	d1c7      	bne.n	80069cc <__sflush_r+0x34>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0c4      	beq.n	80069cc <__sflush_r+0x34>
 8006a42:	2b1d      	cmp	r3, #29
 8006a44:	d001      	beq.n	8006a4a <__sflush_r+0xb2>
 8006a46:	2b16      	cmp	r3, #22
 8006a48:	d101      	bne.n	8006a4e <__sflush_r+0xb6>
 8006a4a:	602f      	str	r7, [r5, #0]
 8006a4c:	e7b1      	b.n	80069b2 <__sflush_r+0x1a>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	e7ad      	b.n	80069b4 <__sflush_r+0x1c>
 8006a58:	690f      	ldr	r7, [r1, #16]
 8006a5a:	2f00      	cmp	r7, #0
 8006a5c:	d0a9      	beq.n	80069b2 <__sflush_r+0x1a>
 8006a5e:	0793      	lsls	r3, r2, #30
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	bf08      	it	eq
 8006a64:	694b      	ldreq	r3, [r1, #20]
 8006a66:	600f      	str	r7, [r1, #0]
 8006a68:	bf18      	it	ne
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	eba6 0807 	sub.w	r8, r6, r7
 8006a70:	608b      	str	r3, [r1, #8]
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	dd9c      	ble.n	80069b2 <__sflush_r+0x1a>
 8006a78:	6a21      	ldr	r1, [r4, #32]
 8006a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a7c:	4643      	mov	r3, r8
 8006a7e:	463a      	mov	r2, r7
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b0      	blx	r6
 8006a84:	2800      	cmp	r0, #0
 8006a86:	dc06      	bgt.n	8006a96 <__sflush_r+0xfe>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	e78e      	b.n	80069b4 <__sflush_r+0x1c>
 8006a96:	4407      	add	r7, r0
 8006a98:	eba8 0800 	sub.w	r8, r8, r0
 8006a9c:	e7e9      	b.n	8006a72 <__sflush_r+0xda>
 8006a9e:	bf00      	nop
 8006aa0:	20400001 	.word	0x20400001

08006aa4 <_fflush_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	690b      	ldr	r3, [r1, #16]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b913      	cbnz	r3, 8006ab4 <_fflush_r+0x10>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	b118      	cbz	r0, 8006abe <_fflush_r+0x1a>
 8006ab6:	6983      	ldr	r3, [r0, #24]
 8006ab8:	b90b      	cbnz	r3, 8006abe <_fflush_r+0x1a>
 8006aba:	f7ff fa4f 	bl	8005f5c <__sinit>
 8006abe:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <_fflush_r+0x6c>)
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	d11b      	bne.n	8006afc <_fflush_r+0x58>
 8006ac4:	686c      	ldr	r4, [r5, #4]
 8006ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0ef      	beq.n	8006aae <_fflush_r+0xa>
 8006ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ad0:	07d0      	lsls	r0, r2, #31
 8006ad2:	d404      	bmi.n	8006ade <_fflush_r+0x3a>
 8006ad4:	0599      	lsls	r1, r3, #22
 8006ad6:	d402      	bmi.n	8006ade <_fflush_r+0x3a>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ada:	f7ff fadd 	bl	8006098 <__retarget_lock_acquire_recursive>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	f7ff ff59 	bl	8006998 <__sflush_r>
 8006ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae8:	07da      	lsls	r2, r3, #31
 8006aea:	4605      	mov	r5, r0
 8006aec:	d4e0      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	d4dd      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af6:	f7ff fad0 	bl	800609a <__retarget_lock_release_recursive>
 8006afa:	e7d9      	b.n	8006ab0 <_fflush_r+0xc>
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <_fflush_r+0x70>)
 8006afe:	429c      	cmp	r4, r3
 8006b00:	d101      	bne.n	8006b06 <_fflush_r+0x62>
 8006b02:	68ac      	ldr	r4, [r5, #8]
 8006b04:	e7df      	b.n	8006ac6 <_fflush_r+0x22>
 8006b06:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <_fflush_r+0x74>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	bf08      	it	eq
 8006b0c:	68ec      	ldreq	r4, [r5, #12]
 8006b0e:	e7da      	b.n	8006ac6 <_fflush_r+0x22>
 8006b10:	08006dc8 	.word	0x08006dc8
 8006b14:	08006de8 	.word	0x08006de8
 8006b18:	08006da8 	.word	0x08006da8

08006b1c <_lseek_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <_lseek_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fa f8fe 	bl	8000d2c <_lseek>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_lseek_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_lseek_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20004ae4 	.word	0x20004ae4

08006b40 <__swhatbuf_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	460e      	mov	r6, r1
 8006b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	b096      	sub	sp, #88	; 0x58
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	461d      	mov	r5, r3
 8006b50:	da07      	bge.n	8006b62 <__swhatbuf_r+0x22>
 8006b52:	2300      	movs	r3, #0
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	89b3      	ldrh	r3, [r6, #12]
 8006b58:	061a      	lsls	r2, r3, #24
 8006b5a:	d410      	bmi.n	8006b7e <__swhatbuf_r+0x3e>
 8006b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b60:	e00e      	b.n	8006b80 <__swhatbuf_r+0x40>
 8006b62:	466a      	mov	r2, sp
 8006b64:	f000 f8be 	bl	8006ce4 <_fstat_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	dbf2      	blt.n	8006b52 <__swhatbuf_r+0x12>
 8006b6c:	9a01      	ldr	r2, [sp, #4]
 8006b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b76:	425a      	negs	r2, r3
 8006b78:	415a      	adcs	r2, r3
 8006b7a:	602a      	str	r2, [r5, #0]
 8006b7c:	e7ee      	b.n	8006b5c <__swhatbuf_r+0x1c>
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	2000      	movs	r0, #0
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	b016      	add	sp, #88	; 0x58
 8006b86:	bd70      	pop	{r4, r5, r6, pc}

08006b88 <__smakebuf_r>:
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b8c:	079d      	lsls	r5, r3, #30
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	d507      	bpl.n	8006ba4 <__smakebuf_r+0x1c>
 8006b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	6163      	str	r3, [r4, #20]
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	ab01      	add	r3, sp, #4
 8006ba6:	466a      	mov	r2, sp
 8006ba8:	f7ff ffca 	bl	8006b40 <__swhatbuf_r>
 8006bac:	9900      	ldr	r1, [sp, #0]
 8006bae:	4605      	mov	r5, r0
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff fa73 	bl	800609c <_malloc_r>
 8006bb6:	b948      	cbnz	r0, 8006bcc <__smakebuf_r+0x44>
 8006bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bbc:	059a      	lsls	r2, r3, #22
 8006bbe:	d4ef      	bmi.n	8006ba0 <__smakebuf_r+0x18>
 8006bc0:	f023 0303 	bic.w	r3, r3, #3
 8006bc4:	f043 0302 	orr.w	r3, r3, #2
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	e7e3      	b.n	8006b94 <__smakebuf_r+0xc>
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <__smakebuf_r+0x7c>)
 8006bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	6020      	str	r0, [r4, #0]
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	6163      	str	r3, [r4, #20]
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	6120      	str	r0, [r4, #16]
 8006be2:	b15b      	cbz	r3, 8006bfc <__smakebuf_r+0x74>
 8006be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be8:	4630      	mov	r0, r6
 8006bea:	f000 f88d 	bl	8006d08 <_isatty_r>
 8006bee:	b128      	cbz	r0, 8006bfc <__smakebuf_r+0x74>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	89a0      	ldrh	r0, [r4, #12]
 8006bfe:	4305      	orrs	r5, r0
 8006c00:	81a5      	strh	r5, [r4, #12]
 8006c02:	e7cd      	b.n	8006ba0 <__smakebuf_r+0x18>
 8006c04:	08005ef5 	.word	0x08005ef5

08006c08 <__malloc_lock>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__malloc_lock+0x8>)
 8006c0a:	f7ff ba45 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20004adc 	.word	0x20004adc

08006c14 <__malloc_unlock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__malloc_unlock+0x8>)
 8006c16:	f7ff ba40 	b.w	800609a <__retarget_lock_release_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20004adc 	.word	0x20004adc

08006c20 <_free_r>:
 8006c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d048      	beq.n	8006cb8 <_free_r+0x98>
 8006c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2a:	9001      	str	r0, [sp, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c32:	bfb8      	it	lt
 8006c34:	18e4      	addlt	r4, r4, r3
 8006c36:	f7ff ffe7 	bl	8006c08 <__malloc_lock>
 8006c3a:	4a20      	ldr	r2, [pc, #128]	; (8006cbc <_free_r+0x9c>)
 8006c3c:	9801      	ldr	r0, [sp, #4]
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	4615      	mov	r5, r2
 8006c42:	b933      	cbnz	r3, 8006c52 <_free_r+0x32>
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	6014      	str	r4, [r2, #0]
 8006c48:	b003      	add	sp, #12
 8006c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c4e:	f7ff bfe1 	b.w	8006c14 <__malloc_unlock>
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	d90b      	bls.n	8006c6e <_free_r+0x4e>
 8006c56:	6821      	ldr	r1, [r4, #0]
 8006c58:	1862      	adds	r2, r4, r1
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	bf04      	itt	eq
 8006c5e:	681a      	ldreq	r2, [r3, #0]
 8006c60:	685b      	ldreq	r3, [r3, #4]
 8006c62:	6063      	str	r3, [r4, #4]
 8006c64:	bf04      	itt	eq
 8006c66:	1852      	addeq	r2, r2, r1
 8006c68:	6022      	streq	r2, [r4, #0]
 8006c6a:	602c      	str	r4, [r5, #0]
 8006c6c:	e7ec      	b.n	8006c48 <_free_r+0x28>
 8006c6e:	461a      	mov	r2, r3
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	b10b      	cbz	r3, 8006c78 <_free_r+0x58>
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	d9fa      	bls.n	8006c6e <_free_r+0x4e>
 8006c78:	6811      	ldr	r1, [r2, #0]
 8006c7a:	1855      	adds	r5, r2, r1
 8006c7c:	42a5      	cmp	r5, r4
 8006c7e:	d10b      	bne.n	8006c98 <_free_r+0x78>
 8006c80:	6824      	ldr	r4, [r4, #0]
 8006c82:	4421      	add	r1, r4
 8006c84:	1854      	adds	r4, r2, r1
 8006c86:	42a3      	cmp	r3, r4
 8006c88:	6011      	str	r1, [r2, #0]
 8006c8a:	d1dd      	bne.n	8006c48 <_free_r+0x28>
 8006c8c:	681c      	ldr	r4, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	6053      	str	r3, [r2, #4]
 8006c92:	4421      	add	r1, r4
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	e7d7      	b.n	8006c48 <_free_r+0x28>
 8006c98:	d902      	bls.n	8006ca0 <_free_r+0x80>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	e7d3      	b.n	8006c48 <_free_r+0x28>
 8006ca0:	6825      	ldr	r5, [r4, #0]
 8006ca2:	1961      	adds	r1, r4, r5
 8006ca4:	428b      	cmp	r3, r1
 8006ca6:	bf04      	itt	eq
 8006ca8:	6819      	ldreq	r1, [r3, #0]
 8006caa:	685b      	ldreq	r3, [r3, #4]
 8006cac:	6063      	str	r3, [r4, #4]
 8006cae:	bf04      	itt	eq
 8006cb0:	1949      	addeq	r1, r1, r5
 8006cb2:	6021      	streq	r1, [r4, #0]
 8006cb4:	6054      	str	r4, [r2, #4]
 8006cb6:	e7c7      	b.n	8006c48 <_free_r+0x28>
 8006cb8:	b003      	add	sp, #12
 8006cba:	bd30      	pop	{r4, r5, pc}
 8006cbc:	200049a4 	.word	0x200049a4

08006cc0 <_read_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d07      	ldr	r5, [pc, #28]	; (8006ce0 <_read_r+0x20>)
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4611      	mov	r1, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	602a      	str	r2, [r5, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f7f9 ffcc 	bl	8000c6c <_read>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_read_r+0x1e>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_read_r+0x1e>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20004ae4 	.word	0x20004ae4

08006ce4 <_fstat_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d07      	ldr	r5, [pc, #28]	; (8006d04 <_fstat_r+0x20>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	f7fa f800 	bl	8000cf6 <_fstat>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	d102      	bne.n	8006d00 <_fstat_r+0x1c>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	b103      	cbz	r3, 8006d00 <_fstat_r+0x1c>
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	bd38      	pop	{r3, r4, r5, pc}
 8006d02:	bf00      	nop
 8006d04:	20004ae4 	.word	0x20004ae4

08006d08 <_isatty_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4d06      	ldr	r5, [pc, #24]	; (8006d24 <_isatty_r+0x1c>)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	602b      	str	r3, [r5, #0]
 8006d14:	f7f9 ffff 	bl	8000d16 <_isatty>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_isatty_r+0x1a>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_isatty_r+0x1a>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20004ae4 	.word	0x20004ae4

08006d28 <_init>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr

08006d34 <_fini>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr
